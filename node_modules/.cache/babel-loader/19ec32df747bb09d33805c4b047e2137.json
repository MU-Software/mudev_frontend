{"ast":null,"code":"import _classCallCheck from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/createClass\";import _slicedToArray from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{Manager}from'socket.io-client';import{FrostError}from'src/common/error';import FrostAPI from'src/network/api';var SIO_RESP_UNMOUNT_TIMEOUT=15;var SIO_DESCRIPTION='재생목록의 실시간 정보를 받아오기 위한 연결';var COMMON_ERR_MSG_ADD_MAP={retryAfter5Min:'\\n5분 후에 다시 시도해주세요.',retryAfter10Min:'\\n10분 후에 다시 시도해주세요.',retryFullReload:'\\n키보드에서 \\'F5\\' 버튼을 눌러서 새로고침을 해 주세요.',retryAfterSignIn:'\\n로그인 후 이용해주세요.'};var COMMON_ERR_MSG_MAP={safeDisconnected:SIO_DESCRIPTION+'이 종료됐어요.',unknownErrorRetry5Min:SIO_DESCRIPTION+'에서\\n알 수 없는 문제가 생겼어요,'+COMMON_ERR_MSG_ADD_MAP.retryAfter5Min,unknownErrorRetryFullReload:SIO_DESCRIPTION+'에서\\n알 수 없는 문제가 생겼어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,signInRequired:'이 기능은 로그인 후 사용할 수 있어요,'+COMMON_ERR_MSG_ADD_MAP.retryAfterSignIn,signInfoCheckFailed:'로그인 정보를 확인하는 중 문제가 발생했어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,connectFailed:SIO_DESCRIPTION+'을 만들지 못했어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,unknownDisconnected:SIO_DESCRIPTION+'이\\n알 수 없는 이유로 종료됐어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,authFailed:SIO_DESCRIPTION+'을 인증하지 못했어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,authResponseFailed:SIO_DESCRIPTION+'의 인증 정보를 받지 못했어요.'+COMMON_ERR_MSG_ADD_MAP.retryFullReload,unknownAuthFailed:SIO_DESCRIPTION+'을 인증하는 중\\n알 수 없는 문제가 생겼어요,'+COMMON_ERR_MSG_ADD_MAP.retryFullReload};// Generate random safe string, borrowed from FrostAPI implementation\nvar generateRandomSecureToken=function generateRandomSecureToken(bytes){var randArray=new Uint32Array(bytes);window.crypto.getRandomValues(randArray);return buf2hex(randArray);};// From https://stackoverflow.com/a/40031979\n// Buffer to hex, also borrowed from FrostAPI implementation\nvar buf2hex=function buf2hex(buffer){return _toConsumableArray(new Uint8Array(buffer)).map(function(x){return x.toString(16).padStart(2,'0');}).join('');};// From https://stackoverflow.com/a/39977764/5702135\nvar assign=function assign(target){for(var _len=arguments.length,sources=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){sources[_key-1]=arguments[_key];}return Object.assign.apply(Object,[target].concat(_toConsumableArray(sources.map(function(x){return Object.entries(x).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return value!==undefined;}).reduce(function(obj,_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];return obj[key]=value,obj;},{});}))));};var playCoSocketIOHandlerInstance;export var PlayCoSocketIOHandler=/*#__PURE__*/function(){function PlayCoSocketIOHandler(){var _this=this;_classCallCheck(this,PlayCoSocketIOHandler);this.socketIoMgr=void 0;this.socketIo=void 0;this.sioToken=void 0;this.sioTokenExpiresAt=void 0;this.csrfToken=void 0;this.sessionId=void 0;this.prevRoomStatus=void 0;this.socketIoStatusMessage=void 0;this.onPlayCoConnected=void 0;this.onPlaylistModified=void 0;this.onUserStatusChanged=void 0;this.onSocketIOStatusChanged=void 0;this.socketIoEventHandler={connect:function connect(){_this.sessionId=_this.socketIo.id;// Get SIO Token and register session\n_this.refreshSIOToken(undefined,true,true);},reconnect:function reconnect(){// Same as connect\n_this.sessionId=_this.socketIo.id;// Get SIO Token and register session\n_this.refreshSIOToken(undefined,true,true);},disconnect:function disconnect(reason){console.log(\"DISCONNECTED FROM PLAYCO SIO, REASON: \".concat(reason));// Before disconnect and unconnect all hooks, we need to cleanup the UI if it's possible.\ntry{var _this$prevRoomStatus$,_this$prevRoomStatus,_this$prevRoomStatus$2,_this$prevRoomStatus2;if(_this.onUserStatusChanged)_this.onUserStatusChanged({playlist_id:(_this$prevRoomStatus$=(_this$prevRoomStatus=_this.prevRoomStatus)===null||_this$prevRoomStatus===void 0?void 0:_this$prevRoomStatus.playlist_id)!==null&&_this$prevRoomStatus$!==void 0?_this$prevRoomStatus$:-1,playlist_hash:(_this$prevRoomStatus$2=(_this$prevRoomStatus2=_this.prevRoomStatus)===null||_this$prevRoomStatus2===void 0?void 0:_this$prevRoomStatus2.playlist_hash)!==null&&_this$prevRoomStatus$2!==void 0?_this$prevRoomStatus$2:'',participants:{},db_modified:true});}catch(e){console.log(e);}_this.unsubscribeAllHooks();_this.sessionId='';_this.sioToken='';_this.sioTokenExpiresAt=new Date('Thu, 01 Jan 1970 00:00:00 GMT');_this.csrfToken=generateRandomSecureToken(32);},REQUEST_RESPONSE_0:function REQUEST_RESPONSE_0(data){console.log('Unknown response received! Received data >>> ---------------');console.log(data);console.log('------------------------------------------------------------');},PLAYLIST_USER_ENTERED:function PLAYLIST_USER_ENTERED(data){// When some user entered to this room\nvar roomStatus=data.data.room;_this.prevRoomStatus=roomStatus;try{if(_this.onUserStatusChanged)_this.onUserStatusChanged(roomStatus);}catch(e){console.log(e);}},PLAYLIST_USER_EXITED:function PLAYLIST_USER_EXITED(data){// When some user exited from this room\nvar roomStatus=data.data.room;try{if(_this.onUserStatusChanged)_this.onUserStatusChanged(roomStatus);}catch(e){console.log(e);}},PLAYLIST_MODIFIED:function PLAYLIST_MODIFIED(data){var _data$data$room$db_mo;var roomStatus=data.data.room;var shouldRoomRefreshed=(_data$data$room$db_mo=data.data.room.db_modified)!==null&&_data$data$room$db_mo!==void 0?_data$data$room$db_mo:false;_this.prevRoomStatus=roomStatus;try{if(_this.onUserStatusChanged)_this.onUserStatusChanged(roomStatus);}catch(e){console.log(e);}try{if(shouldRoomRefreshed&&_this.onPlaylistModified)_this.onPlaylistModified();}catch(e){console.log(e);}},OFFICIAL_ANNOUNCEMENT:function OFFICIAL_ANNOUNCEMENT(data){// RESERVED\nconsole.log('OFFICIAL_ANNOUNCEMENT event received! Received data >>> ----');console.log(data);console.log('------------------------------------------------------------');}};if(playCoSocketIOHandlerInstance)return playCoSocketIOHandlerInstance;this.socketIoMgr=new Manager('https://mudev.cc',{reconnectionDelayMax:5000,path:'/api/dev/ws',transports:['websocket'],upgrade:false,forceNew:false,autoConnect:false,closeOnBeforeunload:false});this.socketIo=this.socketIoMgr.socket('/playco_ws');for(var _i=0,_Object$entries=Object.entries(this.socketIoEventHandler);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];this.socketIo.on(key,value);}playCoSocketIOHandlerInstance=this;}// EVENT MAKER\n_createClass(PlayCoSocketIOHandler,[{key:\"connected\",get:// UTIL METHOD\nfunction get(){return this.socketIo.connected;}// UTIL METHOD\n},{key:\"getAuthBody\",value:function getAuthBody(additionalBody){return assign({sid:this.sessionId,sio_token:this.sioToken,sio_csrf_token:this.csrfToken},additionalBody!==null&&additionalBody!==void 0?additionalBody:{});}// UTIL METHOD\n},{key:\"setSIOStatMsg\",value:function setSIOStatMsg(newMsg){this.socketIoStatusMessage=newMsg;try{if(this.onSocketIOStatusChanged)this.onSocketIOStatusChanged(newMsg);}catch(e){console.log(e);}}// UTIL METHOD\n},{key:\"defaultErrorHandler\",value:function defaultErrorHandler(reason){var shouldDisconnect=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var alternativeShowMsg=arguments.length>2?arguments[2]:undefined;var self=this!==null&&this!==void 0?this:playCoSocketIOHandlerInstance;if(typeof reason==='object'&&reason.constructor.name==='FrostError'){console.log(reason.message);console.log(reason.debugMessage);console.log(reason.apiResponse);}else{console.log(reason);}// Set error message\ntry{self.setSIOStatMsg(alternativeShowMsg!==null&&alternativeShowMsg!==void 0?alternativeShowMsg:reason.message);}catch(e1){console.log(alternativeShowMsg!==null&&alternativeShowMsg!==void 0?alternativeShowMsg:reason.message);console.log(e1);}// Disconnect from SocketIO.\nif(shouldDisconnect)self.disconnect(false);return false;}// UTIL METHOD\n},{key:\"unsubscribeAllHooks\",value:function unsubscribeAllHooks(){this.onPlayCoConnected=undefined;this.onPlaylistModified=undefined;this.onUserStatusChanged=undefined;this.onSocketIOStatusChanged=undefined;}// EVENT HANDLER\n},{key:\"emitEvent\",value:function emitEvent(event,data,onSuccess,onFailure,isRetry){var _this2=this;var requestId=generateRandomSecureToken(16);if(data){data.request_id=requestId;}else{data={request_id:requestId};}var eventName=\"REQUEST_RESPONSE_\".concat(requestId);// Unregister request response handler after {SIO_RESP_UNMOUNT_TIMEOUT}sec.\nvar eventHandlerTimeoutID=setTimeout(function(){console.log(\"WARNING: \".concat(eventName,\" didn't handled in \").concat(SIO_RESP_UNMOUNT_TIMEOUT,\"sec, and handler is unmounted.\"));_this2.socketIo.removeAllListeners(eventName);},SIO_RESP_UNMOUNT_TIMEOUT*1000);var eventHandler=function eventHandler(response){clearTimeout(eventHandlerTimeoutID);// This will clear eventHandlerTimeout.\ntry{if(response===null||response===void 0?void 0:response.success){if(onSuccess)onSuccess(response);}else{// Response contains (success == false)\nvar dbgMsg='sio:emitEvent error\\n';dbgMsg+=\"(event=\".concat(event,\")=>\\n\");if(response){for(var _i2=0,_Object$entries2=Object.entries(response!==null&&response!==void 0?response:{});_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),key=_Object$entries2$_i[0],value=_Object$entries2$_i[1];if(key!=='data'){dbgMsg+=\"response?.\".concat(key,\" = \").concat(value,\"\\n\");}else{dbgMsg+=\"response?.\".concat(key,\" = \").concat(JSON.stringify(value),\"\\n\");}}}else{dbgMsg+=\"response = \".concat(response,\"\\n\");}if(event==='playco_connect'){var _response$message;_this2.defaultErrorHandler(new FrostError((_response$message=response===null||response===void 0?void 0:response.message)!==null&&_response$message!==void 0?_response$message:COMMON_ERR_MSG_MAP.unknownAuthFailed,dbgMsg,response===null||response===void 0?void 0:response.code,false),true,COMMON_ERR_MSG_MAP.unknownAuthFailed);return;}else if(isRetry){var _response$message2;_this2.defaultErrorHandler(new FrostError((_response$message2=response===null||response===void 0?void 0:response.message)!==null&&_response$message2!==void 0?_response$message2:COMMON_ERR_MSG_MAP.unknownAuthFailed,dbgMsg,response===null||response===void 0?void 0:response.code,false),true,COMMON_ERR_MSG_MAP.unknownAuthFailed);return;}else if(response===null||response===void 0?void 0:response.subCode.startsWith('SIO_TOKEN_')){// Refresh SIO Token and retry emitEvent.\n_this2.refreshSIOToken(function(){return _this2.emitEvent(event,data,onSuccess,onFailure,true);},false,true);return;}else{_this2.defaultErrorHandler(new FrostError((response===null||response===void 0?void 0:response.message)||COMMON_ERR_MSG_MAP.unknownErrorRetry5Min,dbgMsg,response===null||response===void 0?void 0:response.code,false),false,COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);return;}}}catch(e){if(onFailure){try{onFailure(e,response);}catch(e1){console.log(e);console.log(e1);_this2.defaultErrorHandler(e,false,COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);}}}};this.socketIo.once(eventName,eventHandler);this.socketIo.emit(event,data);}// EVENT MAKER\n},{key:\"refreshSIOToken\",value:function refreshSIOToken(){var _this3=this;var callback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:function(){/* */};var isOnConnect=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var forceRefresh=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!forceRefresh&&this.sioToken&&this.sioTokenExpiresAt>new Date()){// We assumes that token is alive.\n// If the callback is emitEvent and server returns SIO_TOKEN_EXPIRED or SIO_TOKEN_INVALID,\n// then emitEvent method will handle it properly.\ntry{callback();return;}catch(err){this.defaultErrorHandler(err);}}var frostAPI=new FrostAPI();frostAPI.isSignedIn(true).then(function(isSignedIn){if(!isSignedIn){// Check if Frost is signed in.\nthrow new FrostError(COMMON_ERR_MSG_MAP.signInRequired,'on refreshSIOToken, isSignedIn == false',-1,true);}else if(!_this3.socketIo.connected||!_this3.sessionId){// Check if Socket.IO is connected, and every statement is fulfilled.\nthrow new FrostError(COMMON_ERR_MSG_MAP.connectFailed,\"this.socketIo.connected = \".concat(_this3.socketIo.connected,\", !this.sessionId = \").concat(_this3.sessionId),-1,false);}// We need to get a new SIO Token by request.\n_this3.csrfToken=generateRandomSecureToken(32);return frostAPI.post('playco/socketio/auth',_this3.getAuthBody(),true).then(function(result){if(!result.success){throw new FrostError(COMMON_ERR_MSG_MAP.authResponseFailed,'/playco/socketio/auth returns response.success == false',result.code,false,result,undefined,'playco/socketio/auth');}// Get SIO token from response\nvar sioTokenData=result.data.sio_token;_this3.sioToken=sioTokenData.token;_this3.sioTokenExpiresAt=new Date(sioTokenData.exp);// Register session if this function is called on SocketIO onConnect event.\nif(isOnConnect){_this3.emitEvent('playco_connect',_this3.getAuthBody(),function(response){return _this3.onPlayCoConnected?_this3.onPlayCoConnected():function(){/* */};},// Session creation failed\nfunction(reason,response){return _this3.defaultErrorHandler(reason,true,COMMON_ERR_MSG_MAP.authFailed);});return;}else{callback();return;}},function(reason){// Failed to get SIO token\nreason.message=COMMON_ERR_MSG_MAP.authFailed;throw reason;});},function(reason){reason.message=COMMON_ERR_MSG_MAP.signInfoCheckFailed;throw reason;}).catch(this.defaultErrorHandler);}// EVENT MAKER\n},{key:\"connect\",value:function connect(){if(!this.socketIo.connected)// Connect SocketIO if it's not connected.\n// This will fire this.socketIoEventHandler.connect if the connection is successfully established.\nthis.socketIo.connect();}// EVENT MAKER\n},{key:\"disconnect\",value:function disconnect(){var isSafeDisconnect=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(this.socketIo.connected){this.socketIo.disconnect();if(isSafeDisconnect)this.setSIOStatMsg(COMMON_ERR_MSG_MAP.safeDisconnected);}}// EVENT MAKER\n},{key:\"enterPlaylist\",value:function enterPlaylist(playlistId,currentlyPlaying){var _this4=this;this.refreshSIOToken(function(){return _this4.emitEvent('playlist_enter',_this4.getAuthBody({playlist_id:playlistId,currently_playing:currentlyPlaying}),function(response){/* */},function(reason,response){/* */});});}// EVENT MAKER\n},{key:\"leavePlaylist\",value:function leavePlaylist(playlistId){var _this5=this;this.refreshSIOToken(function(){return _this5.emitEvent('playlist_leave',_this5.getAuthBody({playlist_id:playlistId}),function(response){/* */},function(reason,response){/* */});});}// EVENT MAKER\n},{key:\"setSessionCurrentPlaying\",value:function setSessionCurrentPlaying(playlistId,currentPlaying){var _this6=this;this.refreshSIOToken(function(){return _this6.emitEvent('playlist_set_status',_this6.getAuthBody({playlist_id:playlistId,currently_playing:currentPlaying}),function(response){/* */},function(reason,response){/* */});});}}]);return PlayCoSocketIOHandler;}();","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/page/playco/playco/sio.ts"],"names":["Manager","FrostError","FrostAPI","SIO_RESP_UNMOUNT_TIMEOUT","SIO_DESCRIPTION","COMMON_ERR_MSG_ADD_MAP","retryAfter5Min","retryAfter10Min","retryFullReload","retryAfterSignIn","COMMON_ERR_MSG_MAP","safeDisconnected","unknownErrorRetry5Min","unknownErrorRetryFullReload","signInRequired","signInfoCheckFailed","connectFailed","unknownDisconnected","authFailed","authResponseFailed","unknownAuthFailed","generateRandomSecureToken","bytes","randArray","Uint32Array","window","crypto","getRandomValues","buf2hex","buffer","Uint8Array","map","x","toString","padStart","join","assign","target","sources","Object","entries","filter","key","value","undefined","reduce","obj","playCoSocketIOHandlerInstance","PlayCoSocketIOHandler","socketIoMgr","socketIo","sioToken","sioTokenExpiresAt","csrfToken","sessionId","prevRoomStatus","socketIoStatusMessage","onPlayCoConnected","onPlaylistModified","onUserStatusChanged","onSocketIOStatusChanged","socketIoEventHandler","connect","id","refreshSIOToken","reconnect","disconnect","reason","console","log","playlist_id","playlist_hash","participants","db_modified","e","unsubscribeAllHooks","Date","REQUEST_RESPONSE_0","data","PLAYLIST_USER_ENTERED","roomStatus","room","PLAYLIST_USER_EXITED","PLAYLIST_MODIFIED","shouldRoomRefreshed","OFFICIAL_ANNOUNCEMENT","reconnectionDelayMax","path","transports","upgrade","forceNew","autoConnect","closeOnBeforeunload","socket","on","connected","additionalBody","sid","sio_token","sio_csrf_token","newMsg","shouldDisconnect","alternativeShowMsg","self","constructor","name","message","debugMessage","apiResponse","setSIOStatMsg","e1","event","onSuccess","onFailure","isRetry","requestId","request_id","eventName","eventHandlerTimeoutID","setTimeout","removeAllListeners","eventHandler","response","clearTimeout","success","dbgMsg","JSON","stringify","defaultErrorHandler","code","subCode","startsWith","emitEvent","once","emit","callback","isOnConnect","forceRefresh","err","frostAPI","isSignedIn","then","post","getAuthBody","result","sioTokenData","token","exp","catch","isSafeDisconnect","playlistId","currentlyPlaying","currently_playing","currentPlaying"],"mappings":"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","sourcesContent":["import { io, Manager } from 'socket.io-client';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from 'src/network/api';\r\n\r\nconst SIO_RESP_UNMOUNT_TIMEOUT = 15;\r\nconst SIO_DESCRIPTION = '재생목록의 실시간 정보를 받아오기 위한 연결';\r\nconst COMMON_ERR_MSG_ADD_MAP = {\r\n    retryAfter5Min: '\\n5분 후에 다시 시도해주세요.',\r\n    retryAfter10Min: '\\n10분 후에 다시 시도해주세요.',\r\n    retryFullReload: '\\n키보드에서 \\'F5\\' 버튼을 눌러서 새로고침을 해 주세요.',\r\n    retryAfterSignIn: '\\n로그인 후 이용해주세요.',\r\n}\r\nconst COMMON_ERR_MSG_MAP = {\r\n    safeDisconnected: SIO_DESCRIPTION + '이 종료됐어요.',\r\n\r\n    unknownErrorRetry5Min: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfter5Min,\r\n    unknownErrorRetryFullReload: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    signInRequired: '이 기능은 로그인 후 사용할 수 있어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfterSignIn,\r\n    signInfoCheckFailed: '로그인 정보를 확인하는 중 문제가 발생했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    connectFailed: SIO_DESCRIPTION + '을 만들지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownDisconnected: SIO_DESCRIPTION + '이\\n알 수 없는 이유로 종료됐어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authFailed: SIO_DESCRIPTION + '을 인증하지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authResponseFailed: SIO_DESCRIPTION + '의 인증 정보를 받지 못했어요.' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownAuthFailed: SIO_DESCRIPTION + '을 인증하는 중\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n}\r\n\r\ninterface PlayCoSocketIOResponseType {\r\n    code: number;\r\n    subCode: string;\r\n    success: boolean;\r\n    message: string;\r\n    data?: Record<string, unknown>;\r\n}\r\n\r\nexport interface PlayCoRoomType {\r\n    playlist_id: number;\r\n    playlist_hash: string;\r\n    participants: {\r\n        [nickname: string]: {\r\n            nickname: string;\r\n            data: Record<string, unknown>;\r\n            status: {\r\n                currently_playing: number;\r\n            };\r\n        }\r\n    };\r\n    current_play_target?: string; // NOT_USED\r\n    db_modified?: boolean;\r\n}\r\n\r\n// Generate random safe string, borrowed from FrostAPI implementation\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n    const randArray = new Uint32Array(bytes);\r\n    window.crypto.getRandomValues(randArray);\r\n    return buf2hex(randArray);\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\n// Buffer to hex, also borrowed from FrostAPI implementation\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n    return [...new Uint8Array(buffer)]\r\n        .map(x => x.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\n// From https://stackoverflow.com/a/39977764/5702135\r\nconst assign = (target, ...sources) =>\r\n    Object.assign(target, ...sources.map(x =>\r\n        Object.entries(x)\r\n            .filter(([key, value]) => value !== undefined)\r\n            .reduce((obj, [key, value]) => (obj[key] = value, obj), {})\r\n    ))\r\n\r\nlet playCoSocketIOHandlerInstance: PlayCoSocketIOHandler;\r\nexport class PlayCoSocketIOHandler {\r\n    private socketIoMgr: io.Manager;\r\n    private socketIo: io;\r\n\r\n    private sioToken: string;\r\n    private sioTokenExpiresAt: Date;\r\n    private csrfToken: string;\r\n    private sessionId: string;\r\n\r\n    private prevRoomStatus?: PlayCoRoomType;\r\n\r\n    socketIoStatusMessage: string;\r\n\r\n    onPlayCoConnected?: () => void;\r\n    onPlaylistModified?: () => void;\r\n    onUserStatusChanged?: (PlayCoRoomType) => void;\r\n    onSocketIOStatusChanged?: (string) => void;\r\n\r\n    // UTIL METHOD\r\n    get connected() {\r\n        return this.socketIo.connected;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    private getAuthBody(additionalBody?: Record<string, unknown>) {\r\n        return assign(\r\n            {\r\n                sid: this.sessionId,\r\n                sio_token: this.sioToken,\r\n                sio_csrf_token: this.csrfToken,\r\n            },\r\n            additionalBody ?? {}\r\n        )\r\n    }\r\n\r\n    // UTIL METHOD\r\n    setSIOStatMsg(newMsg: string) {\r\n        this.socketIoStatusMessage = newMsg;\r\n        try { if (this.onSocketIOStatusChanged) this.onSocketIOStatusChanged(newMsg); } catch (e) { console.log(e); }\r\n    }\r\n\r\n    // UTIL METHOD\r\n    defaultErrorHandler(reason: FrostError, shouldDisconnect = true, alternativeShowMsg?: string) {\r\n        const self = this ?? playCoSocketIOHandlerInstance;\r\n\r\n        if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n            console.log(reason.message);\r\n            console.log(reason.debugMessage);\r\n            console.log(reason.apiResponse);\r\n        } else {\r\n            console.log(reason);\r\n        }\r\n\r\n        // Set error message\r\n        try {\r\n            self.setSIOStatMsg(alternativeShowMsg ?? reason.message);\r\n        } catch (e1) {\r\n            console.log(alternativeShowMsg ?? reason.message);\r\n            console.log(e1);\r\n        }\r\n\r\n        // Disconnect from SocketIO.\r\n        if (shouldDisconnect) self.disconnect(false);\r\n\r\n        return false;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    unsubscribeAllHooks() {\r\n        this.onPlayCoConnected = undefined;\r\n        this.onPlaylistModified = undefined;\r\n        this.onUserStatusChanged = undefined;\r\n        this.onSocketIOStatusChanged = undefined;\r\n    }\r\n\r\n    // EVENT HANDLER\r\n    private socketIoEventHandler: Record<string, () => void> = {\r\n        connect: () => {\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        reconnect: () => {\r\n            // Same as connect\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        disconnect: (reason) => {\r\n            console.log(`DISCONNECTED FROM PLAYCO SIO, REASON: ${reason}`)\r\n\r\n            // Before disconnect and unconnect all hooks, we need to cleanup the UI if it's possible.\r\n            try {\r\n                if (this.onUserStatusChanged)\r\n                    this.onUserStatusChanged({\r\n                        playlist_id: this.prevRoomStatus?.playlist_id ?? -1,\r\n                        playlist_hash: this.prevRoomStatus?.playlist_hash ?? '',\r\n                        participants: {},\r\n                        db_modified: true,\r\n                    });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n\r\n            this.unsubscribeAllHooks();\r\n\r\n            this.sessionId = '';\r\n            this.sioToken = '';\r\n            this.sioTokenExpiresAt = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n            this.csrfToken = generateRandomSecureToken(32);\r\n        },\r\n        REQUEST_RESPONSE_0: (data?: PlayCoSocketIOResponseType) => {\r\n            console.log('Unknown response received! Received data >>> ---------------');\r\n            console.log(data);\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n        PLAYLIST_USER_ENTERED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user entered to this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            this.prevRoomStatus = roomStatus;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_USER_EXITED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user exited from this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_MODIFIED: (data: PlayCoSocketIOResponseType) => {\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            const shouldRoomRefreshed: boolean = data.data.room.db_modified ?? false;\r\n            this.prevRoomStatus = roomStatus;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n            try { if (shouldRoomRefreshed && this.onPlaylistModified) this.onPlaylistModified(); } catch (e) { console.log(e); }\r\n        },\r\n        OFFICIAL_ANNOUNCEMENT: (data?: PlayCoSocketIOResponseType) => {\r\n            // RESERVED\r\n            console.log('OFFICIAL_ANNOUNCEMENT event received! Received data >>> ----');\r\n            console.log(data)\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n    };\r\n\r\n    constructor() {\r\n        if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\r\n\r\n        this.socketIoMgr = new Manager('https://mudev.cc', {\r\n            reconnectionDelayMax: 5000,\r\n            path: '/api/dev/ws',\r\n            transports: ['websocket',],\r\n            upgrade: false,\r\n\r\n            forceNew: false,\r\n            autoConnect: false,\r\n\r\n            closeOnBeforeunload: false,\r\n        });\r\n\r\n        this.socketIo = this.socketIoMgr.socket('/playco_ws');\r\n        for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\r\n            this.socketIo.on(key, value);\r\n        }\r\n\r\n        playCoSocketIOHandlerInstance = this;\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private emitEvent(\r\n        event: string,\r\n        data?: Record<string, unknown>,\r\n        onSuccess?: (response: PlayCoSocketIOResponseType) => void,\r\n        onFailure?: (reason: FrostError, response?: PlayCoSocketIOResponseType) => void,\r\n        isRetry?: boolean) {\r\n\r\n        const requestId = generateRandomSecureToken(16);\r\n        if (data) {\r\n            data.request_id = requestId;\r\n        } else {\r\n            data = { request_id: requestId };\r\n        }\r\n\r\n        const eventName = `REQUEST_RESPONSE_${requestId}`;\r\n\r\n        // Unregister request response handler after {SIO_RESP_UNMOUNT_TIMEOUT}sec.\r\n        const eventHandlerTimeoutID = setTimeout(() => {\r\n            console.log(`WARNING: ${eventName} didn't handled in ${SIO_RESP_UNMOUNT_TIMEOUT}sec, and handler is unmounted.`);\r\n            this.socketIo.removeAllListeners(eventName);\r\n        }, SIO_RESP_UNMOUNT_TIMEOUT * 1000);\r\n\r\n        const eventHandler = (response?: PlayCoSocketIOResponseType) => {\r\n            clearTimeout(eventHandlerTimeoutID); // This will clear eventHandlerTimeout.\r\n\r\n            try {\r\n                if (response?.success) {\r\n                    if (onSuccess) onSuccess(response);\r\n                } else {\r\n                    // Response contains (success == false)\r\n                    let dbgMsg = 'sio:emitEvent error\\n';\r\n                    dbgMsg += `(event=${event})=>\\n`\r\n                    if (response) {\r\n                        for (const [key, value] of Object.entries(response ?? {})) {\r\n                            if (key !== 'data') {\r\n                                dbgMsg += `response?.${key} = ${value}\\n`\r\n                            } else {\r\n                                dbgMsg += `response?.${key} = ${JSON.stringify(value)}\\n`\r\n                            }\r\n                        }\r\n                    } else { dbgMsg += `response = ${response}\\n`; }\r\n\r\n                    if (event === 'playco_connect') {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (isRetry) {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (response?.subCode.startsWith('SIO_TOKEN_')) {\r\n                        // Refresh SIO Token and retry emitEvent.\r\n                        this.refreshSIOToken(() => this.emitEvent(event, data, onSuccess, onFailure, true), false, true);\r\n                        return;\r\n                    } else {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message || COMMON_ERR_MSG_MAP.unknownErrorRetry5Min,\r\n                                dbgMsg, response?.code, false),\r\n                            false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (e: FrostError) {\r\n                if (onFailure) {\r\n                    try {\r\n                        onFailure(e, response);\r\n                    } catch (e1) {\r\n                        console.log(e);\r\n                        console.log(e1);\r\n\r\n                        this.defaultErrorHandler(e, false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.socketIo.once(eventName, eventHandler);\r\n        this.socketIo.emit(event, data);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private refreshSIOToken(callback: (() => void) = (() => { /* */ }), isOnConnect = false, forceRefresh = false) {\r\n        if (!forceRefresh && this.sioToken && this.sioTokenExpiresAt > new Date()) {\r\n            // We assumes that token is alive.\r\n            // If the callback is emitEvent and server returns SIO_TOKEN_EXPIRED or SIO_TOKEN_INVALID,\r\n            // then emitEvent method will handle it properly.\r\n            try {\r\n                callback();\r\n                return;\r\n            } catch (err) {\r\n                this.defaultErrorHandler(err);\r\n            }\r\n        }\r\n\r\n        const frostAPI = new FrostAPI();\r\n        frostAPI\r\n            .isSignedIn(true)\r\n            .then(\r\n                (isSignedIn) => {\r\n                    if (!isSignedIn) { // Check if Frost is signed in.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.signInRequired,\r\n                            'on refreshSIOToken, isSignedIn == false', -1, true);\r\n                    } else if (!this.socketIo.connected || !this.sessionId) { // Check if Socket.IO is connected, and every statement is fulfilled.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.connectFailed,\r\n                            `this.socketIo.connected = ${this.socketIo.connected}, !this.sessionId = ${this.sessionId}`, -1, false);\r\n                    }\r\n\r\n                    // We need to get a new SIO Token by request.\r\n                    this.csrfToken = generateRandomSecureToken(32);\r\n                    return frostAPI\r\n                        .post('playco/socketio/auth', this.getAuthBody(), true)\r\n                        .then(\r\n                            (result) => {\r\n                                if (!result.success) {\r\n                                    throw new FrostError(\r\n                                        COMMON_ERR_MSG_MAP.authResponseFailed,\r\n                                        '/playco/socketio/auth returns response.success == false',\r\n                                        result.code, false, result, undefined, 'playco/socketio/auth');\r\n                                }\r\n\r\n                                // Get SIO token from response\r\n                                const sioTokenData: { 'exp': string, 'token': string } = result.data.sio_token;\r\n                                this.sioToken = sioTokenData.token;\r\n                                this.sioTokenExpiresAt = new Date(sioTokenData.exp);\r\n\r\n                                // Register session if this function is called on SocketIO onConnect event.\r\n                                if (isOnConnect) {\r\n                                    this.emitEvent(\r\n                                        'playco_connect', this.getAuthBody(),\r\n                                        (response) => ((this.onPlayCoConnected) ? this.onPlayCoConnected() : () => {/* */ }),\r\n                                        // Session creation failed\r\n                                        (reason, response) => this.defaultErrorHandler(reason, true, COMMON_ERR_MSG_MAP.authFailed)\r\n                                    );\r\n                                    return;\r\n                                } else {\r\n                                    callback();\r\n                                    return;\r\n                                }\r\n                            },\r\n                            (reason: FrostError) => { // Failed to get SIO token\r\n                                reason.message = COMMON_ERR_MSG_MAP.authFailed;\r\n                                throw reason;\r\n                            },\r\n                        );\r\n                },\r\n                (reason: FrostError) => {\r\n                    reason.message = COMMON_ERR_MSG_MAP.signInfoCheckFailed;\r\n                    throw reason;\r\n                }\r\n            ).catch(this.defaultErrorHandler);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    connect() {\r\n        if (!this.socketIo.connected) // Connect SocketIO if it's not connected.\r\n            // This will fire this.socketIoEventHandler.connect if the connection is successfully established.\r\n            this.socketIo.connect();\r\n    }\r\n\r\n    // EVENT MAKER\r\n    disconnect(isSafeDisconnect = true) {\r\n        if (this.socketIo.connected) {\r\n            this.socketIo.disconnect();\r\n\r\n            if (isSafeDisconnect)\r\n                this.setSIOStatMsg(COMMON_ERR_MSG_MAP.safeDisconnected);\r\n        }\r\n    }\r\n\r\n    // EVENT MAKER\r\n    enterPlaylist(playlistId: number, currentlyPlaying?: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_enter',\r\n                this.getAuthBody(({ playlist_id: playlistId, currently_playing: currentlyPlaying })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    leavePlaylist(playlistId: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_leave',\r\n                this.getAuthBody(({ playlist_id: playlistId })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    setSessionCurrentPlaying(playlistId: number, currentPlaying: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_set_status',\r\n                this.getAuthBody(({ playlist_id: playlistId, currently_playing: currentPlaying })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}