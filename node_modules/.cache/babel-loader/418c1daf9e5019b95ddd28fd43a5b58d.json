{"ast":null,"code":"import _objectSpread from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{Form,Modal,Button}from\"react-bootstrap\";import{PHFormText}from'src/ui/common/element/muFormText';import{PHSpinnerButton}from'src/ui/common/element/muButton';import FrostAPI from'src/network/api';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var calculateIncludedCharType=function calculateIncludedCharType(str){var strType=[];for(var i=0;i<str.length;i++){var currentChar=str.charAt(i);if(currentChar>='0'&&currentChar<='9'){strType.push('n');// number\n}else if(currentChar>='a'&&currentChar<='z'){strType.push('l');// lower\n}else if(currentChar>='A'&&currentChar<='Z'){strType.push('u');// upper\n}else if(currentChar>=' '&&currentChar<='~'){strType.push('s');// special char\n}else{strType.push('e');// error or unknown\n}}return new Set(strType);};export var AccountPasswordChangeModal=function AccountPasswordChangeModal(props){var InputChecker={currentPw:function currentPw(str){if(!str){return{success:false,currentPwNotUsableReason:'현재 사용 중인 비밀번호를 입력해주세요.'};}return{success:true,currentPwNotUsableReason:null};},newPw:function newPw(currentPwStr,newPwStr){if(!newPwStr){return{success:false,newPwNotUsableReason:'새 비밀번호를 입력해주세요,\\n'};}else if(!currentPwStr){return{success:false,newPwNotUsableReason:'현재 사용 중인 비밀번호를 먼저 입력해주세요,\\n'};}else if(currentPwStr===newPwStr){return{success:false,newPwNotUsableReason:'새로운 비밀번호가 현재 사용 중으로 적으신 비밀번호와 같아요,\\n'+'다른 비밀번호를 적어주세요.\\n'};}else if(newPwStr.length<8){return{success:false,newPwNotUsableReason:'새 비밀번호의 길이가 너무 짧아요,\\n'};}else if(1024<newPwStr.length){return{success:false,newPwNotUsableReason:\"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB85C \".concat(newPwStr.length,\"\\uC790\\uB294 \\uB108\\uC5B4\\uC5B4\\uC5B4\\uBB34 \\uAE38\\uC5B4\\uC694!\\n\")+'새 비밀번호는 1024자 이하로 해 주시고,\\n'};}var strType=calculateIncludedCharType(newPwStr);if(strType.has('e')){return{success:false,newPwNotUsableReason:'새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,'};}else if(strType.size<2){return{success:false,newPwNotUsableReason:'새 비밀번호가 너무 단순해요,'};}return{success:true,newPwNotUsableReason:null};},newPwReType:function newPwReType(pwStr,pwReTypeStr){if(!pwReTypeStr){return{success:false,newPwReTypeNotUsableReason:'위에 입력하신 새 비밀번호를 한번 더 입력해주세요.'};}else if(pwStr===pwReTypeStr){return{success:true,newPwReTypeNotUsableReason:null};}return{success:false,newPwReTypeNotUsableReason:'위에 입력하신 새 비밀번호와 일치하지 않아요.'};}};var FrostErrorToPasswordChangeError=function FrostErrorToPasswordChangeError(err){if(!err)return{signUpFailedReason:null};if(err.route!=='account/change-password')return{signUpFailedReason:null};// We need to set Frost's error message(showMsg)\n// to proper (currentPw|newPw|newPwReType)NotUsableReason field or pwChangeFailedReason.\nvar errShowMsg=err.message;var errFieldName=err.fieldName?\"\".concat(err.fieldName,\"NotUsableReason\"):'pwChangeFailedReason';return _defineProperty({},errFieldName,errShowMsg);};var passwordRuleText='비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.';var navigate=useNavigate();var _useState=useState({isProcessing:false,currentPwTextFieldValue:'',currentPwNotUsableReason:'',newPwTextFieldValue:'',newPwNotUsableReason:'',newPwReTypeTextFieldValue:'',newPwReTypeNotUsableReason:'',pwChangeFailedReason:''}),_useState2=_slicedToArray(_useState,2),passwordChangeModalState=_useState2[0],setPasswordChangeModalState=_useState2[1];useEffect(function(){return setPasswordChangeModalState(_objectSpread(_objectSpread({},passwordChangeModalState),{},{currentPwTextFieldValue:'',currentPwNotUsableReason:'',newPwTextFieldValue:'',newPwNotUsableReason:'',newPwReTypeTextFieldValue:'',newPwReTypeNotUsableReason:'',pwChangeFailedReason:''}));},[props.modalShowState]);var closeModalFunc=function closeModalFunc(){if(!passwordChangeModalState.isProcessing)props.setModalShowState(false);};var getTrimmedState=function getTrimmedState(modalState){var tempModalState=_objectSpread({},modalState!==null&&modalState!==void 0?modalState:passwordChangeModalState);for(var key in tempModalState){if(typeof tempModalState[key]==='string')tempModalState[key]=tempModalState[key].trim();}return tempModalState;};var handleInputChange=function handleInputChange(fieldName){return function(e){var fieldStateKey=\"\".concat(fieldName,\"TextFieldValue\");var fieldValue=e.target.type==='checkbox'?e.target.checked:e.target.value;var fieldCheckResult=undefined;switch(fieldName){case'newPw':fieldCheckResult=InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(),fieldValue);break;case'newPwReType':fieldCheckResult=InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(),fieldValue);break;case'currentPw':default:fieldCheckResult=InputChecker[fieldName](fieldValue);break;}delete fieldCheckResult.success;setPasswordChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),fieldCheckResult),{},_defineProperty({},fieldStateKey,fieldValue));});};};var shouldSubmitBtnDisabled=function shouldSubmitBtnDisabled(){if(passwordChangeModalState.isProcessing)return true;var tempModalState=getTrimmedState();var isFormCheckSuccess=true;['currentPw','newPw','newPwReType'].map(function(fieldName){var fieldValue=tempModalState[\"\".concat(fieldName,\"TextFieldValue\")];var fieldCheckResult=undefined;switch(fieldName){case'newPw':fieldCheckResult=InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(),fieldValue);break;case'newPwReType':fieldCheckResult=InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(),fieldValue);break;case'currentPw':default:fieldCheckResult=InputChecker[fieldName](fieldValue);break;}if(isFormCheckSuccess)// It's OK to set true to false, but false to true must not be happened.\n// And also, we are in a map function, so we cannot return directly here,\n// we need to store the result somewhere outside of the function.\nisFormCheckSuccess=fieldCheckResult.success;});return!isFormCheckSuccess;};var resetToOriginal=function resetToOriginal(){setPasswordChangeModalState(_objectSpread(_objectSpread({},passwordChangeModalState),{},{currentPwTextFieldValue:'',currentPwNotUsableReason:'',newPwTextFieldValue:'',newPwNotUsableReason:'',newPwReTypeTextFieldValue:'',newPwReTypeNotUsableReason:''}));};var tryAccountPasswordChange=function tryAccountPasswordChange(){// Trim all strings in states\nvar tempModalState=getTrimmedState();setPasswordChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),tempModalState),{},{isProcessing:true});});var isFormCheckSuccess=true;var resultFormCheckData={};['currentPw','newPw','newPwReType'].map(function(fieldName){var fieldValue=tempModalState[\"\".concat(fieldName,\"TextFieldValue\")];var fieldCheckResult=undefined;switch(fieldName){case'newPw':fieldCheckResult=InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(),fieldValue);break;case'newPwReType':fieldCheckResult=InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(),fieldValue);break;case'currentPw':default:fieldCheckResult=InputChecker[fieldName](fieldValue);break;}if(isFormCheckSuccess)// It's OK to set true to false, but false to true must not be happened.\n// And also, we are in a map function, so we cannot return directly here,\n// we need to store the result somewhere outside of the function.\nisFormCheckSuccess=fieldCheckResult.success;resultFormCheckData=_objectSpread(_objectSpread({},resultFormCheckData),fieldCheckResult);});delete resultFormCheckData.success;setPasswordChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),resultFormCheckData),{},{isProcessing:isFormCheckSuccess});});if(!isFormCheckSuccess)return;new FrostAPI().changePassword(tempModalState.currentPwTextFieldValue,tempModalState.newPwTextFieldValue,tempModalState.newPwReTypeTextFieldValue).then(function(){setPasswordChangeModalState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isProcessing:false});});alert('비밀번호가 변경되었습니다!');closeModalFunc();},function(reason){setPasswordChangeModalState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isProcessing:false},FrostErrorToPasswordChangeError(reason));});});};return/*#__PURE__*/_jsxs(Modal,{show:props.modalShowState,onHide:closeModalFunc,backdrop:\"static\",centered:true,children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:/*#__PURE__*/_jsx(\"h5\",{style:{margin:0},children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"})})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(Form,{onSubmit:function onSubmit(evt){return evt.preventDefault();},children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uD604\\uC7AC \\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"current-password\",placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uD604\\uC7AC \\uC0AC\\uC6A9 \\uC911\\uC778 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",disabled:passwordChangeModalState.isProcessing,value:passwordChangeModalState.currentPwTextFieldValue,onChange:handleInputChange('currentPw')}),/*#__PURE__*/_jsx(PHFormText,{children:passwordChangeModalState.currentPwNotUsableReason})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"new-password\",placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",disabled:passwordChangeModalState.isProcessing,value:passwordChangeModalState.newPwTextFieldValue,onChange:handleInputChange('newPw')}),/*#__PURE__*/_jsx(PHFormText,{defaultChildren:passwordRuleText,children:passwordChangeModalState.newPwNotUsableReason?passwordChangeModalState.newPwNotUsableReason+passwordRuleText:''})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"new-password\",placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",disabled:passwordChangeModalState.isProcessing,value:passwordChangeModalState.newPwReTypeTextFieldValue,onChange:handleInputChange('newPwReType')}),/*#__PURE__*/_jsx(PHFormText,{children:passwordChangeModalState.newPwReTypeNotUsableReason})]}),/*#__PURE__*/_jsx(PHFormText,{children:passwordChangeModalState.pwChangeFailedReason})]})}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:resetToOriginal,disabled:passwordChangeModalState.isProcessing,children:\"\\uCD08\\uAE30\\uD654\"}),/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:closeModalFunc,disabled:passwordChangeModalState.isProcessing,children:\"\\uCDE8\\uC18C\"}),/*#__PURE__*/_jsx(PHSpinnerButton,{variant:\"primary\",size:false,style:{margin:undefined},onClick:tryAccountPasswordChange,disabled:shouldSubmitBtnDisabled(),showSpinner:passwordChangeModalState.isProcessing,children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"})]})]});};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/modal/passwordChangeModal.tsx"],"names":["React","useState","useEffect","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","FrostAPI","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountPasswordChangeModal","props","InputChecker","currentPw","success","currentPwNotUsableReason","newPw","currentPwStr","newPwStr","newPwNotUsableReason","has","size","newPwReType","pwStr","pwReTypeStr","newPwReTypeNotUsableReason","FrostErrorToPasswordChangeError","err","signUpFailedReason","route","errShowMsg","message","errFieldName","fieldName","passwordRuleText","navigate","isProcessing","currentPwTextFieldValue","newPwTextFieldValue","newPwReTypeTextFieldValue","pwChangeFailedReason","passwordChangeModalState","setPasswordChangeModalState","modalShowState","closeModalFunc","setModalShowState","getTrimmedState","modalState","tempModalState","key","trim","handleInputChange","e","fieldStateKey","fieldValue","target","type","checked","value","fieldCheckResult","undefined","prevState","shouldSubmitBtnDisabled","isFormCheckSuccess","map","resetToOriginal","tryAccountPasswordChange","resultFormCheckData","changePassword","then","alert","reason","margin","evt","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport FrostAPI from 'src/network/api';\r\n\r\ninterface AccountPasswordChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    currentPwTextFieldValue: string;\r\n    currentPwNotUsableReason: string;\r\n    newPwTextFieldValue: string;\r\n    newPwNotUsableReason: string;\r\n    newPwReTypeTextFieldValue: string;\r\n    newPwReTypeNotUsableReason: string;\r\n    pwChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountPasswordChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        currentPw: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                currentPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPw: (currentPwStr: string, newPwStr: string) => {\r\n            if (!newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호를 입력해주세요,\\n',\r\n                };\r\n            } else if (!currentPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '현재 사용 중인 비밀번호를 먼저 입력해주세요,\\n',\r\n                };\r\n            } else if (currentPwStr === newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        '새로운 비밀번호가 현재 사용 중으로 적으신 비밀번호와 같아요,\\n'\r\n                        + '다른 비밀번호를 적어주세요.\\n',\r\n                };\r\n            } else if (newPwStr.length < 8) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,\\n',\r\n                };\r\n            } else if (1024 < newPwStr.length) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        `새 비밀번호로 ${newPwStr.length}자는 너어어어무 길어요!\\n`\r\n                        + '새 비밀번호는 1024자 이하로 해 주시고,\\n',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(newPwStr);\r\n            if (strType.has('e')) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,',\r\n                };\r\n            } else if (strType.size < 2) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                newPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPwReType: (pwStr: string, pwReTypeStr: string) => {\r\n            if (!pwReTypeStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.',\r\n                };\r\n            } else if (pwStr === pwReTypeStr) {\r\n                return {\r\n                    success: true,\r\n                    newPwReTypeNotUsableReason: null,\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.',\r\n            };\r\n        },\r\n    };\r\n    const FrostErrorToPasswordChangeError = (err: FrostError) => {\r\n        if (!err)\r\n            return { signUpFailedReason: null };\r\n        if (err.route !== 'account/change-password')\r\n            return { signUpFailedReason: null };\r\n        // We need to set Frost's error message(showMsg)\r\n        // to proper (currentPw|newPw|newPwReType)NotUsableReason field or pwChangeFailedReason.\r\n        const errShowMsg = err.message;\r\n        const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'pwChangeFailedReason';\r\n\r\n        return { [errFieldName]: errShowMsg, };\r\n    };\r\n\r\n    const passwordRuleText = '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.';\r\n\r\n    const navigate = useNavigate();\r\n    const [passwordChangeModalState, setPasswordChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    });\r\n    useEffect(() => setPasswordChangeModalState({\r\n        ...passwordChangeModalState,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    }), [props.modalShowState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!passwordChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountPasswordChangeModalStateType) => {\r\n        const tempModalState: AccountPasswordChangeModalStateType = { ...(modalState ?? passwordChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    };\r\n    const handleInputChange = (fieldName: string) => (e: Event) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n        let fieldCheckResult = undefined;\r\n        switch (fieldName) {\r\n            case 'newPw':\r\n                fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'newPwReType':\r\n                fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'currentPw':\r\n            default:\r\n                fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                break;\r\n        }\r\n        delete (fieldCheckResult.success);\r\n\r\n        setPasswordChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...fieldCheckResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (passwordChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setPasswordChangeModalState({\r\n            ...passwordChangeModalState,\r\n\r\n            currentPwTextFieldValue: '',\r\n            currentPwNotUsableReason: '',\r\n            newPwTextFieldValue: '',\r\n            newPwNotUsableReason: '',\r\n            newPwReTypeTextFieldValue: '',\r\n            newPwReTypeNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountPasswordChange = () => {\r\n        // Trim all strings in states\r\n        const tempModalState = getTrimmedState();\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return;\r\n\r\n        (new FrostAPI()).changePassword(\r\n            tempModalState.currentPwTextFieldValue,\r\n            tempModalState.newPwTextFieldValue,\r\n            tempModalState.newPwReTypeTextFieldValue)\r\n            .then(\r\n                () => {\r\n                    setPasswordChangeModalState(prevState => ({ ...prevState, isProcessing: false, }));\r\n                    alert('비밀번호가 변경되었습니다!');\r\n                    closeModalFunc();\r\n                },\r\n                (reason: FrostError) => {\r\n                    setPasswordChangeModalState(prevState => ({\r\n                        ...prevState,\r\n                        isProcessing: false,\r\n                        ...FrostErrorToPasswordChangeError(reason),\r\n                    }));\r\n                }\r\n            );\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    비밀번호 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>현재 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='current-password'\r\n                        placeholder='여기에 현재 사용 중인 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.currentPwTextFieldValue}\r\n                        onChange={handleInputChange('currentPw')} />\r\n                    <PHFormText>{passwordChangeModalState.currentPwNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 새로 사용하실 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwTextFieldValue}\r\n                        onChange={handleInputChange('newPw')} />\r\n                    <PHFormText defaultChildren={passwordRuleText}>\r\n                        {passwordChangeModalState.newPwNotUsableReason\r\n                            ? passwordChangeModalState.newPwNotUsableReason + passwordRuleText : ''}\r\n                    </PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호 확인</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 위에 입력하신 새 비밀번호를 다시 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwReTypeTextFieldValue}\r\n                        onChange={handleInputChange('newPwReType')} />\r\n                    <PHFormText>{passwordChangeModalState.newPwReTypeNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <PHFormText>{passwordChangeModalState.pwChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                초기화\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountPasswordChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={passwordChangeModalState.isProcessing}>\r\n                비밀번호 변경\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}