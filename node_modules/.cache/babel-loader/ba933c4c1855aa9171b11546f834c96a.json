{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\modal\\\\nickIdChangeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst calculateIncludedCharType = str => {\n  const strType = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const currentChar = str.charAt(i);\n\n    if (currentChar >= '0' && currentChar <= '9') {\n      strType.push('n'); // number\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\n      strType.push('l'); // lower\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\n      strType.push('u'); // upper\n    } else if (currentChar >= ' ' && currentChar <= '~') {\n      strType.push('s'); // special char\n    } else {\n      strType.push('e'); // error or unknown\n    }\n  }\n\n  return new Set(strType);\n};\n\nexport const AccountNickIDChangeModal = props => {\n  _s();\n\n  var _props$initialModalSt, _props$initialModalSt2;\n\n  const InputChecker = {\n    id: str => {\n      if (!str) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디를 입력해주세요.'\n        };\n      } else if (str.length < 4) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.'\n        };\n      } else if (48 < str.length) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.'\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e') || strType.has('s')) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        idNotUsableReason: null\n      };\n    },\n    nick: str => {\n      if (!str) {\n        return {\n          success: false,\n          nickNotUsableReason: '별칭을 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        nickNotUsableReason: null\n      };\n    }\n  };\n  const navigate = useNavigate();\n  const [nickIdChangeModalState, setNickIdChangeModalState] = useState({\n    isProcessing: false,\n    nickTextFieldValue: (_props$initialModalSt = props.initialModalState.nick) !== null && _props$initialModalSt !== void 0 ? _props$initialModalSt : '',\n    nickNotUsableReason: '',\n    idTextFieldValue: (_props$initialModalSt2 = props.initialModalState.id) !== null && _props$initialModalSt2 !== void 0 ? _props$initialModalSt2 : '',\n    idNotUsableReason: '',\n    nickIdChangeFailedReason: ''\n  });\n  useEffect(() => {\n    var _props$initialModalSt3, _props$initialModalSt4, _props$initialModalSt5, _props$initialModalSt6;\n\n    return setNickIdChangeModalState({ ...nickIdChangeModalState,\n      nickTextFieldValue: (_props$initialModalSt3 = (_props$initialModalSt4 = props.initialModalState) === null || _props$initialModalSt4 === void 0 ? void 0 : _props$initialModalSt4.nick) !== null && _props$initialModalSt3 !== void 0 ? _props$initialModalSt3 : '',\n      nickNotUsableReason: '',\n      idTextFieldValue: (_props$initialModalSt5 = (_props$initialModalSt6 = props.initialModalState) === null || _props$initialModalSt6 === void 0 ? void 0 : _props$initialModalSt6.id) !== null && _props$initialModalSt5 !== void 0 ? _props$initialModalSt5 : '',\n      idNotUsableReason: '',\n      nickIdChangeFailedReason: ''\n    });\n  }, [props.initialModalState]);\n\n  const closeModalFunc = () => {\n    if (!nickIdChangeModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const getTrimmedState = modalState => {\n    const tempModalState = { ...(modalState !== null && modalState !== void 0 ? modalState : nickIdChangeModalState)\n    };\n\n    for (const key in tempModalState) if (typeof tempModalState[key] === 'string') tempModalState[key] = tempModalState[key].trim();\n\n    return tempModalState;\n  };\n\n  const handleInputChange = fieldName => e => {\n    const fieldStateKey = `${fieldName}TextFieldValue`;\n    const fieldValue = e.target.type === 'checkbox' ? e.target.checked : e.target.value.trim();\n    const checkerResult = InputChecker[fieldName](fieldValue);\n    delete checkerResult.success;\n    setNickIdChangeModalState(prevState => ({ ...prevState,\n      ...checkerResult,\n      [fieldStateKey]: fieldValue\n    }));\n  };\n\n  const whatChanged = () => {\n    // Trim and test\n    const tempModalState = getTrimmedState();\n    return {\n      nick: tempModalState.nickTextFieldValue !== props.initialModalState.nick,\n      id: tempModalState.idTextFieldValue !== props.initialModalState.id\n    };\n  };\n\n  const getSubmitBtnText = () => {\n    const result = whatChanged();\n\n    if (result.id && result.nick) {\n      return '아이디 및 별칭 수정하기';\n    } else if (result.id) {\n      return '아이디 수정하기';\n    } else if (result.nick) {\n      return '별칭 수정하기';\n    } else {\n      return '수정된 정보가 없어요';\n    }\n  };\n\n  const shouldSubmitBtnDisabled = () => {\n    if (nickIdChangeModalState.isProcessing) return true;\n    const isChanged = whatChanged();\n    if (!isChanged.id && !isChanged.nick) return true;\n    const tempModalState = getTrimmedState();\n    let isFormCheckSuccess = true;\n    ['id', 'nick'].map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        // And also, we are in a map function, so we cannot return directly here,\n        // we need to store the result somewhere outside of the function.\n        isFormCheckSuccess = fieldCheckResult.success;\n    });\n    return !isFormCheckSuccess;\n  };\n\n  const tryAccountInfoChange = () => {\n    // trim all strings in states\n    const tempModalState = { ...nickIdChangeModalState\n    };\n\n    for (const key in tempModalState) if (typeof tempModalState[key] === 'string') tempModalState[key] = tempModalState[key].trim();\n\n    setNickIdChangeModalState(prevState => ({ ...prevState,\n      ...tempModalState,\n      isProcessing: true\n    }));\n    const isChanged = whatChanged();\n\n    if (!isChanged.id && !isChanged.nick) {\n      // Stats are not modified, just close it.\n      setNickIdChangeModalState(prevState => ({ ...prevState,\n        isProcessing: false\n      }));\n      return;\n    }\n\n    const checkRequiredFieldName = ['id', 'nick'];\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    checkRequiredFieldName.map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    setNickIdChangeModalState(prevState => ({ ...prevState,\n      ...resultFormCheckData,\n      isProcessing: isFormCheckSuccess\n    }));\n    if (!isFormCheckSuccess) return false; // DO SERVER THING ON HERE\n\n    const serverReqData = {};\n    setTimeout(() => {\n      setNickIdChangeModalState(prevState => ({ ...prevState,\n        isProcessing: false\n      }));\n    }, 5000);\n  };\n\n  const resetToOriginal = () => {\n    var _props$initialModalSt7, _props$initialModalSt8;\n\n    setNickIdChangeModalState({ ...nickIdChangeModalState,\n      nickTextFieldValue: (_props$initialModalSt7 = props.initialModalState.nick) !== null && _props$initialModalSt7 !== void 0 ? _props$initialModalSt7 : '',\n      nickNotUsableReason: '',\n      idTextFieldValue: (_props$initialModalSt8 = props.initialModalState.id) !== null && _props$initialModalSt8 !== void 0 ? _props$initialModalSt8 : '',\n      idNotUsableReason: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uC544\\uC774\\uB514 \\uBC0F \\uBCC4\\uCE6D \\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: evt => evt.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC544\\uC774\\uB514\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uC544\\uC774\\uB514\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: nickIdChangeModalState.isProcessing,\n            value: nickIdChangeModalState.idTextFieldValue,\n            onChange: handleInputChange('id')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: nickIdChangeModalState.idNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBCC4\\uCE6D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBCC4\\uCE6D\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: nickIdChangeModalState.isProcessing,\n            value: nickIdChangeModalState.nickTextFieldValue,\n            onChange: handleInputChange('nick')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: nickIdChangeModalState.nickNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: nickIdChangeModalState.nickIdChangeFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: resetToOriginal,\n        disabled: nickIdChangeModalState.isProcessing,\n        children: \"\\uB418\\uB3CC\\uB9AC\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: nickIdChangeModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: tryAccountInfoChange,\n        disabled: shouldSubmitBtnDisabled(),\n        showSpinner: nickIdChangeModalState.isProcessing,\n        children: getSubmitBtnText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AccountNickIDChangeModal, \"Mu1GoFiEl6C/CMmHCLgz7AWBHGQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AccountNickIDChangeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountNickIDChangeModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/modal/nickIdChangeModal.tsx"],"names":["React","useState","useEffect","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountNickIDChangeModal","props","InputChecker","id","success","idNotUsableReason","has","nick","nickNotUsableReason","navigate","nickIdChangeModalState","setNickIdChangeModalState","isProcessing","nickTextFieldValue","initialModalState","idTextFieldValue","nickIdChangeFailedReason","closeModalFunc","setModalShowState","getTrimmedState","modalState","tempModalState","key","trim","handleInputChange","fieldName","e","fieldStateKey","fieldValue","target","type","checked","value","checkerResult","prevState","whatChanged","getSubmitBtnText","result","shouldSubmitBtnDisabled","isChanged","isFormCheckSuccess","map","fieldCheckResult","tryAccountInfoChange","checkRequiredFieldName","resultFormCheckData","serverReqData","setTimeout","resetToOriginal","modalShowState","margin","evt","preventDefault","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { isEmail } from 'validator';\r\n\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\ninterface AccountNickIDChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    nickTextFieldValue: string;\r\n    nickNotUsableReason: string;\r\n    idTextFieldValue: string;\r\n    idNotUsableReason: string;\r\n    nickIdChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountNickIDChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n    initialModalState: AccountInfo;\r\n}) => {\r\n    const InputChecker = {\r\n        id: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '아이디를 입력해주세요.',\r\n                };\r\n            } else if (str.length < 4) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n                };\r\n            } else if (48 < str.length) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(str);\r\n            if (strType.has('e') || strType.has('s')) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return { success: true, idNotUsableReason: null };\r\n        },\r\n        nick: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    nickNotUsableReason: '별칭을 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                nickNotUsableReason: null,\r\n            };\r\n        },\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n    const [nickIdChangeModalState, setNickIdChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        nickTextFieldValue: props.initialModalState.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: props.initialModalState.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    });\r\n    useEffect(() => setNickIdChangeModalState({\r\n        ...nickIdChangeModalState,\r\n        nickTextFieldValue: props.initialModalState?.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: props.initialModalState?.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    }), [props.initialModalState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!nickIdChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountNickIDChangeModalStateType) => {\r\n        const tempModalState: AccountNickIDChangeModalStateType = { ...(modalState ?? nickIdChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    }\r\n    const handleInputChange = (fieldName) => (e) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value.trim();\r\n\r\n        const checkerResult = InputChecker[fieldName](fieldValue);\r\n        delete (checkerResult.success);\r\n\r\n        setNickIdChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...checkerResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const whatChanged = () => {\r\n        // Trim and test\r\n        const tempModalState = getTrimmedState();\r\n        return {\r\n            nick: (tempModalState.nickTextFieldValue) !== props.initialModalState.nick,\r\n            id: (tempModalState.idTextFieldValue) !== props.initialModalState.id\r\n        };\r\n    };\r\n    const getSubmitBtnText = () => {\r\n        const result = whatChanged();\r\n        if (result.id && result.nick) {\r\n            return '아이디 및 별칭 수정하기';\r\n        } else if (result.id) {\r\n            return '아이디 수정하기';\r\n        } else if (result.nick) {\r\n            return '별칭 수정하기';\r\n        } else {\r\n            return '수정된 정보가 없어요';\r\n        }\r\n    };\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (nickIdChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['id', 'nick'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult: string = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    }\r\n\r\n    const tryAccountInfoChange = () => {\r\n        // trim all strings in states\r\n        const tempModalState = { ...nickIdChangeModalState, };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick) {\r\n            // Stats are not modified, just close it.\r\n            setNickIdChangeModalState(prevState => ({\r\n                ...prevState,\r\n                isProcessing: false,\r\n            }));\r\n            return;\r\n        }\r\n\r\n        const checkRequiredFieldName = ['id', 'nick'];\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        checkRequiredFieldName.map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return false;\r\n\r\n        // DO SERVER THING ON HERE\r\n        const serverReqData = {\r\n\r\n        }\r\n        setTimeout(() => {\r\n            setNickIdChangeModalState((prevState) => ({ ...prevState, isProcessing: false, }));\r\n        }, 5000);\r\n    };\r\n    const resetToOriginal = () => {\r\n        setNickIdChangeModalState({\r\n            ...nickIdChangeModalState,\r\n            nickTextFieldValue: props.initialModalState.nick ?? '',\r\n            nickNotUsableReason: '',\r\n            idTextFieldValue: props.initialModalState.id ?? '',\r\n            idNotUsableReason: '',\r\n        });\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    아이디 및 별칭 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>아이디</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 아이디를 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.idTextFieldValue}\r\n                        onChange={handleInputChange('id')} />\r\n                    <PHFormText>{nickIdChangeModalState.idNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>별칭</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 별칭을 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.nickTextFieldValue}\r\n                        onChange={handleInputChange('nick')} />\r\n                    <PHFormText>{nickIdChangeModalState.nickNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n                <PHFormText>{nickIdChangeModalState.nickIdChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                되돌리기\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountInfoChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={nickIdChangeModalState.isProcessing}>\r\n                {getSubmitBtnText()}\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}