{"ast":null,"code":"import _objectSpread from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{useSelector,useDispatch}from'react-redux';import{refreshAccessTokenActionCreatorAsync}from'src/redux/modules/account/action_creator';import{Form,Modal,Button}from\"react-bootstrap\";import{PHFormText}from'src/ui/common/element/muFormText';import{PHSpinnerButton}from'src/ui/common/element/muButton';import FrostAPI from'src/network/api';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var calculateIncludedCharType=function calculateIncludedCharType(str){var strType=[];for(var i=0;i<str.length;i++){var currentChar=str.charAt(i);if(currentChar>='0'&&currentChar<='9'){strType.push('n');// number\n}else if(currentChar>='a'&&currentChar<='z'){strType.push('l');// lower\n}else if(currentChar>='A'&&currentChar<='Z'){strType.push('u');// upper\n}else if(currentChar>=' '&&currentChar<='~'){strType.push('s');// special char\n}else{strType.push('e');// error or unknown\n}}return new Set(strType);};export var AccountNickIDChangeModal=function AccountNickIDChangeModal(props){var _accountInfo$nick,_accountInfo$id;var InputChecker={id:function id(str){if(!str){return{success:false,idNotUsableReason:'새 아이디를 입력해주세요.'};}else if(str.length<4){return{success:false,idNotUsableReason:'새 아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.'};}else if(48<str.length){return{success:false,idNotUsableReason:'새 아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.'};}var strType=calculateIncludedCharType(str);if(strType.has('e')||strType.has('s')){return{success:false,idNotUsableReason:'새 아이디에 사용할 수 없는 글자가 포함되어 있어요,\\n공백, 특수문자 등을 빼고 다시 입력해주세요.'};}return{success:true,idNotUsableReason:null};},nick:function nick(str){if(!str){return{success:false,nickNotUsableReason:'별칭을 입력해주세요.'};}return{success:true,nickNotUsableReason:null};}};var FrostErrorToAccountNickIdChangeError=function FrostErrorToAccountNickIdChangeError(err){if(!err)return{nickIdChangeFailedReason:null};if(err.route!=='account')return{nickIdChangeFailedReason:null};// We need to set Frost's error message(showMsg)\n// to proper (id|nick)NotUsableReason field or nickIdChangeFailedReason.\nvar errShowMsg=err.message;var errFieldName=err.fieldName?\"\".concat(err.fieldName,\"NotUsableReason\"):'nickIdChangeFailedReason';return _defineProperty({},errFieldName,errShowMsg);};var accountInfo=useSelector(function(state){return state.accountReducer;});var dispatch=useDispatch();var navigate=useNavigate();var _useState=useState({isProcessing:false,nickTextFieldValue:(_accountInfo$nick=accountInfo.nick)!==null&&_accountInfo$nick!==void 0?_accountInfo$nick:'',nickNotUsableReason:'',idTextFieldValue:(_accountInfo$id=accountInfo.id)!==null&&_accountInfo$id!==void 0?_accountInfo$id:'',idNotUsableReason:'',nickIdChangeFailedReason:''}),_useState2=_slicedToArray(_useState,2),nickIdChangeModalState=_useState2[0],setNickIdChangeModalState=_useState2[1];// Reset form inputs when accountInfo changed or modal showed/disappeared.\nuseEffect(function(){var _accountInfo$nick2,_accountInfo$id2;return setNickIdChangeModalState(_objectSpread(_objectSpread({},nickIdChangeModalState),{},{nickTextFieldValue:(_accountInfo$nick2=accountInfo.nick)!==null&&_accountInfo$nick2!==void 0?_accountInfo$nick2:'',nickNotUsableReason:'',idTextFieldValue:(_accountInfo$id2=accountInfo.id)!==null&&_accountInfo$id2!==void 0?_accountInfo$id2:'',idNotUsableReason:'',nickIdChangeFailedReason:''}));},[accountInfo,props.modalShowState]);var closeModalFunc=function closeModalFunc(){if(!nickIdChangeModalState.isProcessing)props.setModalShowState(false);};var getTrimmedState=function getTrimmedState(modalState){var tempModalState=_objectSpread({},modalState!==null&&modalState!==void 0?modalState:nickIdChangeModalState);for(var key in tempModalState){if(typeof tempModalState[key]==='string')tempModalState[key]=tempModalState[key].trim();}return tempModalState;};var handleInputChange=function handleInputChange(fieldName){return function(e){var fieldStateKey=\"\".concat(fieldName,\"TextFieldValue\");var fieldValue=e.target.type==='checkbox'?e.target.checked:e.target.value;var checkerResult=InputChecker[fieldName](fieldValue.trim());delete checkerResult.success;setNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),checkerResult),{},_defineProperty({},fieldStateKey,fieldValue));});};};var whatChanged=function whatChanged(){// Trim and test\nvar tempModalState=getTrimmedState();return{nick:tempModalState.nickTextFieldValue!==accountInfo.nick,id:tempModalState.idTextFieldValue!==accountInfo.id};};var getSubmitBtnText=function getSubmitBtnText(){var result=whatChanged();if(result.id&&result.nick){return'아이디 및 별칭 수정하기';}else if(result.id){return'아이디 수정하기';}else if(result.nick){return'별칭 수정하기';}else{return'수정된 정보가 없어요';}};var shouldSubmitBtnDisabled=function shouldSubmitBtnDisabled(){if(nickIdChangeModalState.isProcessing)return true;var isChanged=whatChanged();if(!isChanged.id&&!isChanged.nick)return true;var tempModalState=getTrimmedState();var isFormCheckSuccess=true;['id','nick'].map(function(fieldName){var fieldValue=tempModalState[\"\".concat(fieldName,\"TextFieldValue\")];var fieldCheckResult=InputChecker[fieldName](fieldValue);if(isFormCheckSuccess)// It's OK to set true to false, but false to true must not be happened.\n// And also, we are in a map function, so we cannot return directly here,\n// we need to store the result somewhere outside of the function.\nisFormCheckSuccess=fieldCheckResult.success;});return!isFormCheckSuccess;};var resetToOriginal=function resetToOriginal(){var _accountInfo$nick3,_accountInfo$id3;setNickIdChangeModalState(_objectSpread(_objectSpread({},nickIdChangeModalState),{},{nickTextFieldValue:(_accountInfo$nick3=accountInfo.nick)!==null&&_accountInfo$nick3!==void 0?_accountInfo$nick3:'',nickNotUsableReason:'',idTextFieldValue:(_accountInfo$id3=accountInfo.id)!==null&&_accountInfo$id3!==void 0?_accountInfo$id3:'',idNotUsableReason:''}));};var tryAccountInfoChange=function tryAccountInfoChange(){// Trim all strings in states\nvar tempModalState=getTrimmedState();setNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),tempModalState),{},{isProcessing:true});});var isChanged=whatChanged();if(!isChanged.id&&!isChanged.nick){// Stats are not modified, just close it.\nsetNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isProcessing:false});});return;}var isFormCheckSuccess=true;var resultFormCheckData={};['id','nick'].map(function(fieldName){var fieldValue=tempModalState[\"\".concat(fieldName,\"TextFieldValue\")];var fieldCheckResult=InputChecker[fieldName](fieldValue);if(isFormCheckSuccess)// It's OK to set true to false, but false to true must not be happened.\n// And also, we are in a map function, so we cannot return directly here,\n// we need to store the result somewhere outside of the function.\nisFormCheckSuccess=fieldCheckResult.success;resultFormCheckData=_objectSpread(_objectSpread({},resultFormCheckData),fieldCheckResult);});delete resultFormCheckData.success;setNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread(_objectSpread({},prevState),resultFormCheckData),{},{isProcessing:isFormCheckSuccess});});if(!isFormCheckSuccess)return;new FrostAPI().modifyAccountInfo(_objectSpread(_objectSpread({},isChanged.id?{id:tempModalState.idTextFieldValue}:{}),isChanged.nick?{nickname:tempModalState.nickTextFieldValue}:{})).then(function(){setNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isProcessing:false});});dispatch(refreshAccessTokenActionCreatorAsync(true));closeModalFunc();}).catch(function(reason){console.log(reason);console.log(reason.debugMessage);setNickIdChangeModalState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isProcessing:false},FrostErrorToAccountNickIdChangeError(reason));});});};return/*#__PURE__*/_jsxs(Modal,{show:props.modalShowState,onHide:closeModalFunc,backdrop:\"static\",centered:true,children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:/*#__PURE__*/_jsx(\"h5\",{style:{margin:0},children:\"\\uC544\\uC774\\uB514 \\uBC0F \\uBCC4\\uCE6D \\uBCC0\\uACBD\"})})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(Form,{onSubmit:function onSubmit(evt){return evt.preventDefault();},children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC544\\uC774\\uB514\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uC544\\uC774\\uB514\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",disabled:nickIdChangeModalState.isProcessing,value:nickIdChangeModalState.idTextFieldValue,onChange:handleInputChange('id')}),/*#__PURE__*/_jsx(PHFormText,{children:nickIdChangeModalState.idNotUsableReason})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uBCC4\\uCE6D\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBCC4\\uCE6D\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",disabled:nickIdChangeModalState.isProcessing,value:nickIdChangeModalState.nickTextFieldValue,onChange:handleInputChange('nick')}),/*#__PURE__*/_jsx(PHFormText,{children:nickIdChangeModalState.nickNotUsableReason})]}),/*#__PURE__*/_jsx(PHFormText,{children:nickIdChangeModalState.nickIdChangeFailedReason})]})}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:resetToOriginal,disabled:nickIdChangeModalState.isProcessing,children:\"\\uB418\\uB3CC\\uB9AC\\uAE30\"}),/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:closeModalFunc,disabled:nickIdChangeModalState.isProcessing,children:\"\\uCDE8\\uC18C\"}),/*#__PURE__*/_jsx(PHSpinnerButton,{variant:\"primary\",size:false,style:{margin:undefined},onClick:tryAccountInfoChange,disabled:shouldSubmitBtnDisabled(),showSpinner:nickIdChangeModalState.isProcessing,children:getSubmitBtnText()})]})]});};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/modal/nickIdChangeModal.tsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","refreshAccessTokenActionCreatorAsync","Form","Modal","Button","PHFormText","PHSpinnerButton","FrostAPI","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountNickIDChangeModal","props","InputChecker","id","success","idNotUsableReason","has","nick","nickNotUsableReason","FrostErrorToAccountNickIdChangeError","err","nickIdChangeFailedReason","route","errShowMsg","message","errFieldName","fieldName","accountInfo","state","accountReducer","dispatch","navigate","isProcessing","nickTextFieldValue","idTextFieldValue","nickIdChangeModalState","setNickIdChangeModalState","modalShowState","closeModalFunc","setModalShowState","getTrimmedState","modalState","tempModalState","key","trim","handleInputChange","e","fieldStateKey","fieldValue","target","type","checked","value","checkerResult","prevState","whatChanged","getSubmitBtnText","result","shouldSubmitBtnDisabled","isChanged","isFormCheckSuccess","map","fieldCheckResult","resetToOriginal","tryAccountInfoChange","resultFormCheckData","modifyAccountInfo","nickname","then","catch","reason","console","log","debugMessage","margin","evt","preventDefault","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { refreshAccessTokenActionCreatorAsync } from 'src/redux/modules/account/action_creator';\r\nimport { isEmail } from 'validator';\r\n\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport FrostAPI from 'src/network/api';\r\n\r\ninterface AccountNickIDChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    nickTextFieldValue: string;\r\n    nickNotUsableReason: string;\r\n    idTextFieldValue: string;\r\n    idNotUsableReason: string;\r\n    nickIdChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountNickIDChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        id: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디를 입력해주세요.',\r\n                };\r\n            } else if (str.length < 4) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n                };\r\n            } else if (48 < str.length) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(str);\r\n            if (strType.has('e') || strType.has('s')) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디에 사용할 수 없는 글자가 포함되어 있어요,\\n공백, 특수문자 등을 빼고 다시 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return { success: true, idNotUsableReason: null };\r\n        },\r\n        nick: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    nickNotUsableReason: '별칭을 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                nickNotUsableReason: null,\r\n            };\r\n        },\r\n    };\r\n    const FrostErrorToAccountNickIdChangeError = (err: FrostError) => {\r\n        if (!err)\r\n            return { nickIdChangeFailedReason: null };\r\n        if (err.route !== 'account')\r\n            return { nickIdChangeFailedReason: null };\r\n        // We need to set Frost's error message(showMsg)\r\n        // to proper (id|nick)NotUsableReason field or nickIdChangeFailedReason.\r\n        const errShowMsg = err.message;\r\n        const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'nickIdChangeFailedReason';\r\n\r\n        return { [errFieldName]: errShowMsg, };\r\n    };\r\n\r\n    const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [nickIdChangeModalState, setNickIdChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        nickTextFieldValue: accountInfo.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: accountInfo.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    });\r\n    // Reset form inputs when accountInfo changed or modal showed/disappeared.\r\n    useEffect(() => setNickIdChangeModalState({\r\n        ...nickIdChangeModalState,\r\n        nickTextFieldValue: accountInfo.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: accountInfo.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    }), [accountInfo, props.modalShowState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!nickIdChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountNickIDChangeModalStateType) => {\r\n        const tempModalState: AccountNickIDChangeModalStateType = { ...(modalState ?? nickIdChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    };\r\n    const handleInputChange = (fieldName: string) => (e: Event) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n        const checkerResult = InputChecker[fieldName](fieldValue.trim());\r\n        delete (checkerResult.success);\r\n\r\n        setNickIdChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...checkerResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const whatChanged = () => {\r\n        // Trim and test\r\n        const tempModalState = getTrimmedState();\r\n        return {\r\n            nick: tempModalState.nickTextFieldValue !== accountInfo.nick,\r\n            id: tempModalState.idTextFieldValue !== accountInfo.id\r\n        };\r\n    };\r\n    const getSubmitBtnText = () => {\r\n        const result = whatChanged();\r\n        if (result.id && result.nick) {\r\n            return '아이디 및 별칭 수정하기';\r\n        } else if (result.id) {\r\n            return '아이디 수정하기';\r\n        } else if (result.nick) {\r\n            return '별칭 수정하기';\r\n        } else {\r\n            return '수정된 정보가 없어요';\r\n        }\r\n    };\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (nickIdChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['id', 'nick'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult: string = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setNickIdChangeModalState({\r\n            ...nickIdChangeModalState,\r\n            nickTextFieldValue: accountInfo.nick ?? '',\r\n            nickNotUsableReason: '',\r\n            idTextFieldValue: accountInfo.id ?? '',\r\n            idNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountInfoChange = () => {\r\n        // Trim all strings in states\r\n        const tempModalState = getTrimmedState();\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick) {\r\n            // Stats are not modified, just close it.\r\n            setNickIdChangeModalState(prevState => ({\r\n                ...prevState,\r\n                isProcessing: false,\r\n            }));\r\n            return;\r\n        }\r\n\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        ['id', 'nick'].map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return;\r\n\r\n        (new FrostAPI())\r\n            .modifyAccountInfo({\r\n                ...((isChanged.id) ? { id: tempModalState.idTextFieldValue, } : {}),\r\n                ...((isChanged.nick) ? { nickname: tempModalState.nickTextFieldValue, } : {}),\r\n            })\r\n            .then(() => {\r\n                setNickIdChangeModalState(prevState => ({ ...prevState, isProcessing: false, }));\r\n                dispatch(refreshAccessTokenActionCreatorAsync(true));\r\n                closeModalFunc();\r\n            })\r\n            .catch((reason: FrostError) => {\r\n                console.log(reason);\r\n                console.log(reason.debugMessage);\r\n                setNickIdChangeModalState(prevState => ({\r\n                    ...prevState,\r\n                    isProcessing: false,\r\n                    ...FrostErrorToAccountNickIdChangeError(reason),\r\n                }));\r\n            });\r\n\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    아이디 및 별칭 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>아이디</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 아이디를 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.idTextFieldValue}\r\n                        onChange={handleInputChange('id')} />\r\n                    <PHFormText>{nickIdChangeModalState.idNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>별칭</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 별칭을 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.nickTextFieldValue}\r\n                        onChange={handleInputChange('nick')} />\r\n                    <PHFormText>{nickIdChangeModalState.nickNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n                <PHFormText>{nickIdChangeModalState.nickIdChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                되돌리기\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountInfoChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={nickIdChangeModalState.isProcessing}>\r\n                {getSubmitBtnText()}\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}