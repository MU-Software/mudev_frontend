{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muButton.tsx\";\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\nimport './muButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nexport const PHButton = ({\n  variant,\n  disabled,\n  type,\n  size,\n  smaller\n}) => {\n  var _ref;\n\n  const resultVariant = variant || 'outline-primary';\n  const buttonDisabled = disabled || false;\n  const buttonType = type || 'button';\n  const buttonSize = (_ref = size === 'extra-sm' ? 'sm' : size) !== null && _ref !== void 0 ? _ref : 'sm';\n  const buttonStyle = smaller || size === 'extra-sm' ? {\n    margin: 0.25 + 'rem',\n    width: props.width,\n    height: props.height,\n    padding: '0rem 0.25rem',\n    fontSize: 0.75 + 'rem',\n    ...(props.style || {})\n  } : {\n    margin: 0.25 + 'rem',\n    width: props.width,\n    height: props.height,\n    ...(props.style || {})\n  };\n  const attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: resultVariant\n  };\n  return /*#__PURE__*/_jsxDEV(Button, { ...attrCollection,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_c = PHButton;\nexport const PHSpinnerButton = inProps => {\n  const props = Object.assign({}, inProps, {}); // When props.showSpinner is true, we disable button and show spinner\n\n  const shouldSpinnerShow = props.showSpinner || false;\n  delete props.showSpinner;\n\n  let spinnerElement = props.spinner || /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 41\n  }, this);\n\n  delete props.spinner;\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1) throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete props.children; // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n\n  if (!(typeof btnChildElement == 'object' && btnChildElement.$$typeof === REACT_ELEMENT_TYPE)) btnChildElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: btnChildElement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 23\n  }, this);\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-')) props.variant = 'outline-secondary';else props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = /*#__PURE__*/React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%'\n    }\n  });\n  spinnerElement = /*#__PURE__*/React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden'\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(PHButton, { ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PHSpinnerButtonChildrenContainer\",\n      children: [btnChildElement, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PHSpinnerButtonSpinnerContainer\",\n        children: spinnerElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, this);\n};\n_c2 = PHSpinnerButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PHButton\");\n$RefreshReg$(_c2, \"PHSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muButton.tsx"],"names":["React","Spinner","Button","REACT_ELEMENT_TYPE","Symbol","for","PHButton","variant","disabled","type","size","smaller","resultVariant","buttonDisabled","buttonType","buttonSize","buttonStyle","margin","width","props","height","padding","fontSize","style","attrCollection","onClick","children","PHSpinnerButton","inProps","Object","assign","shouldSpinnerShow","showSpinner","spinnerElement","spinner","btnChildElement","Children","count","Error","$$typeof","setGrayWhenDisabled","startsWith","cloneElement","opacity","visibility"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\ninterface PHButtonPropTypes {\n  variant?: string;\n  disabled?: boolean;\n  type?: string;\n  size?: string;\n  smaller?: boolean;\n}\n\ninterface PHSpinnerButtonPropTypes extends PHButtonPropTypes {\n  showSpinner: boolean;\n  spinner?: React.ComponentType;\n  setGrayWhenDisabled?: boolean;\n}\n\nexport const PHButton = ({\n  variant, disabled, type, size, smaller\n}: PHButtonPropTypes) => {\n  const resultVariant = variant || 'outline-primary';\n  const buttonDisabled = disabled || false;\n  const buttonType = type || 'button'\n  const buttonSize = (size === 'extra-sm' ? 'sm' : size) ?? 'sm'\n  const buttonStyle = (smaller || size === 'extra-sm')\n    ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {}),\n    }\n    : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {}),\n    };\n\n  const attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: resultVariant,\n  }\n\n  return <Button {...attrCollection}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton: React.FC<PHSpinnerButtonPropTypes> = (inProps: PHSpinnerButtonPropTypes) => {\n  const props: PHSpinnerButtonPropTypes = Object.assign({}, inProps, {});\n\n  // When props.showSpinner is true, we disable button and show spinner\n  const shouldSpinnerShow = props.showSpinner || false;\n  delete (props.showSpinner);\n\n  let spinnerElement = props.spinner || <Spinner animation=\"border\" role=\"status\">\n    {/* visually-hidden is Bootstrap's. */}\n    <span className=\"visually-hidden\">Loading...</span>\n  </Spinner>;\n  delete (props.spinner);\n\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1)\n    throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete (props.children);\n\n\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n  if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n    btnChildElement = <div>{btnChildElement}</div>;\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-'))\n        props.variant = 'outline-secondary';\n      else\n        props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%',\n    }\n  });\n  spinnerElement = React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n    }\n  });\n\n  return <PHButton {...props}>\n    <div className='PHSpinnerButtonChildrenContainer'>\n      {btnChildElement}\n      <div className='PHSpinnerButtonSpinnerContainer'>\n        {spinnerElement}\n      </div>\n    </div>\n  </PHButton>\n}\n"]},"metadata":{},"sourceType":"module"}