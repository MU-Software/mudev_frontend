{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Documents\\\\GitHub\\\\mudev_frontend\\\\src\\\\ui\\\\common\\\\element\\\\util\\\\youtubeThumbnail.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const YoutubeThumbnail = props => {\n  var _props$youtubeId;\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    style: props.style,\n    src: `https://i3.ytimg.com/vi/${(_props$youtubeId = props.youtubeId) !== null && _props$youtubeId !== void 0 ? _props$youtubeId : ''}/maxresdefault.jpg`,\n    alt: \"YouTube thumbnail image\",\n    onLoad: event => {\n      // Prevent endless loop when fallback image also fails\n      event.currentTarget.onLoad = null;\n      event.currentTarget.onload = null;\n      if (!props.youtubeId || event.currentTarget.src.endsWith('/sddefault.jpg')) // This component is used as placeholder, or we already tried with low res image,\n        // and we couldn't get a thumbnail image.\n        return; // Youtube sends fallback image when there's no file,\n      // img's onError won't triggered as there's a fallback image on a response even though it's 404,\n      // so we need to detect if the received image is a fallback image.\n\n      if (event.currentTarget.naturalHeight <= 90) {\n        var _props$youtubeId2;\n\n        event.currentTarget.src = `https://i3.ytimg.com/vi/${(_props$youtubeId2 = props.youtubeId) !== null && _props$youtubeId2 !== void 0 ? _props$youtubeId2 : ''}/sddefault.jpg`;\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, this);\n};\n_c = YoutubeThumbnail;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeThumbnail\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/common/element/util/youtubeThumbnail.tsx"],"names":["React","YoutubeThumbnail","props","style","youtubeId","event","currentTarget","onLoad","onload","src","endsWith","naturalHeight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,gBAA0B,GAAIC,KAAD;AAAA;;AAAA,sBAGpC;AACF,IAAA,KAAK,EAAEA,KAAK,CAACC,KADX;AAEF,IAAA,GAAG,EAAG,2BAAD,oBAA2BD,KAAK,CAACE,SAAjC,+DAA8C,EAAG,oBAFpD;AAGF,IAAA,GAAG,EAAC,yBAHF;AAIF,IAAA,MAAM,EAAGC,KAAD,IAAW;AACjB;AACAA,MAAAA,KAAK,CAACC,aAAN,CAAoBC,MAApB,GAA6B,IAA7B;AACAF,MAAAA,KAAK,CAACC,aAAN,CAAoBE,MAApB,GAA6B,IAA7B;AACA,UAAI,CAACN,KAAK,CAACE,SAAP,IAAoBC,KAAK,CAACC,aAAN,CAAoBG,GAApB,CAAwBC,QAAxB,CAAiC,gBAAjC,CAAxB,EACE;AACA;AACA,eAPe,CASjB;AACA;AACA;;AACA,UAAIL,KAAK,CAACC,aAAN,CAAoBK,aAApB,IAAqC,EAAzC,EAA6C;AAAA;;AAC3CN,QAAAA,KAAK,CAACC,aAAN,CAAoBG,GAApB,GAA2B,2BAAD,qBAA2BP,KAAK,CAACE,SAAjC,iEAA8C,EAAG,gBAA3E;AACD;AACF;AAnBC;AAAA;AAAA;AAAA;AAAA,UAHoC;AAAA,CAAnC;KAAMH,gB","sourcesContent":["import React from 'react';\r\n\r\nexport const YoutubeThumbnail: React.FC = (props: {\r\n  youtubeId: string;\r\n  style?: React.CSSProperties;\r\n}) => <img\r\n    style={props.style}\r\n    src={`https://i3.ytimg.com/vi/${props.youtubeId ?? ''}/maxresdefault.jpg`}\r\n    alt='YouTube thumbnail image'\r\n    onLoad={(event) => {\r\n      // Prevent endless loop when fallback image also fails\r\n      event.currentTarget.onLoad = null;\r\n      event.currentTarget.onload = null;\r\n      if (!props.youtubeId || event.currentTarget.src.endsWith('/sddefault.jpg'))\r\n        // This component is used as placeholder, or we already tried with low res image,\r\n        // and we couldn't get a thumbnail image.\r\n        return;\r\n\r\n      // Youtube sends fallback image when there's no file,\r\n      // img's onError won't triggered as there's a fallback image on a response even though it's 404,\r\n      // so we need to detect if the received image is a fallback image.\r\n      if (event.currentTarget.naturalHeight <= 90) {\r\n        event.currentTarget.src = `https://i3.ytimg.com/vi/${props.youtubeId ?? ''}/sddefault.jpg`;\r\n      }\r\n    }}\r\n  />;\r\n"]},"metadata":{},"sourceType":"module"}