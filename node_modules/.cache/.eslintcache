[{"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\index.js":"1","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\App.js":"2","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\reportWebVitals.js":"3","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home.jsx":"4","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\canvasTemplate.jsx":"5","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\pageTemplate.jsx":"6","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\route.js":"7","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\store.js":"8","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\index.js":"9","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\common\\notfound.jsx":"10","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\scrollIndicator.jsx":"11","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\footer.jsx":"12","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\main.jsx":"13","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\bca\\main.jsx":"14","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\dummySidebar.jsx":"15","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\main.jsx":"16","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\introduce.jsx":"17","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\blog\\blogRoot.jsx":"18","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\network\\api.ts":"19","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\network\\api_response.ts":"20","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\common\\error.ts":"21","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\signup.jsx":"22","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\signin.jsx":"23","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\resetPassword.jsx":"24","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\topbar.jsx":"25","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\page\\pageListItem2.jsx":"26","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\page\\pageListItem3.jsx":"27","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\reducer.ts":"28","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\model.ts":"29","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\divider.tsx":"30","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\util\\youtubeThumbnail.tsx":"31","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muListRow.jsx":"32","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\action.ts":"33","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muButton.jsx":"34","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\sidebar.jsx":"35","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\model.ts":"36","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\api.ts":"37","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muFormText.tsx":"38","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muListRowTs.tsx":"39","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playlistDetailPage.tsx":"40","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\element\\playlistControlModal.tsx":"41","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\main.tsx":"42","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\sio.ts":"43","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muAlertMsgBox.tsx":"44","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\subpage\\qrDecode.tsx":"45","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\subpage\\protocolParser.tsx":"46","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\mailSentWelcomeToMuDev.tsx":"47","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\accountConfig.tsx":"48","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\changePassword.tsx":"49","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\modal\\nickIdChangeModal.tsx":"50","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\modal\\passwordChangeModal.tsx":"51","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\deactivate.tsx":"52","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\action_creator.ts":"53","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\welcomeToMuDev.tsx":"54","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\my_skills.jsx":"55","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\projects.tsx":"56","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\index.js":"57","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\App.js":"58","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\reportWebVitals.js":"59","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\store.js":"60","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\dummySidebar.jsx":"61","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\topbar.jsx":"62","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\common\\notfound.jsx":"63","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\main.jsx":"64","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\sidebar.jsx":"65","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\bca\\main.jsx":"66","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\signup.jsx":"67","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\signin.jsx":"68","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\resetPassword.jsx":"69","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home.jsx":"70","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\blog\\blogRoot.jsx":"71","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\subpage\\protocolParser.tsx":"72","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\subpage\\qrDecode.tsx":"73","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\accountConfig.tsx":"74","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\changePassword.tsx":"75","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\welcomeToMuDev.tsx":"76","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\deactivate.tsx":"77","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playlistDetailPage.tsx":"78","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\mailSentWelcomeToMuDev.tsx":"79","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\main.tsx":"80","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\index.js":"81","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\main.jsx":"82","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\introduce.jsx":"83","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\footer.jsx":"84","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\my_skills.jsx":"85","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\model.ts":"86","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\action_creator.ts":"87","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\common\\error.ts":"88","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muButton.jsx":"89","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muListRow.jsx":"90","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\projects.tsx":"91","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\divider.tsx":"92","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muFormText.tsx":"93","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\sio.ts":"94","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\api.ts":"95","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\model.ts":"96","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muAlertMsgBox.tsx":"97","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\modal\\passwordChangeModal.tsx":"98","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\modal\\nickIdChangeModal.tsx":"99","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\element\\playlistControlModal.tsx":"100","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\util\\youtubeThumbnail.tsx":"101","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\reducer.ts":"102","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\action.ts":"103","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\network\\api.ts":"104","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\scrollIndicator.jsx":"105","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\network\\api_response.ts":"106"},{"size":938,"mtime":1652791449323,"results":"107","hashOfConfig":"108"},{"size":3697,"mtime":1653293021308,"results":"109","hashOfConfig":"108"},{"size":362,"mtime":1638176713668,"results":"110","hashOfConfig":"108"},{"size":644,"mtime":1653911657007,"results":"111","hashOfConfig":"108"},{"size":830,"mtime":1640845764566,"results":"112","hashOfConfig":"113"},{"size":1045,"mtime":1641142764452,"results":"114","hashOfConfig":"113"},{"size":1445,"mtime":1641036329752,"results":"115","hashOfConfig":"113"},{"size":351,"mtime":1650531553334,"results":"116","hashOfConfig":"108"},{"size":193,"mtime":1650277935483,"results":"117","hashOfConfig":"108"},{"size":694,"mtime":1650519992374,"results":"118","hashOfConfig":"108"},{"size":252,"mtime":1650520243920,"results":"119","hashOfConfig":"108"},{"size":1813,"mtime":1653639217497,"results":"120","hashOfConfig":"108"},{"size":1221,"mtime":1653995566906,"results":"121","hashOfConfig":"108"},{"size":618,"mtime":1650520432133,"results":"122","hashOfConfig":"108"},{"size":208,"mtime":1650260039217,"results":"123","hashOfConfig":"108"},{"size":1631,"mtime":1651510154287,"results":"124","hashOfConfig":"108"},{"size":4472,"mtime":1653938700077,"results":"125","hashOfConfig":"108"},{"size":825,"mtime":1653810956094,"results":"126","hashOfConfig":"108"},{"size":37298,"mtime":1653395190787,"results":"127","hashOfConfig":"108"},{"size":3361,"mtime":1651317185304,"results":"128","hashOfConfig":"108"},{"size":1214,"mtime":1652961727207,"results":"129","hashOfConfig":"108"},{"size":14327,"mtime":1653758779293,"results":"130","hashOfConfig":"108"},{"size":6878,"mtime":1653758820845,"results":"131","hashOfConfig":"108"},{"size":2625,"mtime":1653758848697,"results":"132","hashOfConfig":"108"},{"size":4977,"mtime":1653758341012,"results":"133","hashOfConfig":"108"},{"size":2410,"mtime":1640845764799,"results":"134","hashOfConfig":"135"},{"size":2268,"mtime":1640845764764,"results":"136","hashOfConfig":"135"},{"size":955,"mtime":1653289290227,"results":"137","hashOfConfig":"108"},{"size":744,"mtime":1653297018347,"results":"138","hashOfConfig":"108"},{"size":391,"mtime":1653894818463,"results":"139","hashOfConfig":"108"},{"size":1123,"mtime":1652688486436,"results":"140","hashOfConfig":"108"},{"size":11196,"mtime":1653850478706,"results":"141","hashOfConfig":"108"},{"size":256,"mtime":1653289294274,"results":"142","hashOfConfig":"108"},{"size":3005,"mtime":1650824902245,"results":"143","hashOfConfig":"108"},{"size":3129,"mtime":1653724868127,"results":"144","hashOfConfig":"108"},{"size":4807,"mtime":1652776815525,"results":"145","hashOfConfig":"108"},{"size":8325,"mtime":1652962014872,"results":"146","hashOfConfig":"108"},{"size":998,"mtime":1652947611431,"results":"147","hashOfConfig":"108"},{"size":10490,"mtime":1650782998414,"results":"148","hashOfConfig":"108"},{"size":26188,"mtime":1653939327323,"results":"149","hashOfConfig":"108"},{"size":9283,"mtime":1651478557277,"results":"150","hashOfConfig":"108"},{"size":13056,"mtime":1653806323928,"results":"151","hashOfConfig":"108"},{"size":19350,"mtime":1653464658799,"results":"152","hashOfConfig":"108"},{"size":1919,"mtime":1651482932046,"results":"153","hashOfConfig":"108"},{"size":1423,"mtime":1651509946098,"results":"154","hashOfConfig":"108"},{"size":1454,"mtime":1653395614055,"results":"155","hashOfConfig":"108"},{"size":3866,"mtime":1653761005081,"results":"156","hashOfConfig":"108"},{"size":5195,"mtime":1653329627543,"results":"157","hashOfConfig":"108"},{"size":2842,"mtime":1653035052854,"results":"158","hashOfConfig":"108"},{"size":13115,"mtime":1653331094254,"results":"159","hashOfConfig":"108"},{"size":16416,"mtime":1653290510423,"results":"160","hashOfConfig":"108"},{"size":8859,"mtime":1653758940609,"results":"161","hashOfConfig":"108"},{"size":5393,"mtime":1653331114694,"results":"162","hashOfConfig":"108"},{"size":865,"mtime":1653759189094,"results":"163","hashOfConfig":"108"},{"size":14573,"mtime":1653939011454,"results":"164","hashOfConfig":"108"},{"size":11867,"mtime":1653939483576,"results":"165","hashOfConfig":"108"},{"size":938,"mtime":1652791449323,"results":"166","hashOfConfig":"167"},{"size":3697,"mtime":1653293021308,"results":"168","hashOfConfig":"167"},{"size":362,"mtime":1638176713668,"results":"169","hashOfConfig":"167"},{"size":351,"mtime":1650531553334,"results":"170","hashOfConfig":"167"},{"size":208,"mtime":1650260039217,"results":"171","hashOfConfig":"167"},{"size":4977,"mtime":1653758341012,"results":"172","hashOfConfig":"167"},{"size":694,"mtime":1650519992374,"results":"173","hashOfConfig":"167"},{"size":1631,"mtime":1651510154287,"results":"174","hashOfConfig":"167"},{"size":3129,"mtime":1653724868127,"results":"175","hashOfConfig":"167"},{"size":618,"mtime":1650520432133,"results":"176","hashOfConfig":"167"},{"size":14327,"mtime":1653758779293,"results":"177","hashOfConfig":"167"},{"size":6878,"mtime":1653758820845,"results":"178","hashOfConfig":"167"},{"size":2625,"mtime":1653758848697,"results":"179","hashOfConfig":"167"},{"size":644,"mtime":1653911657007,"results":"180","hashOfConfig":"167"},{"size":825,"mtime":1653810956094,"results":"181","hashOfConfig":"167"},{"size":1454,"mtime":1653395614055,"results":"182","hashOfConfig":"167"},{"size":1423,"mtime":1651509946098,"results":"183","hashOfConfig":"167"},{"size":5195,"mtime":1653329627543,"results":"184","hashOfConfig":"167"},{"size":2842,"mtime":1653035052854,"results":"185","hashOfConfig":"167"},{"size":865,"mtime":1653759189094,"results":"186","hashOfConfig":"167"},{"size":8859,"mtime":1653758940609,"results":"187","hashOfConfig":"167"},{"size":26188,"mtime":1653939327323,"results":"188","hashOfConfig":"167"},{"size":3866,"mtime":1653761005081,"results":"189","hashOfConfig":"167"},{"size":13056,"mtime":1653806323928,"results":"190","hashOfConfig":"167"},{"size":193,"mtime":1650277935483,"results":"191","hashOfConfig":"167"},{"size":1221,"mtime":1653995566906,"results":"192","hashOfConfig":"167"},{"size":4472,"mtime":1653938700077,"results":"193","hashOfConfig":"167"},{"size":1813,"mtime":1653639217497,"results":"194","hashOfConfig":"167"},{"size":14573,"mtime":1653939011454,"results":"195","hashOfConfig":"167"},{"size":744,"mtime":1653297018347,"results":"196","hashOfConfig":"167"},{"size":5393,"mtime":1653331114694,"results":"197","hashOfConfig":"167"},{"size":1214,"mtime":1652961727207,"results":"198","hashOfConfig":"167"},{"size":3005,"mtime":1650824902245,"results":"199","hashOfConfig":"167"},{"size":11196,"mtime":1653850478706,"results":"200","hashOfConfig":"167"},{"size":11867,"mtime":1653939483576,"results":"201","hashOfConfig":"167"},{"size":391,"mtime":1653894818463,"results":"202","hashOfConfig":"167"},{"size":998,"mtime":1652947611431,"results":"203","hashOfConfig":"167"},{"size":19350,"mtime":1653464658799,"results":"204","hashOfConfig":"167"},{"size":8325,"mtime":1652962014872,"results":"205","hashOfConfig":"167"},{"size":4807,"mtime":1652776815525,"results":"206","hashOfConfig":"167"},{"size":1919,"mtime":1651482932046,"results":"207","hashOfConfig":"167"},{"size":16416,"mtime":1653290510423,"results":"208","hashOfConfig":"167"},{"size":13115,"mtime":1653331094254,"results":"209","hashOfConfig":"167"},{"size":9283,"mtime":1651478557277,"results":"210","hashOfConfig":"167"},{"size":1123,"mtime":1652688486436,"results":"211","hashOfConfig":"167"},{"size":955,"mtime":1653289290227,"results":"212","hashOfConfig":"167"},{"size":256,"mtime":1653289294274,"results":"213","hashOfConfig":"167"},{"size":37298,"mtime":1653395190787,"results":"214","hashOfConfig":"167"},{"size":252,"mtime":1650520243920,"results":"215","hashOfConfig":"167"},{"size":3361,"mtime":1651317185304,"results":"216","hashOfConfig":"167"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},"1rfq7uz",{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"219"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"219"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"219"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},"1naga9",{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"219"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"219"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"219"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"219"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"219"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"219"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"268"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"219"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"219"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"219"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"219"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"288"},"7ahvlz",{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"268"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"268"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"219"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"219"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"219"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"268"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"268"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"268"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"268"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"268"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"268"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"268"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"268"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"268"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"268"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"268"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"268"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"268"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"268"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"268"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"219"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"268"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vqj8z3",{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"389","messages":"390","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"407","messages":"408","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"413","messages":"414","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"415","messages":"416","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"417","messages":"418","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"427","messages":"428","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"435","messages":"436","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"437","messages":"438","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"439","messages":"440","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"447","messages":"448","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"453","messages":"454","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"457","messages":"458","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"467","messages":"468","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\index.js",[],[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\App.js",["471"],"// Project GLOW(w. DUSK theme) / PLAYCO (mudev.cc & PlayCo Service frontend)\n// (c) MUsoftware, 2022, MIT\n'use strict';\n\nimport React, { useState } from 'react';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nimport { Sidebar } from './ui/util/sidebar';\nimport { TopBar } from './ui/util/topbar';\nimport { DummySidebar } from './ui/util/dummySidebar';\n\nimport { GlowHome } from './ui/page/home/home';\nimport { NotFound } from './ui/page/common/notfound';\nimport { BCaMain } from './ui/page/bca/main';\nimport { BlogRoot } from './ui/page/blog/blogRoot';\n\nimport { ToolMain } from './ui/page/tool/main';\nimport { QRDecoderMain } from './ui/page/tool/subpage/qrDecode';\nimport { ProtocolParserMain } from './ui/page/tool/subpage/protocolParser';\n\nimport { AccountSignUp } from './ui/page/account/signup';\nimport { AccountSignIn } from './ui/page/account/signin';\nimport { AccountPasswordChange } from './ui/page/account/changePassword';\nimport { AccountPasswordReset } from './ui/page/account/resetPassword';\nimport { AccountDeactivate } from './ui/page/account/deactivate';\nimport { WelcomeToMuDev } from './ui/page/account/welcomeToMuDev';\nimport { MailSentWelcomeToMuDev } from './ui/page/account/mailSentWelcomeToMuDev';\nimport { AccountConfig } from './ui/page/account/accountConfig';\n\nimport { PlaycoMain } from './ui/page/playco/main';\nimport { PlayCoPlaylistDetail } from './ui/page/playco/playlistDetailPage';\n\nconst App = () => {\n  const [appProps, setAppProps] = useState({\n    topBarProps: {\n      disableBlur: false,\n    },\n    mainContentProps: {\n      style: {},\n    },\n  });\n\n  return <div className='App'>\n    <BrowserRouter>\n      <TopBar {...appProps.topBarProps} />\n      <Sidebar />\n      <div className='mainContent' {...appProps.mainContentProps}>\n        <Routes>\n          <Route exact path='/' className='nav-link' element={<GlowHome />} />\n          <Route exact path='/account/signup' className='nav-link' element={<AccountSignUp />} />\n          <Route exact path='/account/signin' className='nav-link' element={<AccountSignIn />} />\n          <Route exact path='/account/setting' className='nav-link' element={<AccountConfig />} />\n          <Route exact path='/account/change-password' className='nav-link' element={<AccountPasswordChange />} />\n          <Route exact path='/account/reset-password' className='nav-link' element={<AccountPasswordReset />} />\n          <Route exact path='/account/deactivate' className='nav-link' element={<AccountDeactivate />} />\n          <Route exact path='/account/welcome-to-mudev' className='nav-link' element={<WelcomeToMuDev />} />\n          <Route exact path='/account/welcome-to-mudev-mail' className='nav-link' element={<MailSentWelcomeToMuDev />} />\n          <Route exact path='/bca' className='nav-link' element={<BCaMain />} />\n          <Route exact path='/playco' className='nav-link' element={<PlaycoMain />} />\n          <Route exact path='/playco/:playlistId' className='nav-link' element={<PlayCoPlaylistDetail />} />\n          <Route exact path='/tool' className='nav-link' element={<ToolMain />} />\n          <Route exact path='/tool/qrdecode' className='nav-link' element={<QRDecoderMain parentPropsStateFunc={setAppProps} />} />\n          <Route exact path='/tool/network-protocol-parser' className='nav-link' element={<ProtocolParserMain parentPropsStateFunc={setAppProps} />} />\n          <Route exact path='/blog' className='nav-link' element={<BlogRoot />} />\n          <Route path='*' element={<NotFound />} />\n        </Routes>\n      </div>\n      <DummySidebar />\n    </BrowserRouter>\n  </div>\n}\n\nexport default App;\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\reportWebVitals.js",["472","473"],"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home.jsx",["474"],"import React from 'react';\n\nimport { HomeIndexSection } from './home_section/main';\nimport { HomeIntroduceSection } from './home_section/introduce';\nimport { HomeMySkillsSection } from './home_section/my_skills';\nimport { HomeProjectsByMUSection } from './home_section/projects';\nimport { HomeFooterSection } from './home_section/footer';\nimport './home.css';\n\nexport const GlowHome = () => {\n  return <div className='homePageContainer'>\n    <div className='homePage'>\n      <HomeIndexSection />\n\n      <HomeIntroduceSection />\n      <HomeMySkillsSection />\n      <HomeProjectsByMUSection />\n\n      <HomeFooterSection />\n    </div>\n  </div>\n};\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\canvasTemplate.jsx",[],[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\pageTemplate.jsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\route.js",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\store.js",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\index.js",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\common\\notfound.jsx",["475"],"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { PHButton } from 'src/ui/common/element/muButton';\r\nimport './notfound.css'\r\n\r\nexport const NotFound = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return <div className='notFoundPageContainer'>\r\n    <div className='dummyPlacer' />\r\n    <div className='notFoundPage'>\r\n      <h1>페이지를 찾을 수 없어요...</h1>\r\n      <PHButton variant='success' onClick={() => navigate(-1)} size='medium'>뒤로 가기</PHButton>\r\n      <PHButton variant='success' onClick={() => navigate('/')} size='medium'>홈으로 가기</PHButton>\r\n      <br />\r\n    </div>\r\n    <code>404 Not Found</code>\r\n  </div>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\scrollIndicator.jsx",["476","477"],"import React from 'react';\r\n\r\nimport './scrollIndicator.css';\r\n\r\nexport const ScrollIndicator = (props) => <div className='scrollIndicator' {...props}>\r\n  &nbsp;\r\n  <span></span>\r\n  <span></span>\r\n  <span></span>\r\n  아래로 내려주세요\r\n</div>;\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\footer.jsx",["478","479"],"import React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiEmailOutline, mdiTwitter, mdiGithub } from '@mdi/js';\r\n\r\nimport './footer.css';\r\n\r\nexport const HomeFooterSection = props => {\r\n  const generateEmailAddress = (event) => {\r\n    let target = event.target.hasAttribute('dataset') ? event.target : event.target.parentElement;\r\n    let dataset = target.dataset;\r\n    target.href = 'mailto:' + dataset.name + '@' + dataset.domain + '.' + dataset.tld;\r\n  };\r\n\r\n  const generateRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  };\r\n\r\n  return <footer className='homeFooterSection' {...props}>\r\n    &copy; MUsoftware, 2022&nbsp;&nbsp;|&nbsp;&nbsp;\r\n    <a href='https://github.com/MU-Software'>\r\n      <Icon className='homeFooterSectionIcon' path={mdiGithub} alt='Go to MUsoftware Github Page' />\r\n    </a>&nbsp;&nbsp;\r\n    <a href='https://twitter.com/MUsoftware'>\r\n      <Icon className='homeFooterSectionIcon' path={mdiTwitter} alt='Go to MUsoftware twitter account' />\r\n    </a>&nbsp;&nbsp;\r\n    <a href=\"#\"\r\n      data-name=\"musoftware\"\r\n      data-domain=\"mudev\"\r\n      data-tld=\"cc\"\r\n      onClick={(e) => generateEmailAddress(e)} >\r\n      <Icon className='homeFooterSectionIcon' path={mdiEmailOutline} alt='Mail to MUsoftware' />\r\n    </a>&nbsp;&nbsp;\r\n    <br />\r\n    <div className='taglineContainer'>\r\n      {\r\n        (generateRandomInt(0, 10) === 1)\r\n          ? <a\r\n            target='_blank'\r\n            rel='noopener noreferrer'\r\n            href='https://youtu.be/CZ9VcBs8H2Y'\r\n            className='tagline'>On est en vie, il faut danser</a>\r\n          : <div className='tagline'>People with right faith and possibility change the world.</div>\r\n      }\r\n    </div>\r\n  </footer>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\main.jsx",["480","481"],"import React from 'react';\r\n\r\nimport { ScrollIndicator } from 'src/ui/common/element/scrollIndicator';\r\nimport MU8BitLogo from './mu_pixel_logo_8x.png';\r\n\r\nimport MUFullLogoWebP from './mu_logo_512px.webp';\r\nimport MUFullLogoAPNG from './mu_logo_512px.png';\r\nimport './main.css';\r\n\r\nexport const HomeIndexSection = props => <section className='homeIndexSection'>\r\n  <ScrollIndicator className='dummyScrollIndicator' style={{ visibility: 'hidden', }} />\r\n  <div className='targetLogoContainer'>\r\n    <picture className='targetImgLogo'>\r\n      <source srcSet={MUFullLogoWebP} type='image/webp'/>\r\n      <source srcSet={MUFullLogoAPNG} type='image/apng'/>\r\n      <source srcSet={MUFullLogoAPNG} type='image/png'/>\r\n      <img className='targetImgLogo' src={MUFullLogoAPNG} alt='MUsoftware Logo' />\r\n    </picture>\r\n    <br />\r\n    <div className='targetTextLogoContainer'>\r\n      <h1 className='targetTextLogo' {...props}>\r\n        이준영 | <img className='targetTextLogoEng' src={MU8BitLogo} alt='MUsoftware' />\r\n        <p>\r\n          아름답게 해내는 것에 희열을 느끼는 개발자입니다.\r\n        </p>\r\n      </h1>\r\n    </div>\r\n  </div>\r\n  <ScrollIndicator className='scrollIndicator' />\r\n</section>;\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\bca\\main.jsx",["482","483"],"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { PHButton } from \"src/ui/common/element/muButton\";\r\nimport './main.css';\r\n\r\nexport const BCaMain = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  return <section className='bcaMain' {...props}>\r\n  <header>\r\n    <h2>B.Ca</h2>\r\n    <p>명함 기반의 커뮤니케이션 메신저</p>\r\n  </header>\r\n\r\n  <PHButton onClick={() => navigate(-1)} variant='outline-success' size='medium'>뒤로 가기</PHButton>\r\n  <PHButton onClick={() => navigate('/')} variant='success' size='medium'>홈으로 가기</PHButton>\r\n</section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\dummySidebar.jsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\main.jsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\introduce.jsx",["484","485","486","487"],"import React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiEmailOutline, mdiTwitter, mdiGithub, mdiPhone } from '@mdi/js';\r\n\r\nimport { Divider } from 'src/ui/common/element/divider';\r\n\r\nimport './introduce.css';\r\n\r\nexport const HomeIntroduceSection = props => {\r\n  return <section className='homeIntroduceSection' id='introduce'>\r\n    <header>\r\n      <h2>Introduce</h2>\r\n    </header>\r\n    <Divider style={{ marginTop: '2rem' }} />\r\n    <article className='homeIntroduceArticle'>\r\n      <article className='homeIntroduceMySelf'>\r\n        <h5>저를 소개합니다.</h5>\r\n        <p>저는 웹/앱/임베디드/그래픽스 등 분야를 가리지 않고 컴퓨터와 관련된 많은 것들을 사랑하는 개발자입니다.</p>\r\n        <p>\r\n          개발과 관련된 대화를 나누기 위해 매년 PyCon KR이나 AWS Summit에 참가하고,\r\n          최신 기술 트렌드를 알기 위해 Hacker News나 GeekNews를 매일 확인하거나 Google I/O, Toss Slash 등의 컨퍼런스를 챙겨보는 것을 좋아하며,\r\n          그렇게 익힌 기술 트렌드를 실제 코드에 적용하면서 이러한 트렌드가 유행하는 이유를 추측해보고 해당 트렌드의 장단점을 직접 느끼는 것을 좋아합니다.\r\n          {/* </p>\r\n      <p> */}\r\n          <br />\r\n          <br />\r\n          실제로 이 사이트도...\r\n          <ul>\r\n            <li>Python의 Type-hint와 TypeScript등 정적 타이핑을 적극적으로 사용하고</li>\r\n            <li>백엔드 API 프레임워크에서의 선언 한 번으로 요청의 Header나 Body의 필드를 검사하고 OpenAPI 문서를 자동으로 생성하는 등</li>\r\n          </ul>\r\n          최근 트렌드를 반영해보면서 이것이 트렌드가 된 이유를 직접 배우고 느꼈습니다.\r\n        </p>\r\n      </article>\r\n      <article className='homeIntroduceLinkArticle'>\r\n        <h5>연락처 &#38; 링크</h5>\r\n        <div className='homeIntroduceLinkContainer'>\r\n          <a href='mailto:musoftware@mudev.cc' className='homeIntroduceLink'>\r\n            <aside className='homeIntroduceLinkBox homeIntroduceLinkBoxGmail'>\r\n              <Icon className='homeIntroduceLinkIcon' path={mdiEmailOutline} alt='Mail to MUsoftware' />\r\n              <div className='homeIntroduceLinkTextBox'>\r\n                Mail<br /><small>musoftware@mudev.cc</small>\r\n              </div>\r\n            </aside>\r\n          </a>\r\n          <a href='mailto:musoftware@daum.net' className='homeIntroduceLink'>\r\n            <aside className='homeIntroduceLinkBox homeIntroduceLinkBoxKakaoMail'>\r\n              <Icon className='homeIntroduceLinkIcon' path={mdiEmailOutline} alt='Mail to MUsoftware' />\r\n              <div className='homeIntroduceLinkTextBox'>\r\n                보조 Mail<br /><small>musoftware@daum.net</small>\r\n              </div>\r\n            </aside>\r\n          </a>\r\n          <a href='https://twitter.com/MUsoftware' className='homeIntroduceLink'>\r\n            <aside className='homeIntroduceLinkBox homeIntroduceLinkBoxTwitter'>\r\n              <Icon className='homeIntroduceLinkIcon' path={mdiTwitter} alt='Go to MUsoftware twitter account' />\r\n              <div className='homeIntroduceLinkTextBox'>\r\n                Twitter<br /><small>@MUsoftwareKR</small>\r\n              </div>\r\n            </aside>\r\n          </a>\r\n          <a href='https://github.com/MU-Software' className='homeIntroduceLink'>\r\n            <aside className='homeIntroduceLinkBox'>\r\n              <Icon className='homeIntroduceLinkIcon' path={mdiGithub} alt='Go to MUsoftware Github Page' />\r\n              <div className='homeIntroduceLinkTextBox'>\r\n                Github<br /><small>MU-Software</small>\r\n              </div>\r\n            </aside>\r\n          </a>\r\n        </div>\r\n      </article>\r\n      <article className='homeIntroduceEducated'>\r\n        <h5>학력</h5>\r\n        <ul>\r\n          <li className='homeIntroduceEducatedListItem'>\r\n            [ 2013. 3 - 2016. 2 (졸업)]\r\n            <div className='homeIntroduceEducatedSchoolName'>\r\n              경기 안산 고잔고등학교\r\n            </div>\r\n          </li>\r\n          <li className='homeIntroduceEducatedListItem'>\r\n            [ 2016. 3 - 2022. 2 (졸업)]\r\n            <div className='homeIntroduceEducatedSchoolName'>\r\n              한신대학교 컴퓨터공학부\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </article>\r\n    </article>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\blog\\blogRoot.jsx",["488"],"import React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiPost } from '@mdi/js';\r\n\r\nimport './blogRoot.css';\r\n\r\nexport const BlogRoot = () => {\r\n  return <section className='blogRoot'>\r\n    <aside className='blogBody'>\r\n      <header>\r\n        <h2>\r\n          <Icon path={mdiPost} size='36pt' />&nbsp;블로그는 아직 준비되지 않았어요, 나중에 와 주세요...\r\n        </h2>\r\n        <p>글감은 쪼매 있는데, 쓸 의지와 시간, 그리고 필력이...</p>\r\n      </header>\r\n\r\n      <h5>언젠간 쓰고 싶은 주제</h5>\r\n      <ul>\r\n        <li>Web Extension 개발(Chrome 확장의 그것)</li>\r\n        <li>Modern OpenGL 및 렌더 엔진</li>\r\n        <li>JWT</li>\r\n        <li>ATmega2560의 XMEM 인터페이스와 SRAM & AY-3-8910</li>\r\n      </ul>\r\n    </aside>\r\n  </section>\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\network\\api.ts",["489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510"],"// (c) MUsoftware 2022\r\n'use strict';\r\n\r\nimport { FrostError } from '../common/error';\r\nimport { APIResult } from './api_response';\r\n\r\nconst HTTP_METHOD: Record<string, string> = {\r\n  // We will support only these methods for now\r\n  HEAD: 'HEAD',\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  PATCH: 'PATCH',\r\n  DELETE: 'DELETE',\r\n};\r\n\r\nconst role2Object = (roleStr: string) => {\r\n  const result: { [roleName: string]: string | boolean } = {};\r\n\r\n  roleStr.split(\"&\").forEach(function (part) {\r\n    const item = part.split(\"=\");\r\n    if (item.length == 2) {\r\n      result[item[0]] = decodeURIComponent(item[1]);\r\n      if (result[item[0]] === 'true' || result[item[0]] === 'false')\r\n        result[item[0]] = (result[item[0]] === 'true') ? true : false;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n  return [...new Uint8Array(buffer)]\r\n    .map(x => x.toString(16).padStart(2, '0'))\r\n    .join('');\r\n}\r\n\r\n// Generate random safe string\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n  const randArray = new Uint32Array(bytes);\r\n  window.crypto.getRandomValues(randArray);\r\n  return buf2hex(randArray);\r\n}\r\n\r\ninterface FrostAPIRequestArgumentTypes {\r\n  method: 'HEAD' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\r\n  url: string;\r\n  accessTokenRequired: boolean;\r\n  additionalHeaders: Record<string, unknown>;\r\n  data: Record<string, unknown>;\r\n  isRetry: boolean;\r\n}\r\n\r\ninterface FrostAccountModifiableInfoTypes {\r\n  id: string;\r\n  nickname: string;\r\n  private: boolean;\r\n  description: string;\r\n}\r\n\r\nlet frostApiInstance: FrostAPI;\r\nclass FrostAPI {\r\n  // We only uses these http methods now.\r\n  static readonly #API_USED_METHOD = [\r\n    // HTTP_METHOD.HEAD,  // NOT ALLOWED YET!!!\r\n    HTTP_METHOD.GET,\r\n    HTTP_METHOD.POST,\r\n    HTTP_METHOD.PUT,\r\n    HTTP_METHOD.PATCH,\r\n    HTTP_METHOD.DELETE,\r\n  ]\r\n  // Refresh Token will be saved on cookie storage,\r\n  // And all of these attributes must be private.\r\n  readonly #BASE_URL = 'https://mudev.cc/api/dev/';\r\n  // We \"possibly\" returns response.json() on these HTTP Response status code.\r\n  // Although these HTTP Response status code means error,\r\n  // each routes have to handle these codes differently.\r\n  static readonly RETURNABLE_ERROR = [\r\n    // Actually, on 404, we need to filter http.not_found out only,\r\n    // and any other responses must be returned, but we can get subcode after response.json().\r\n    // And response.json() returns Promise<Any> and we cannot get subCode directly,\r\n    // so we need to handle 404 on second stage.\r\n    404, // http || resource not found\r\n    409, // already used / information mismatch, conflict\r\n    410, // resource gone\r\n    412, // resource prediction failed\r\n    422, // request.body.bad_semantics - email address validation failure, etc.\r\n  ];\r\n  // Default fetch options,\r\n  // we'll copy and modify this default option object on every request.\r\n  readonly #DEFAULT_FETCH_OPTION = {\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin',\r\n    redirect: 'follow',\r\n    referrerPolicy: 'strict-origin-when-cross-origin',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Account related properties\r\n  #csrfToken: string = '';\r\n  #accessToken: string = '';\r\n  #accessTokenExpiresAt: Date = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n  #refreshResult?: APIResult['data'] | null = null;\r\n\r\n  constructor() {\r\n    if (frostApiInstance) return frostApiInstance;\r\n\r\n    this.#csrfToken = generateRandomSecureToken(32);\r\n    frostApiInstance = this;\r\n  }\r\n\r\n  #clearAuthenticationInfo() {\r\n    this.#accessToken = '';\r\n    this.#accessTokenExpiresAt = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n    this.#csrfToken = generateRandomSecureToken(32);\r\n    this.#refreshResult = null;\r\n  }\r\n\r\n  #apiRequest({ method, url, accessTokenRequired, additionalHeaders, data, isRetry }: FrostAPIRequestArgumentTypes = {\r\n    method: HTTP_METHOD.GET,\r\n    url: '',\r\n    accessTokenRequired: false,\r\n    additionalHeaders: {},\r\n    data: {},\r\n    isRetry: false,\r\n  }): Promise<APIResult> {\r\n    // check if requested method is allowed\r\n    if (FrostAPI.#API_USED_METHOD.indexOf(method) == -1) { throw 'NOT_ALLOWED_METHOD'; }\r\n\r\n    // deep copy fetch option object\r\n    const reqFetchOption = JSON.parse(JSON.stringify(this.#DEFAULT_FETCH_OPTION));\r\n    reqFetchOption.method = method;\r\n\r\n    // only add body on POST/PATCH/PUT methods\r\n    if ([HTTP_METHOD.POST, HTTP_METHOD.PATCH, HTTP_METHOD.PUT].indexOf(method) > -1)\r\n      reqFetchOption.body = JSON.stringify(data);\r\n\r\n    // always send X-Csrf-Token. This won't be a security hole.\r\n    reqFetchOption.headers['X-Csrf-Token'] = this.#csrfToken;\r\n    // add access token on header if accessTokenRequired is true\r\n    if (accessTokenRequired) {\r\n      reqFetchOption.headers['Authorization'] = 'Bearer ' + this.#accessToken;\r\n    }\r\n\r\n    if (url.includes('account') || url.includes('admin')) {\r\n      reqFetchOption.credentials = 'include';\r\n    }\r\n\r\n    if (additionalHeaders)\r\n      for (const [key, value] of Object.entries(additionalHeaders))\r\n        reqFetchOption.headers[key] = value;\r\n\r\n    // // We need to handle HEAD method separately as this method doesn't return any body.\r\n    // if (method === HTTP_METHOD.HEAD) {\r\n    //   return fetch(this.#BASE_URL + url, reqFetchOption).then((response) => {\r\n\r\n    //   });\r\n    // }\r\n\r\n    return fetch(this.#BASE_URL + url, reqFetchOption).then((response) => {\r\n      if (!response) {\r\n        // How is this possible???\r\n        throw new FrostError(\r\n          '서버가 응답이 없어요,\\n잠시 후에 다시 시도해주세요.',\r\n          'fetchResult 객체가 undefined 또는 null입니다.', -1, false, undefined, undefined, url);\r\n      } else if (200 <= response.status && response.status <= 399) {  // this returns response.json()\r\n        // SUCCESS\r\n\r\n        if (response.status === 204) { // resource.deleted\r\n          // As 204 response means that resource is deleted and response does not include a response body,\r\n          // we need to make and return a fake response object.\r\n          return {\r\n            header: response.headers,\r\n            body: {\r\n              success: true,\r\n              code: 204,\r\n              subCode: 'resource.deleted',\r\n              message: 'Resource successfully deleted',\r\n            },\r\n          };\r\n        }\r\n\r\n        return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n      } else if (400 <= response.status && response.status <= 499) {\r\n        if (response.status === 401) {  // this \"possibly\" returns response.json()\r\n          // This code can be returned on both resource and account related routes,\r\n          // and we need to handle those separately.\r\n          //\r\n          // Possible subCodes:\r\n          // > wrong password / account locked / account deactivated (== maybe one of account related routes?)\r\n          //    - These will be raised when we signing in.\r\n          //      We need to throw a proper FrostError.\r\n          // > token not given / token expired / token invalid\r\n          //    - We need to try refreshing access token and retry this.\r\n          //      If access token refresh fails, then raise errors.\r\n          //\r\n          // If the error-occurred-request is related to resource routes,\r\n          // then we'll refresh access token and and retry the request.\r\n          // and if it fails, then we'll throw FrostError.\r\n          //\r\n          // If the error-occurred-request is related to account routes,\r\n          // then we need to parse subCode, so we'll handle this error on second stage.\r\n          if (!url.startsWith('account/')) {\r\n            if (!isRetry)\r\n              return this.refreshAuthentications(true).then((api) => api.#apiRequest({\r\n                method: method,\r\n                url: url,\r\n                accessTokenRequired: accessTokenRequired,\r\n                additionalHeaders: additionalHeaders, data: data,\r\n                isRetry: true,\r\n              }));\r\n            throw new FrostError(\r\n              '인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.',\r\n              '인증 실패 & url !== account/refresh\\n' + `${url} | ${method} | response.status === ${response.status}`,\r\n              response.status, false, undefined, undefined, url);\r\n          }\r\n\r\n          return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n        } else if (FrostAPI.RETURNABLE_ERROR.includes(response.status)) {\r\n          // this \"possibly\" returns response.json().\r\n          // See RETURNABLE_ERROR for more details.\r\n          return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n        } else if (response.status === 403) {\r\n          // Requested action was forbidden\r\n          throw new FrostError(\r\n            '해당 동작에 대한 권한이 없습니다.\\n만약 권한을 가지고 계셔야 한다면 관리자에게 연락 부탁드립니다.',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 405) {\r\n          // Method not permitted\r\n          throw new FrostError(\r\n            '잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 415) {\r\n          // requested response content-type not supported\r\n          throw new FrostError(\r\n            '잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 429) {\r\n          throw new FrostError(\r\n            '요청이 너무 빈번해요,\\n조금 천천히 진행해주세요.',\r\n            `429 rate limit`, 429, false, undefined, undefined, url);\r\n        } else {\r\n          // unknown client-fault error\r\n          throw new FrostError(\r\n            '알 수 없는 문제가 발생하였습니다,\\n10분 후 다시 시도해주세요.',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        }\r\n      } else {  // HTTP status code is more than 500(server error)\r\n        throw new FrostError(\r\n          '서버가 잠시 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n          `statusCode가 ${response.status}입니다.`, response.status,\r\n          false, undefined, undefined, url);\r\n      }\r\n\r\n      // This is just for type-checking, response.status won't be less than 200, right?\r\n      // ...right? please... no......\r\n      return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n    }).then((response: { header: Record<string, unknown>, body: Record<string, unknown> } | APIResult) => {\r\n      if (response instanceof APIResult)\r\n        return response;\r\n\r\n      const apiResult = new APIResult(response);\r\n      if (apiResult.code === 404 && apiResult.subCode === 'http.not_found') {\r\n        throw new FrostError(\r\n          '무엇을 할 지 모르는 요청이에요,\\n사이트 개발자에게 문의해주세요ㅠㅜ',\r\n          'http.not_found입니다.', apiResult.code, false, apiResult, undefined, url);\r\n      }\r\n      // else if (apiResult.code === 401) {\r\n      //   // Possible subCodes:\r\n      //   // > token not given / token expired / token invalid\r\n      //   //   (== resource related routes, !!!ALREADY HANDLED!!!)\r\n      //   //    - We need to try refreshing access token and retry this.\r\n      //   //      If access token refresh fails, then raise errors.\r\n      //   // > wrong password / account locked / account deactivated\r\n      //   //   (== account related routes, we need to handle this here.)\r\n      //   //    - These will be raised when we signing in.\r\n      //   //      We need to throw a proper FrostError.\r\n      //   throw new FrostError(\r\n      //     '로그인을 할 수 없어요.',\r\n      //     '인증 실패 & url !== account/refresh\\n' + `${url} | ${method} | response.status === ${response.status}`,\r\n      //     apiResult.code, true, apiResult, undefined, url);\r\n      // }\r\n\r\n      return apiResult;\r\n    }).catch((reason) => {\r\n      // catch all exceptions and change it to FrostError\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n          `on FrostAPI.#apiRequest -> reason = ${reason}`, -1, false, undefined, undefined, url);\r\n      }\r\n    });\r\n  }\r\n\r\n  isSignedInWithoutAsync() {\r\n    return (this.#accessToken) ? true : false;\r\n  }\r\n\r\n  isSignedIn(checkNetwork = false) {\r\n    if (checkNetwork)\r\n      return this.refreshAuthentications().then((_) => true, (_) => false);\r\n\r\n    return Promise.resolve((this.#accessToken) ? true : false);\r\n  }\r\n\r\n  signUp(id: string, email: string, password: string, nickname: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signup',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { id: id, pw: password, nick: nickname, email: email }\r\n    }).then((apiResult) => {\r\n      if (apiResult.success) {\r\n        if (apiResult.subCode === 'user.sign_up_but_need_email_verification') {\r\n          // Server responsed with success,\r\n          // but there won't be a user info as user can sign-in after email verification.\r\n          return this;\r\n        }\r\n\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        return this;\r\n      }\r\n\r\n      // We need to generate error message from the subcode.\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      switch (apiResult.subCode) {\r\n        case 'user.already_used': {\r\n          const duplicatedItems: string = apiResult.data.duplicate[0];\r\n          let duplicatedItemsKor = '';\r\n          switch (duplicatedItems) {\r\n            case 'email':\r\n              errorFieldName = 'email';\r\n              duplicatedItemsKor = '이메일은';\r\n              break;\r\n            case 'id':\r\n              errorFieldName = 'id';\r\n              duplicatedItemsKor = '아이디는';\r\n              break;\r\n            case 'nick':\r\n            case 'nickname':\r\n              errorFieldName = 'nick';\r\n              duplicatedItemsKor = '별명은';\r\n              break;\r\n            case 'pw':\r\n            case 'password':\r\n              // WTF??? HOW??????\r\n              errorFieldName = 'pw';\r\n              duplicatedItemsKor = '비밀번호는';\r\n              break;\r\n            default:\r\n              duplicatedItemsKor = '정보는';\r\n              break;\r\n          }\r\n          errorMsg = `입력하신 ${duplicatedItemsKor} 이미 다른 계정에서 사용 중이에요.`;\r\n          break;\r\n        }\r\n        case 'request.body.bad_semantics': {\r\n          // errorMsg = '입력하신 정보로 회원가입을 하실 수 없어요.\\n';\r\n          const badSemanticsReason: Record<string, unknown> = apiResult.data.bad_semantics[0];\r\n          if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'email')) {\r\n            errorFieldName = 'email';\r\n            errorMsg = '올바른 이메일 형식이 아니에요.';\r\n          } else if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'pw')) {\r\n            const pwBadSemanticsReason: string = badSemanticsReason.pw;\r\n            switch (pwBadSemanticsReason) {\r\n              case 'TOO_SHORT':\r\n                errorMsg = '비밀번호가 너무 짧아요,\\n'; break;\r\n              case 'TOO_LONG':\r\n                errorMsg = '1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n'; break;\r\n              case 'NEED_MORE_CHAR_TYPE':\r\n                errorMsg = '비밀번호가 너무 단순해요,\\n'; break;\r\n              case 'FORBIDDEN_CHAR':\r\n                errorMsg = '비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n'; break;\r\n              case 'PW_REUSED_ON_ID_EMAIL_NICK':\r\n                errorMsg = '비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n'; break;\r\n              default:\r\n                errorMsg = '사용할 수 있는 비밀번호가 아니에요,\\n'; break;\r\n            }\r\n            errorFieldName = 'pw';\r\n            // errorMsg += '비밀번호는 영문 대소문자/숫자/특수문자 중 2가지를 혼용해서 최소 9자로 입력해주세요.';\r\n          } else if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'id')) {\r\n            const idBadSemanticsReason: string = badSemanticsReason.id;\r\n            switch (idBadSemanticsReason) {\r\n              case 'TOO_SHORT':\r\n                errorMsg = '아이디가 너무 짧아요,\\n'; break;\r\n              case 'TOO_LONG':\r\n                errorMsg = '아이디가 너무 길어요,\\n'; break;\r\n              case 'FORBIDDEN_CHAR':\r\n                errorMsg = '아이디에 사용할 수 없는 문자가 들어있어요,\\n'; break;\r\n              default:\r\n                errorMsg = '사용할 수 있는 아이디가 아니에요,\\n'; break;\r\n            }\r\n            errorFieldName = 'id';\r\n            errorMsg += '아이디는 4 ~ 47자 사이의 길이로 입력해주세요.';\r\n          } else {\r\n            errorMsg += '정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';\r\n          }\r\n          break;\r\n        }\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        `account/signup=>response.success=false\\ncode = ${apiResult.code}\\nsubCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName, 'account/signup');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  signIn(idOrEmail: string, password: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signin',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { id: idOrEmail, pw: password },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        this.userData\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/signin=>!apiResult`, -1, true, undefined, undefined, 'account/signin');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'pw'\r\n          errorMsg = '비밀번호가 맞지 않아요.\\n';\r\n          errorMsg += `(${apiResult.data.left_chance}번을 더 틀리시면 계정이 잠겨요.)`;\r\n          break;\r\n        case 'user.locked':\r\n          errorMsg = '계정이 잠겼습니다, 관리자에게 연락해주세요.\\n';\r\n          errorMsg += `(잠긴 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.deactivated':\r\n          errorMsg = '계정이 비활성화되었습니다, 관리자에게 연락해주세요.\\n'\r\n          errorMsg += `(비활성화된 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.email_not_verified':\r\n          errorMsg = '아직 가입 시 적으신 메일 주소를 인증하지 않으셨어요,\\n메일함을 확인 후 메일 인증을 진행해주세요.';\r\n          break;\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후 새로고침을 한 후에 다시 시도해주세요.';\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        `account/signin=>response.success=false\\ncode = ${apiResult.code}\\nsubCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName, 'account/signin');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  signOut() {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signout',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { signout: 'OK' },\r\n    }).then(\r\n      () => {\r\n        // Actually, this action won't fail, except when the server is dead.\r\n        // Just reset the csrf token and access token.\r\n        this.#clearAuthenticationInfo();\r\n        return this;\r\n      });\r\n  }\r\n\r\n  refreshAuthentications(forceRefresh = false) {\r\n    if (!forceRefresh && this.#accessToken && this.#accessTokenExpiresAt > new Date()) {\r\n      return Promise.resolve(this);\r\n    }\r\n\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/refresh',\r\n      accessTokenRequired: false\r\n    }\r\n    ).then((apiResult) => {\r\n      if (apiResult.success) {\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        return this;\r\n      }\r\n      throw new FrostError(\r\n        '인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.',\r\n        `account/refresh=>response.success = false입니다. code = ${apiResult.code}`,\r\n        400, true, apiResult, undefined, 'account/refresh');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  changePassword(currentPw: string, newPw: string, newPwReType: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/change-password',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {},\r\n      data: {\r\n        original_password: currentPw,\r\n        new_password: newPw,\r\n        new_password_check: newPwReType,\r\n      },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/change-password=>!apiResult`, -1, true, undefined, undefined,\r\n          'account/change-password');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'currentPw';\r\n          errorMsg = '현재 사용 중인 비밀번호가 맞지 않아요,\\n다시 시도해주세요.';\r\n          break;\r\n        case 'password.change_failed': {\r\n          // apiResult.data.reason can be...\r\n          // RETYPE_MISMATCH, TOO_SHORT, TOO_LONG, NEED_MORE_CHAR_TYPE, FORBIDDEN_CHAR\r\n          const reasonType: string = apiResult.data.reason;\r\n          switch (reasonType) {\r\n            case 'RETYPE_MISMATCH':\r\n              errorFieldName = 'newPwReType';\r\n              errorMsg = '위에 입력하신 새 비밀번호와 일치하지 않아요,\\n새 비밀번호를 다시 입력해주세요.\\n';\r\n              break;\r\n            case 'TOO_SHORT':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 너무 짧아요,\\n';\r\n              break;\r\n            case 'TOO_LONG':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n';\r\n              break;\r\n            case 'NEED_MORE_CHAR_TYPE':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 너무 단순해요,\\n';\r\n              break;\r\n            case 'FORBIDDEN_CHAR':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n';\r\n              break;\r\n            case 'PW_REUSED_ON_ID_EMAIL_NICK':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n';\r\n              break;\r\n            default:\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '사용할 수 있는 비밀번호가 아니에요,\\n';\r\n              break;\r\n          }\r\n          break;\r\n        }\r\n\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n          break;\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        'account/change-password=>\\n'\r\n        + 'response.success=false\\n'\r\n        + `code = ${apiResult.code}\\n`\r\n        + `subCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName,\r\n        'account/change-password');\r\n    }).catch((reason) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/change-password=>${reason}`, -1, true, undefined, undefined,\r\n          'account/change-password');\r\n      }\r\n    });\r\n  }\r\n\r\n  deactivate(email: string, pw: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/deactivate',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { email: email, password: pw, },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        // User will be signed out if account deactivation succeed.\r\n        this.#clearAuthenticationInfo();\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/deactivate=>!apiResult`, -1, true, undefined, undefined,\r\n          'account/deactivate');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.info_mismatch':\r\n          errorMsg = '계정 정보가 다른 곳에서 변경된 것 같아요,\\n새로고침 후 다시 시도해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'pw';\r\n          errorMsg = '비밀번호가 맞지 않아요,\\n다시 시도해주세요.';\r\n          break;\r\n        case 'user.locked':\r\n          errorMsg = '계정이 잠겨있어서 비활성화를 할 수 없습니다,\\n계정을 잠근 상태에서 해제한 후 다시 시도해주세요.\\n';\r\n          errorMsg += `(계정이 잠긴 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.deactivated':\r\n          errorMsg = '계정이 이미 비활성화가 되어있습니다,\\n이용해주셔서 감사합니다!\\n';\r\n          errorMsg += `(계정이 비활성화된 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n          break;\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        'account/deactivate=>\\n'\r\n        + 'response.success=false\\n'\r\n        + `code = ${apiResult.code}\\n`\r\n        + `subCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName,\r\n        'account/deactivate');\r\n    }).catch((reason) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/deactivate=>${reason}`, -1, true, undefined, undefined,\r\n          'account/deactivate');\r\n      }\r\n    });\r\n  }\r\n\r\n  modifyAccountInfo(newAccountData: Partial<FrostAccountModifiableInfoTypes>, refreshAfterSuccess = false) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {},\r\n      data: newAccountData,\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        if (refreshAfterSuccess) {\r\n          return this.refreshAuthentications(true);\r\n        } else {\r\n          return this;\r\n        }\r\n      } else {\r\n        throw new FrostError(\r\n          '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.',\r\n          'account/=>\\n'\r\n          + 'response.success=false\\n'\r\n          + `code = ${apiResult.code}\\n`\r\n          + `subCode=${apiResult.subCode}`,\r\n          apiResult.code, false,\r\n          apiResult, undefined, 'account');\r\n      }\r\n    }).catch((reason: FrostError) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError' && reason.apiResponse) {\r\n        let errorMsg = '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.';\r\n        let errorFieldName = '';\r\n        const SERVER_CLIENT_FIELD_MAP = {\r\n          id: 'id', nickname: 'nick',\r\n          // We won't support those two yet.\r\n          private: '', description: '',\r\n        }\r\n\r\n        switch (reason.apiResponse.subCode) {\r\n          case 'user.not_found':\r\n            errorMsg = '사용자를 찾을 수 없습니다,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n          case 'user.already_used': {\r\n            const duplicatedItems: string = reason.apiResponse.data.duplicate[0];\r\n            let duplicatedItemsKor = '';\r\n            switch (duplicatedItems) {\r\n              case 'email':\r\n                errorFieldName = 'email';\r\n                duplicatedItemsKor = '이메일은';\r\n                break;\r\n              case 'id':\r\n                errorFieldName = 'id';\r\n                duplicatedItemsKor = '아이디는';\r\n                break;\r\n              case 'nick':\r\n              case 'nickname':\r\n                errorFieldName = 'nick';\r\n                duplicatedItemsKor = '별명은';\r\n                break;\r\n              case 'pw':\r\n              case 'password':\r\n                // WTF??? HOW??????\r\n                errorFieldName = 'pw';\r\n                duplicatedItemsKor = '비밀번호는';\r\n                break;\r\n              default:\r\n                duplicatedItemsKor = '정보는';\r\n                break;\r\n            }\r\n            errorMsg = `입력하신 ${duplicatedItemsKor} 이미 다른 계정에서 사용 중이에요.`;\r\n            break;\r\n          }\r\n          case 'request.body.empty':\r\n            errorMsg = '계정의 새 정보가 서버에 제대로 닿지 않았어요,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n          case 'request.body.bad_semantics': {\r\n            const badSemanticsData: {\r\n              field: string;\r\n              reason: string;\r\n            }[] = reason.apiResponse.data;\r\n            const parsedBadSemanticsData = badSemanticsData.forEach((value, index, array) => {\r\n              const isThisTheLastItem = (array.length - 1) === index;\r\n              // Fuck, FrostError can pass only one error field.\r\n              // Just return a first error field.\r\n              const currentErrorFieldName = SERVER_CLIENT_FIELD_MAP[value.field];\r\n\r\n              if (isThisTheLastItem && !currentErrorFieldName && !errorFieldName) {\r\n                // If all error fields are not supported and if there's no field to show error message,\r\n                // then just show a default message.\r\n                errorMsg = '서버에 보낸 계정의 새 정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';\r\n                return;\r\n              }\r\n              errorFieldName = currentErrorFieldName;\r\n              errorMsg = '허용되지 않는 문자가 포함되어 있어요,\\n다시 입력해주세요.';\r\n            });\r\n            break;\r\n          }\r\n          default:\r\n            errorMsg = '알 수 없는 문제가 발생했습니다,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n        }\r\n\r\n        throw new FrostError(\r\n          errorMsg,\r\n          'account/=>\\n'\r\n          + 'response.success=false\\n'\r\n          + `code = ${reason.apiResponse.code}\\n`\r\n          + `subCode=${reason.apiResponse.subCode}`,\r\n          reason.apiResponse.code, false, reason.apiResponse, errorFieldName, 'account');\r\n      } else {\r\n        throw new FrostError(\r\n          '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.',\r\n          `account=>${reason}`, -1, false, undefined, undefined, 'account');\r\n      }\r\n    });\r\n  }\r\n\r\n  get userID() {\r\n    if (!this.#refreshResult?.user)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    return this.#refreshResult.user.id;\r\n  }\r\n\r\n  get userData() {\r\n    if (!this.#refreshResult?.user)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    return this.#refreshResult.user;\r\n  }\r\n\r\n  get roles() {\r\n    if (!this.#accessToken)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    const result: Array<{ [roleName: string]: string | boolean; }> = [];\r\n    try {\r\n      const token = JSON.parse(atob(this.#accessToken.split('.')[1]));\r\n      JSON.parse(token.role).forEach((rolePart: string) => {\r\n        if (rolePart === 'admin') return;\r\n        result.push(role2Object(rolePart));\r\n      });\r\n    } catch (e) {\r\n      /* tslint:disable:no-empty */\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  head(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.HEAD,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n  get(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.GET,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n  post(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  put(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.PUT,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  patch(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.PATCH,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  delete(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.DELETE,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n}\r\n\r\nexport default FrostAPI;\r\n",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\network\\api_response.ts",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\common\\error.ts",["511"],"// (c) MUsoftware 2022\r\n'use strict';\r\n\r\nimport { APIResult } from \"../network/api_response\";\r\n\r\nexport class FrostError extends Error {\r\n  message: string;\r\n  debugMessage: string;\r\n  date: Date;\r\n  httpRespCode: number = -1;\r\n  accessTokenInvalidation: boolean = false;\r\n  route?: string;\r\n  apiResponse?: APIResult | null;\r\n  fieldName?: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    debugMessage: string,\r\n    httpRespCode: number,\r\n    accessTokenInvalidation = false,\r\n    apiResponse?: APIResult,\r\n    fieldName?: string,\r\n    route = '',\r\n    ...params: any[]) {\r\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n    super(...params);\r\n\r\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, FrostError);\r\n    }\r\n\r\n    // Custom debugging information\r\n    this.message = message\r\n    this.debugMessage = debugMessage;\r\n    this.httpRespCode = httpRespCode;\r\n    this.accessTokenInvalidation = accessTokenInvalidation;\r\n    this.route = route;\r\n    this.apiResponse = apiResponse;\r\n    this.fieldName = fieldName;\r\n    this.date = new Date();\r\n  }\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\signup.jsx",["512"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { isEmail } from 'validator';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport {\r\n  signUpActionCreatorAsync,\r\n  removeFrostErrorFromStateActionCreator,\r\n} from 'src/redux/modules/account/action_creator';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n  const strType: string[] = [];\r\n\r\n  for (let i = 0; i < str.length; i++) {\r\n    const currentChar = str.charAt(i);\r\n    if (currentChar >= '0' && currentChar <= '9') {\r\n      strType.push('n'); // number\r\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n      strType.push('l'); // lower\r\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n      strType.push('u'); // upper\r\n    } else if (currentChar >= ' ' && currentChar <= '~') {\r\n      strType.push('s'); // special char\r\n    } else {\r\n      strType.push('e'); // error or unknown\r\n    }\r\n  }\r\n  return new Set(strType);\r\n};\r\n\r\nexport const AccountSignUp = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디를 입력해주세요.',\r\n        };\r\n      } else if (str.length < 4) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n        };\r\n      } else if (48 < str.length) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e') || strType.has('s')) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    email: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '이메일을 입력해주세요.',\r\n        };\r\n      }\r\n      if (!isEmail(str)) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '올바르지 않은 이메일 형식이에요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        emailNotUsableReason: null,\r\n      };\r\n    },\r\n    nick: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          nickNotUsableReason: '별칭을 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        nickNotUsableReason: null,\r\n      };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '사용하실 비밀번호를 입력해주세요,',\r\n        };\r\n      } else if (str.length < 8) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '길이가 너무 짧아요,',\r\n        };\r\n      } else if (1024 < str.length) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: <>\r\n            {`비밀번호로 ${str.length}자는 너어어어무 길어요!`}<br />\r\n            비밀번호는 1024자 이하로 해 주시고,\r\n          </>\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e')) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호로 사용할 수 없는 글자가 포함되어 있어요,',\r\n        };\r\n      } else if (strType.size < 2) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호가 너무 단순해요,'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        pwNotUsableReason: null,\r\n      };\r\n    },\r\n    pwReType: (pwStr: string, pwReTypeStr: string) => {\r\n      if (!pwReTypeStr) {\r\n        return {\r\n          success: false,\r\n          pwReTypeNotUsableReason: '위에 입력하신 비밀번호를 한번 더 입력해주세요.',\r\n        };\r\n      } else if (pwStr === pwReTypeStr) {\r\n        return {\r\n          success: true,\r\n          pwReTypeNotUsableReason: null,\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        pwReTypeNotUsableReason: '위에 입력하신 비밀번호와 일치하지 않아요.',\r\n      };\r\n    },\r\n  };\r\n  const FrostErrorToSignUpError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signUpFailedReason: null };\r\n    if (err.route !== 'account/signup')\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signUpFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'signUpFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [signUpFormData, setSignUpFormData] = useState({\r\n    wasUserSignedInWhenPageLoad: undefined,\r\n    isSignedUpRequestFired: false,\r\n    isProcessing: accountInfo?.isFetching ?? false,\r\n\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n    pwReTypeTextFieldValue: '',\r\n    emailTextFieldValue: '',\r\n    nickTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    nickNotUsableReason: null,\r\n    emailNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    pwReTypeNotUsableReasonleReason: null,\r\n    signUpFailedReason: null,\r\n\r\n    ...(FrostErrorToSignUpError(accountInfo?.frostErrorObj)),\r\n  });\r\n\r\n  useEffect(() => {\r\n    // We need this to remove FrostErrorObj in state when this component mounts.\r\n    dispatch(removeFrostErrorFromStateActionCreator());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      ...(signUpFormData.isSignedUpRequestFired ? FrostErrorToSignUpError(accountInfo?.frostErrorObj) : {}),\r\n      isProcessing: accountInfo?.isFetching ?? false,\r\n      wasUserSignedInWhenPageLoad: ((signUpFormData.wasUserSignedInWhenPageLoad === undefined)\r\n        ? accountInfo?.isSignedIn : signUpFormData.wasUserSignedInWhenPageLoad),\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  if (signUpFormData.wasUserSignedInWhenPageLoad === undefined) {\r\n    // This is loading state, wait for the new state.\r\n  } else if (signUpFormData.wasUserSignedInWhenPageLoad) {\r\n    // Go to home if user is already on signed in state when page loads.\r\n    navigate('/');\r\n  } else if (!signUpFormData.wasUserSignedInWhenPageLoad && accountInfo?.isSignedIn) {\r\n    // Go to welcome page when user successfully signed up and no mail verification required.\r\n    navigate('/account/welcome-to-mudev', { state: { email: signUpFormData.emailTextFieldValue, } });\r\n  } else if (!signUpFormData.wasUserSignedInWhenPageLoad && accountInfo?.isSignedUp) {\r\n    // Go to mail verification info page when user successfully signed up and mail verification required.\r\n    navigate('/account/welcome-to-mudev-mail', { state: { email: signUpFormData.emailTextFieldValue, } });\r\n  }\r\n\r\n  const handleInput = (fieldName: string, fieldValue: string) => {\r\n    const fieldStateKey = `${fieldName}TextFieldValue`;\r\n    const checkerResult = (fieldName === 'pwReType')\r\n      ? InputChecker[fieldName](signUpFormData.pwTextFieldValue, fieldValue)\r\n      : InputChecker[fieldName](fieldValue);\r\n    delete (checkerResult.success);\r\n\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      ...checkerResult,\r\n      [fieldStateKey]: fieldValue,\r\n    });\r\n  };\r\n  const handleEnterInput = (e) => {\r\n    if (e.type === 'keypress' && e.charCode === 13)\r\n      trySignUp();\r\n  };\r\n  const trySignUp = () => {\r\n    // Disable all actions\r\n    let newSignUpFormData = {\r\n      ...signUpFormData,\r\n      isSignedUpRequestFired: true,\r\n      isProcessing: true,\r\n    }\r\n    for (var key in newSignUpFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignUpFormData[key]) === 'string')\r\n        newSignUpFormData[key] = newSignUpFormData[key].trim();\r\n    setSignUpFormData(newSignUpFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'nick', 'email', 'pw', 'pwReType'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = newSignUpFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = (fieldName === 'pwReType')\r\n        ? InputChecker[fieldName](newSignUpFormData.pwTextFieldValue, fieldValue)\r\n        : InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignUpFormData = { ...newSignUpFormData, ...resultFormCheckData, }\r\n    setSignUpFormData(newSignUpFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignUpFormData = { ...newSignUpFormData, isProcessing: false, }\r\n      setSignUpFormData(newSignUpFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signUpActionCreatorAsync(\r\n        newSignUpFormData.idTextFieldValue,\r\n        newSignUpFormData.emailTextFieldValue,\r\n        newSignUpFormData.nickTextFieldValue,\r\n        newSignUpFormData.pwTextFieldValue)\r\n    );\r\n\r\n    return false;\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 만들기</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpId'>\r\n          <Form.Label>아이디</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='아이디를 입력해주세요'\r\n            autoComplete='username'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.idTextFieldValue}\r\n            onChange={(event) => handleInput('id', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.idNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpNick'>\r\n          <Form.Label>별칭</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='별칭을 입력해주세요'\r\n            autoComplete='nickname'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.nickTextFieldValue}\r\n            onChange={(event) => handleInput('nick', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.nickNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpEmail'>\r\n          <Form.Label>이메일</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='someone@example.com'\r\n            autoComplete='email'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.emailTextFieldValue}\r\n            onChange={(event) => handleInput('email', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.emailNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='비밀번호'\r\n            autoComplete='new-password'\r\n\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={(event) => handleInput('pw', event.target.value)}\r\n          />\r\n          <PHFormText defaultChildren='비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.'>\r\n            {signUpFormData.pwNotUsableReason\r\n              ? <>\r\n                {signUpFormData.pwNotUsableReason}<br />\r\n                비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.\r\n              </> : ''}\r\n          </PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPasswordReType'>\r\n          <Form.Label>비밀번호 확인</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='위에 입력하신 비밀번호를 다시 입력해주세요'\r\n            autoComplete='new-password'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwReTypeTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={(event) => handleInput('pwReType', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.pwReTypeNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText className='accountAsideFormGroup'>{signUpFormData.signUpFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-secondary'\r\n            style={{\r\n              color: 'var(--color)',\r\n              border: '1px solid var(--color)',\r\n            }}\r\n            disabled={signUpFormData.isProcessing}\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            // type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignUp}\r\n            showSpinner={signUpFormData.isProcessing}>\r\n            계정 만들기\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\signin.jsx",["513"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport {\r\n  signInActionCreatorAsync,\r\n  removeFrostErrorFromStateActionCreator,\r\n} from 'src/redux/modules/account/action_creator';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nexport const AccountSignIn = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str)\r\n        return { success: false, idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.', };\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str)\r\n        return { success: false, pwNotUsableReason: '비밀번호를 입력해주세요.', };\r\n\r\n      return { success: true, pwNotUsableReason: null, };\r\n    },\r\n  };\r\n\r\n  const FrostErrorToSignInError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signInFailedReason: null };\r\n    if (err.route !== 'account/signin')\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'signInFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [signInFormData, setSignInFormData] = useState({\r\n    isProcessing: accountInfo?.isFetching ?? false,\r\n\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    signInFailedReason: null,\r\n\r\n    ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSignInFormData({\r\n      ...signInFormData,\r\n      ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n      isProcessing: accountInfo?.isFetching ?? false,\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  // We need this to remove FrostErrorObj in state when this component mounts.\r\n  useEffect(() => dispatch(removeFrostErrorFromStateActionCreator()), []);\r\n\r\n  if (accountInfo?.isSignedIn) // Go to home if user is signed in state.\r\n    navigate('/');\r\n  const handleEnterInput = (e) => {\r\n    if (e.type === 'keypress' && e.charCode === 13)\r\n      trySignIn();\r\n  };\r\n  const trySignIn = () => {\r\n    // Disable all actions\r\n    let newSignInFormData = { ...signInFormData, isProcessing: true, };\r\n    for (var key in newSignInFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignInFormData[key]) === 'string')\r\n        newSignInFormData[key] = newSignInFormData[key].trim();\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'pw'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignInFormData = { ...newSignInFormData, ...resultFormCheckData, }\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignInFormData = { ...newSignInFormData, isProcessing: false, }\r\n      setSignInFormData(newSignInFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signInActionCreatorAsync(\r\n        newSignInFormData.idTextFieldValue,\r\n        newSignInFormData.pwTextFieldValue)\r\n    );\r\n\r\n    return false;\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>로그인</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>아이디 또는 이메일</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            autoComplete='username'\r\n            placeholder='ID / Email'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.idTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                idTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.idNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            autoComplete='current-password'\r\n            placeholder='비밀번호'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.pwTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                pwTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.pwNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText showOnlyNeeded className='accountAsideFormGroup'>{signInFormData.signInFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-secondary'\r\n            style={{\r\n              color: 'var(--color)',\r\n              border: '1px solid var(--color)',\r\n            }}\r\n            disabled={signInFormData.isProcessing}\r\n            onClick={() => navigate('/account/signup')}>\r\n            계정 만들기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignIn}\r\n            showSpinner={signInFormData.isProcessing}>\r\n            로그인\r\n          </PHSpinnerButton>\r\n        </div><br />\r\n        <a\r\n          className='signInGoToResetPassword'\r\n          href='#'\r\n          onClick={(!signInFormData.isProcessing) ? () => navigate('/account/reset-password') : () => {/**/ }}>\r\n          비밀번호를 잊어버리셨나요?\r\n        </a>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\resetPassword.jsx",["514"],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nexport const AccountPasswordReset = () => {\r\n  const navigate = useNavigate();\r\n  const [accountPasswordResetFormData, setAccountPasswordResetFormData] = useState({\r\n    isProcessing: false,\r\n  });\r\n\r\n  let descriptionString = '해당 이메일 주소와 연결된 계정이 있으면 계정의 비밀번호를 초기화할 수 있는 메일을 보내드려요.\\n';\r\n  descriptionString += '메일이 전송되는데 30분 정도 걸릴 수 있어요.';\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>비밀번호 초기화</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>가입 시 사용한 이메일 주소</Form.Label>\r\n          <PHFormText defaultChildren={descriptionString}></PHFormText><br />\r\n          <Form.Control type=\"email\" placeholder=\"someone@example.com\" /><br />\r\n        </Form.Group>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-secondary'\r\n            style={{\r\n              color: 'var(--color)',\r\n              border: '1px solid var(--color)',\r\n            }}\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={() => {\r\n              setAccountPasswordResetFormData({\r\n                ...accountPasswordResetFormData,\r\n                isProcessing: true,\r\n              });\r\n              setTimeout(() => {\r\n                setAccountPasswordResetFormData({\r\n                  ...accountPasswordResetFormData,\r\n                  isProcessing: false,\r\n                });\r\n                alert('해당 이메일 주소와 연결된 계정이 있다면,\\n비밀번호 초기화 메일이 전송돼요.\\n해당 메일에서 계속 진행해주세요!');\r\n                navigate('/account/signin');\r\n              }, 5000);\r\n            }}\r\n            showSpinner={accountPasswordResetFormData.isProcessing}>\r\n            비밀번호 초기화\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\topbar.jsx",["515","516"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Navbar, NavDropdown, Spinner, Form, FormCheck } from 'react-bootstrap';\r\n\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccountCircle } from '@mdi/js';\r\n\r\nimport './topbar.css';\r\n// import TopBarLogo from './logo_hanshin.svg';\r\nimport TopBarLogo from './mu_logo.png';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport {\r\n  refreshAccessTokenActionCreatorAsync,\r\n  signOutActionCreatorAsync\r\n} from 'src/redux/modules/account/action_creator';\r\n\r\nexport const TopBar: React.FC = (props: { disableBlur?: boolean; }) => {\r\n\r\n  const navigate = useNavigate();\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const [topBarState, setTopBarState] = useState({\r\n    shouldDropdownShow: false,\r\n    darkModeState: 'light',\r\n    dummyVar: true,\r\n  });\r\n\r\n  const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n  const navBarContainerStyle = {\r\n    ...(\r\n      !props.disableBlur\r\n        ? { backdropFilter: 'blur(12px)', } : {}),\r\n  };\r\n\r\n  const toggleDropdownShown = () => {\r\n    setTopBarState(prevState => ({\r\n      ...prevState,\r\n      shouldDropdownShow: !(prevState.shouldDropdownShow),\r\n    }));\r\n  };\r\n\r\n  // Dark mode settings\r\n  const toggleDarkMode = (evt) => {\r\n    evt.stopPropagation();\r\n    const currentState = evt?.target?.checked ?? topBarState.darkModeState === 'dark';\r\n    const darkModeValue = currentState ? 'dark' : 'light';\r\n    localStorage.setItem('color-theme', darkModeValue);\r\n    document.documentElement.setAttribute('color-theme', darkModeValue);\r\n    setTopBarState(prevState => ({ ...prevState, darkModeState: darkModeValue, }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(refreshAccessTokenActionCreatorAsync());\r\n\r\n    const isUserColorTheme = localStorage.getItem('color-theme');\r\n    const isOsColorTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    const detectDarkMode = isUserColorTheme ? isUserColorTheme : isOsColorTheme;\r\n    localStorage.setItem('color-theme', detectDarkMode);\r\n    document.documentElement.setAttribute('color-theme', detectDarkMode);\r\n    setTopBarState(prevState => ({ ...prevState, darkModeState: detectDarkMode, }));\r\n  }, []);\r\n\r\n  const goToSignIn = () => navigate('/account/signin');\r\n  const goToSignOut = () => {\r\n    dispatch(signOutActionCreatorAsync());\r\n    navigate('/');\r\n  };\r\n\r\n\r\n  return <div className='muNavBarContainer' style={navBarContainerStyle}>\r\n    <Navbar className='muNavBar'>\r\n      <Navbar.Brand href='/' className='muNavBarLogoContainer'>\r\n        <img src={TopBarLogo} />\r\n      </Navbar.Brand>\r\n\r\n      <NavDropdown\r\n        align='end'\r\n        show={topBarState.shouldDropdownShow}\r\n        onClick={toggleDropdownShown}\r\n        title={<Icon path={mdiAccountCircle} />}\r\n        className='muNavBarDropdown' >\r\n        <NavDropdown.Header className='muNavBarDropdownItem'>{\r\n          accountInfo.isFetching\r\n            ? <div className='muNavBarDropdownAccountInfoLoadingContainer'>\r\n              <Spinner animation='border' role='status' size='sm'>\r\n                <span className='visually-hidden'>Loading...</span>\r\n              </Spinner>\r\n              <div className='muNavBarDropdownAccountInfoLoadingText'>\r\n                계정 정보 불러오는 중...\r\n              </div>\r\n            </div>\r\n            : accountInfo.isSignedIn ? `안녕하세요, ${accountInfo.nick}님!` : '로그인을 해 주세요!'\r\n        }</NavDropdown.Header>\r\n        {\r\n          accountInfo.isSignedIn && <>\r\n            <NavDropdown.Divider className='muNavBarDropdownItem' />\r\n            <NavDropdown.Item\r\n              className='muNavBarDropdownItem'\r\n              href='#'\r\n              onClick={() => navigate('/account/setting')}>\r\n              계정 설정\r\n            </NavDropdown.Item>\r\n          </>\r\n        }\r\n        <NavDropdown.Divider className='muNavBarDropdownItem' />\r\n        <NavDropdown.Item\r\n          className='muNavBarDropdownItem'\r\n          href='#'\r\n          onClick={accountInfo.isSignedIn ? goToSignOut : goToSignIn}>\r\n          {accountInfo.isSignedIn ? '로그아웃' : '로그인'}\r\n        </NavDropdown.Item>\r\n\r\n        <NavDropdown.Divider className='muNavBarDropdownItem' />\r\n        <NavDropdown.Item as='div' className='muNavBarDropdownItem' onClick={toggleDarkMode}>\r\n          <FormCheck\r\n            type='switch'\r\n            // className=\"muNavBarDarkmodeSwitch\"\r\n            id='muNavBarDarkModeSwitchID'\r\n            label=\"다크모드 설정\"\r\n            onChange={toggleDarkMode}\r\n            value={topBarState.darkModeState === 'dark'}\r\n            checked={topBarState.darkModeState === 'dark'}\r\n          />\r\n        </NavDropdown.Item>\r\n      </NavDropdown>\r\n\r\n    </Navbar>\r\n  </div>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\page\\pageListItem2.jsx",[],[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\page\\pageListItem3.jsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\reducer.ts",["517","518","519","520","521","522"],"import {\r\n  ACCOUNT_FETCHING,\r\n  SIGNED_IN,\r\n  SIGNED_OUT,\r\n  FORCE_SET_ACCOUNTINFO,\r\n} from './action';\r\nimport {\r\n  signInActionCreatorAsync,\r\n  signUpActionCreatorAsync,\r\n  signOutActionCreatorAsync,\r\n  refreshAccessTokenActionCreatorAsync,\r\n  accountDeactivateActionCreatorAsync,\r\n  setAccountInfoForceActionCreator,\r\n} from './action_creator';\r\nimport { AccountReducerType, AccountInfo } from './model';\r\n\r\nconst initialAccountState = new AccountInfo({ isSignedIn: undefined });\r\n\r\nexport const accountReducer: AccountReducerType = (state = initialAccountState, action) => {\r\n  switch (action.type) {\r\n    case ACCOUNT_FETCHING:\r\n      return new AccountInfo({\r\n        ...state,\r\n        isFetching: true,\r\n      });\r\n    case SIGNED_IN:\r\n      return action.accountInfo;\r\n    case SIGNED_OUT:\r\n      return action.accountInfo;\r\n    case FORCE_SET_ACCOUNTINFO:\r\n      return action.accountInfo;\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\model.ts",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\divider.tsx",["523"],"import React from 'react';\n\nconst HrStyle: React.CSSProperties = {\n  margin: 0 + 'px',\n  padding: 0 + 'px',\n  marginLeft: 1.5 + 'rem',\n  marginRight: 1.5 + 'rem',\n  width: 'calc(100% - 3rem)',\n  borderTop: 'var(--border)',\n}\n\ninterface DividerPropTypes {\n  style?: React.CSSProperties\n}\n\nexport const Divider = ({style}: DividerPropTypes) => <hr style={{ ...HrStyle, ...(style ?? {}) }} />;\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\util\\youtubeThumbnail.tsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muListRow.jsx",["524","525","526","527","528","529","530","531","532","533","534"],"// FIXME: MOVE THIS TO TSX\n/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-key */\n\nimport React from 'react';\nimport { PHButton } from \"./muButton\";\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\nconst LISTROW_DEFAULT_LABEL_WIDTH = 10;\nconst LISTROW_MIN_ITEM_WIDTH = 15;\n\n/** @type { React.CSSProperties } */\nconst TextCutStyle = {\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowStyle = {\n  marginLeft: 2 + 'vw',\n  marginRight: 2 + 'vw',\n  padding: 8 + 'px',\n\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n\n  borderBottom: '1px solid var(--border-color)',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowAsHeaderStyle = {\n  ...ListRowStyle,\n  fontWeight: 'bold',\n  borderTop: null,\n  borderBottom: '2px solid var(--border-color)',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowItemStyle = {\n  ...TextCutStyle,\n  flexGrow: 1,\n  width: 100 + '%',\n}\n\n\nclass ListRowLongTextType {\n  /** @type { String } */\n  text;\n\n  constructor(text) {\n    this.text = text;\n  }\n}\nconst L = ListRowLongTextType;\n\nclass ListRowInputType {\n  /** @type { String } */\n  name;\n  /** @type { String } */\n  placeholder;\n  /** @type { String } */\n  type;\n  /** @type { Function } */\n  onChange;\n  /** @type { Boolean } */\n  disabled;\n  /** @type { Boolean } */\n  readonly;\n  /** @type { Boolean } */\n  required;\n  /** @type { Object } */\n  state;\n\n  /** @type { String } */\n  innerValue;\n\n  /** @type { String } */\n  pattern;\n  /** @type { Number } */\n  minLength;\n  /** @type { Number } */\n  maxLength;\n\n  /** @type { Number } */\n  min;\n  /** @type { Number } */\n  max;\n  /** @type { Number } */\n  step;\n\n  /**\n   * Set visual variants of button.\n   * \"variant\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"variant\"'s possible cases are\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n  variant;\n  /**\n   * Set button size.\n   * \"size\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"size\"'s possible cases are\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  size;\n\n  constructor({\n    name,\n    placeholder = '',\n    type = 'text',\n    onChange = null,\n    disabled = false,\n    readonly = false,\n    required = false,\n    state = null,\n\n    innerValue = null,\n    pattern = null,\n    // min/max length of string input\n    minLength = null, maxLength = null,\n    // For input[type=\"number\"]\n    min = null, max = null, step = null,\n\n    // For input[type=(\"button\"|\"reset\"|\"submit\")]\n    variant = null, size = null,\n  }) {\n    this.name = name;\n    this.placeholder = placeholder;\n    this.type = type;\n    this.onChange = onChange;\n    this.disabled = disabled;\n    this.readonly = readonly;\n    this.required = required;\n    this.state = state;\n\n    this.innerValue = innerValue;\n\n    this.pattern = pattern;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n\n    this.min = min;\n    this.max = max;\n    this.step = step;\n\n    this.variant = variant;\n    this.size = size;\n\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowInputType(param);\n  }\n}\n\nclass ListRowButtonType {\n  /** @type { String } */\n  name;\n  /** @type { String || JSX } */\n  innerValue;\n  /** @type { String } */\n  type;\n  /** @type { Function } */\n  onClick;\n  /** @type { Boolean } */\n  disabled;\n\n  /**\n   * Set visual variants of button.\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n  variant;\n  /**\n   * Set button size.\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  size;\n\n  constructor({\n    name,\n    innerValue = 'Submit',\n    type = 'button',\n    onClick = null,\n    disabled = false,\n    variant = null,\n    size = null,\n  }) {\n    this.name = name;\n    this.innerValue = innerValue;\n    this.type = type;\n    this.onClick = onClick;\n    this.disabled = disabled;\n    this.variant = variant;\n    this.size = size;\n\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowButtonType(param);\n  }\n}\n\nconst ListRow = (props) => {\n  let randomId = Math.random().toString(36).substr(2, 11);\n  let rowStyle = Object.assign(\n    {},\n    props.header ? ListRowAsHeaderStyle : ListRowStyle,\n    props.style || {});\n  let enableLabel = !props.noLabel && props.label;\n\n  /** @type Array */\n  let childrenElement = props.children || [];\n  if (!Array.isArray(childrenElement))\n    childrenElement = [childrenElement,];\n\n  /** @type number[] */\n  let itemWidthCollection = props.itemWidth || [];\n  // Check if all values in array are number\n  if (!Array.isArray(itemWidthCollection) || !itemWidthCollection.every((e) => typeof e === 'number'))\n    itemWidthCollection = [enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0,];\n  if (itemWidthCollection.length === 0)\n    itemWidthCollection.push(enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0);\n\n  let targetLen = childrenElement.length;\n  let currLen = itemWidthCollection.length;\n  if (currLen < targetLen) {\n    let definedWidth = itemWidthCollection.reduce((a, b) => a + b, 0) + (LISTROW_MIN_ITEM_WIDTH * (targetLen - currLen));\n    if (definedWidth > 100)\n      itemWidthCollection = itemWidthCollection.map((e) => e / definedWidth * 100);\n\n    let oobWidth = (100 - itemWidthCollection.reduce((a, b) => a + b, 0)) / (targetLen - currLen);\n    while (itemWidthCollection.length < targetLen) {\n      itemWidthCollection.push(oobWidth);\n    }\n  }\n\n  return <div\n    className={props.className ?? ''}\n    style={rowStyle}\n    onClick={props.onClick || null}>\n    {\n      enableLabel && <label htmlFor={randomId} style={{ ...ListRowItemStyle, width: itemWidthCollection[0] + '%' }}>\n        {props.label || ''}\n      </label>\n    }\n    {\n      childrenElement.map((obj, idx, arr) => {\n        let attrCollection = {\n          key: `listrow-childelement-${idx}`,\n          id: idx === 0 ? randomId : randomId + idx,\n          htmlFor: idx !== childrenElement.length - 1 ? randomId + (idx + 1) : null,\n          width: itemWidthCollection[idx] + '%',\n          style: {\n            ...ListRowItemStyle,\n            ...((typeof obj === 'string')\n              ? {\n                textAlign: 'center',\n              } : {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }),\n            width: itemWidthCollection[idx] + '%',\n            ...((typeof (obj) === 'object' && (obj.$$typeof === REACT_ELEMENT_TYPE))\n              ? obj.props.style : {}),\n          },\n        }\n\n        if (obj instanceof ListRowInputType) {\n          if (obj.state === undefined || obj.state === null)\n            obj.state = {}\n\n          // input 타입이 checkbox거나 radio, select면 그에 대응하도록\n          if (obj.type === 'checkbox') {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              disabled={obj.disabled}\n              checked={obj.state[obj.name]}\n              onChange={obj.onChange(obj.name)} />;\n          } else if (obj.type === 'radio') {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              disabled={obj.disabled}\n              value={obj.innerValue}\n              onChange={obj.onChange(obj.name)} />;\n          } else if (obj.type === 'textarea') {\n            let autoGrow = (e) => { e.target.style.height = 'inherit'; e.target.style.height = (e.target.scrollHeight + 20) + 'px'; };\n            delete (attrCollection.style.textOverflow);\n            delete (attrCollection.style.overflow);\n            delete (attrCollection.style.whiteSpace);\n\n            return <textarea\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              placeholder={obj.placeholder}\n              disabled={obj.disabled}\n              readOnly={obj.readonly}\n              value={obj.state[obj.name]}\n              onInput={(e) => autoGrow(e)}\n              onChange={obj.onChange(obj.name)}\n\n              minLength={obj.minLength} maxLength={obj.maxLength}\n              pattern={obj.pattern}\n            />;\n          } else if (obj.type === 'select') {\n            let optionValue = obj.value;\n            let optionValueText = obj.innerValue;\n            if (!Array.isArray(optionValue))\n              optionValue = [optionValue,];\n            if (!Array.isArray(optionValueText))\n              optionValueText = [optionValueText];\n\n            return <select\n              {...attrCollection}\n              disabled={obj.disabled}\n              name={obj.name}>\n              {optionValue.map((o, i, a) => <option value={optionValue}>{optionValueText[i] || ''}</option>)}\n            </select>\n          } else if (obj.type === 'button' || obj.type === 'submit' || obj.type === 'reset') {\n            return <PHButton\n              {...attrCollection}\n              disabled={obj.disabled}\n              onClick={obj.onChange(obj.name)}\n              size={obj.size}\n              type={obj.type}\n              variant={obj.variant} >\n              {obj.innerValue}\n            </PHButton>;\n          } else {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              placeholder={obj.placeholder}\n              disabled={obj.disabled}\n              readOnly={obj.readonly}\n              value={obj.state[obj.name]}\n              onChange={obj.onChange(obj.name)}\n\n              min={obj.min} max={obj.max} step={obj.step}\n              minLength={obj.minLength} maxLength={obj.maxLength}\n              pattern={obj.pattern}\n            />;\n          }\n        } else if (obj instanceof ListRowButtonType) {\n          return <PHButton\n            {...attrCollection}\n            disabled={obj.disabled}\n            onClick={obj.onClick(obj.name)}\n            size={obj.size}\n            type={obj.type}\n            variant={obj.variant} >\n            {obj.innerValue}\n          </PHButton>;\n        } else if (obj instanceof ListRowLongTextType) {\n          delete (attrCollection.style.textOverflow);\n          delete (attrCollection.style.overflow);\n          delete (attrCollection.style.whiteSpace);\n          attrCollection.style.wordBreak = 'keep-all';\n          attrCollection.style.textAlign = 'start'\n\n          return <div {...attrCollection}>{obj.text}</div>;\n        } else if (obj === null || obj === undefined) {\n          return <div {...attrCollection}></div>;\n        } else if (typeof (obj) === 'string' || typeof (obj) === 'number' || typeof (obj) === 'bigint') {\n          return <div {...attrCollection}>{obj}</div>;\n        } else if (typeof (obj) === 'boolean') {\n          return <div {...attrCollection}>{obj ? 'true' : 'false'}</div>;\n        } else if (typeof (obj) === 'object' && (obj.$$typeof === REACT_ELEMENT_TYPE)) {\n          return React.cloneElement(obj, attrCollection);\n        } else {\n          return obj;\n        }\n      })\n    }\n  </div>;\n}\n\nexport { ListRowLongTextType, L, ListRowInputType, ListRowButtonType, ListRow };\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\action.ts",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muButton.jsx",["535","536","537","538"],"// FIXME: MOVE THIS TO TSX\n/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-key */\n\nimport React from 'react';\nimport { Button, Spinner } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\nexport const PHButton = (props) => {\n  let variant = props.variant || 'outline-primary';\n  let buttonDisabled = props.disabled || false;\n  let buttonType = props.type || 'button'\n  let buttonSize = (props.size === 'extra-sm' ? 'sm' : props.size) ?? 'sm'\n  let buttonStyle = (props.smaller || props.size === 'extra-sm')\n    ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {}),\n    }\n    : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {}),\n    };\n\n  let attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: variant,\n  }\n\n  return <Button {...attrCollection}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton = (inProps) => {\n  let props = Object.assign({}, inProps, {});\n\n  // When props.showSpinner is true, we disable button and show spinner\n  let shouldSpinnerShow = props.showSpinner || false;\n  delete (props.showSpinner);\n\n  let spinnerElement = props.spinner || <Spinner animation=\"border\" role=\"status\">\n    {/* visually-hidden is Bootstrap's. */}\n    <span className=\"visually-hidden\">Loading...</span>\n  </Spinner>;\n  delete (props.spinner);\n\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1)\n    throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete (props.children);\n\n\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n  if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n    btnChildElement = <div>{btnChildElement}</div>;\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-'))\n        props.variant = 'outline-secondary';\n      else\n        props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%',\n    }\n  });\n  spinnerElement = React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n    }\n  });\n\n  return <PHButton {...props}>\n    <div className='PHSpinnerButtonChildrenContainer'>\n      {btnChildElement}\n      <div className='PHSpinnerButtonSpinnerContainer'>\n        {spinnerElement}\n      </div>\n    </div>\n  </PHButton>\n}\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\util\\sidebar.jsx",["539","540"],"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Nav, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Icon from '@mdi/react';\nimport { mdiHome, mdiTools, mdiPlaylistMusic, mdiCardAccountDetails } from '@mdi/js';\n\nimport './sidebar.css';\n\nclass SidebarItemData {\n  // targetId: string;\n  // title: string;\n  // route: string;\n  // icon: string; // mdi icons are actually SVG string.\n  constructor(targetId, title, route, icon) {\n    this.targetId = targetId;\n    this.title = title;\n    this.route = route;\n    this.icon = icon;\n  }\n}\n\nconst SIDEBAR_ITEMS = {\n  HOME: new SidebarItemData('sidebarHomeBtn', '홈', '/', mdiHome),\n  // PROJECT: new SidebarItemData('sidebarBCaBtn', 'B.Ca', '/bca', mdiCardAccountDetails),\n  CONTAINER: new SidebarItemData('sidebarPlayCoBtn', 'PlayCO', '/playco', mdiPlaylistMusic),\n  TOOL: new SidebarItemData('sidebarToolBtn', 'Tools', '/tool', mdiTools),\n};\n\nconst getSidebarItemUsingRoute: React.FC = (route: string) => {\n  for (const [k, v] of Object.entries(SIDEBAR_ITEMS)) {\n    if (v.route === '/') { if (v.route === route) return [k, v]; }\n    else { if (route.startsWith(v.route)) return [k, v]; }\n  }\n  return [null, { route: '/unknown' }];\n}\n\ninterface SidebarItemPropTypes {\n  data: SidebarItemData;\n}\n\nconst SidebarItem: React.FC = ({ data }: SidebarItemPropTypes) => {\n  const navigate = useNavigate();\n\n  return <OverlayTrigger\n    placement='right'\n    overlay={(titleProps) => <Tooltip {...titleProps}>{data.title}</Tooltip>} >\n    <Nav.Item>\n      <Nav.Link\n        className='sidebarIconPills'\n        eventKey={data.route}\n        onClick={() => navigate(data.route)} >\n        <Icon path={data.icon} size='16pt' />\n      </Nav.Link>\n    </Nav.Item>\n  </OverlayTrigger>;\n}\n\nexport const Sidebar: React.FC = () => {\n  const location = useLocation();\n  const sidebarItem = getSidebarItemUsingRoute(location.pathname);\n  const onAfterSidebarPullerClick = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    event.target.onclick = onSidebarPullerClick;\n    document.getElementById('sidebarContainer').style.left = '-4rem';\n    document.getElementById('sidebarContainerText').style.transform = '';\n  };\n  const onSidebarPullerClick = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    event.target.onclick = onAfterSidebarPullerClick;\n    document.getElementById('sidebarContainer').style.left = '0';\n    document.getElementById('sidebarContainerText').style.transform = 'rotate(180deg)';\n  };\n\n  window.addEventListener('resize', () => {\n    document.getElementById('sidebarContainer').removeAttribute('style');\n    document.getElementById('sidebarContainerText').removeAttribute('style');\n  });\n\n  return <div className='sidebarContainer' id='sidebarContainer'>\n    <div className='sidebarContainerPuller' onClick={onSidebarPullerClick}>\n      <div id='sidebarContainerText'>▶</div>\n    </div>\n    <Nav fill variant='pills' activeKey={sidebarItem[1].route}>\n      {Object.entries(SIDEBAR_ITEMS).map(([k, v]) => <SidebarItem data={v} key={v.targetId} />)}\n    </Nav>\n  </div>\n}\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\model.ts",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\api.ts",["541","542","543","544","545","546","547","548","549","550","551","552","553","554","555"],"import { FrostError } from \"src/common/error\";\r\nimport FrostAPI from \"src/network/api\";\r\n\r\nimport {\r\n    PlaylistListener,\r\n    PlaylistItem,\r\n    Playlist,\r\n    PlaylistConfig,\r\n} from \"./model\";\r\n\r\nexport class PlayCoAPI {\r\n    static url(playlistId?: number) { return `playco/playlists/${playlistId ?? ''}`; }\r\n    static itemUrl(playlistId: number, itemIndex?: number) {\r\n        if (!playlistId)\r\n            throw new FrostError(\r\n                '예상하지 못한 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                'itemUrl is undefined or null',\r\n                -1, false);\r\n        return `playco/playlists/${playlistId}/items/${itemIndex ?? ''}`;\r\n    }\r\n\r\n    static getAllPlaylists() {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.url(), true)\r\n            .then((result) => {\r\n                // Possible response\r\n                // - multiple_resources_found(200)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.multiple_result') {\r\n                    return result.data.playco_playlists.map((v, i, a) => new Playlist(v));\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    return [];\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getAllPlaylists`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url());\r\n                }\r\n            });\r\n    }\r\n\r\n    // get playlistHashAsync(playlistId: number) {\r\n    //     return (new FrostAPI())\r\n    //         .head\r\n    // }\r\n\r\n    static getPlaylistInfo(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.itemUrl(playlistId), true)\r\n            .then((result) => {\r\n                // Possible response\r\n                // - resource_found(200)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.result') {\r\n                    const playlistObj = new Playlist({ ...result.data.playco_playlist, hash: result.header.get('etag') });\r\n                    return playlistObj;\r\n                } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                }\r\n            });\r\n    }\r\n\r\n    static createPlaylist(payload: PlaylistConfig) {\r\n        return (new FrostAPI())\r\n            .post(PlayCoAPI.url(), payload, true)\r\n            .then(\r\n                (result) => {\r\n                    if (!result.success) {\r\n                        if (result.subCode === 'resource.unique_failed') {\r\n                            throw new FrostError(\r\n                                '계정 당 재생목록을 5개까지만 만드실 수 있어요,\\n기존의 재생목록을 지워주세요.',\r\n                                `${result.code} - ${result.subCode} raised on PlayCoAPI.createPlaylist`,\r\n                                result.code, false, result, undefined, PlayCoAPI.url());\r\n                        } else {\r\n                            throw new FrostError(\r\n                                '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                                `${result.code} - ${result.subCode} raised on PlayCoAPI.createPlaylist`,\r\n                                result.code, false, result, undefined, PlayCoAPI.url());\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                (reason: FrostError) => {\r\n                    throw reason;\r\n                }\r\n            );\r\n    }\r\n\r\n    static modifyPlaylist(playlistId: number, data: PlaylistConfig, hash: string) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.url(playlistId), data, true, { 'If-Match': hash })\r\n            .then((result) => {\r\n                // Possible response\r\n                // - resource_modified(201)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (200 <= result.code && result.code <= 399) {\r\n                    return result;\r\n                } else if (result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else if (result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else if (result.subCode === 'resource.prediction_failed') {\r\n                    throw new FrostError(\r\n                        '재생목록이 다른 곳에서 수정됐어요,\\n\"재생목록 새로고침\" 버튼을 누르신 후 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                }\r\n            });\r\n    }\r\n\r\n    static deletePlaylist(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.url(playlistId), true)\r\n    }\r\n\r\n    static getPlaylistItems(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.itemUrl(playlistId), true)\r\n    }\r\n\r\n    static insertPlaylistItem(playlistId: number, itemUrl: string, hash: string) {\r\n        return (new FrostAPI())\r\n            .post(PlayCoAPI.itemUrl(playlistId), { link: itemUrl }, true, { 'If-Match': hash })\r\n    }\r\n\r\n    static movePlaylistItem(playlistId: number, link: string, newIndex: number, hash: string) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.itemUrl(playlistId, newIndex), {link: link}, true, { 'If-Match': hash })\r\n    }\r\n\r\n    static deletePlaylistItem(playlistId: number, itemIndex: number, hash: string) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.itemUrl(playlistId, itemIndex), true, { 'If-Match': hash })\r\n\r\n    }\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muFormText.tsx",["556"],"import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport './muFormText.css';\r\n\r\ninterface PHFormTextPropTypes {\r\n  className?: string;\r\n  defaultChildren?: string;\r\n  children?: React.ReactNode;\r\n  showOnlyNeeded?: boolean;\r\n}\r\n\r\nexport const PHFormText = ({ className, defaultChildren, children, showOnlyNeeded }: PHFormTextPropTypes) => {\r\n  if ((typeof (defaultChildren) === 'string' || defaultChildren instanceof String) && defaultChildren.includes('\\n'))\r\n    defaultChildren = <div>{defaultChildren.split('\\n').map((value) => <>{value}<br /></>)}</div>;\r\n\r\n  if ((typeof (children) === 'string' || children instanceof String) && children.includes('\\n'))\r\n    children = <div>{children.split('\\n').map((value) => <>{value}<br /></>)}</div>;\r\n\r\n  return <Form.Text\r\n    className={(children ? 'text-danger ' : 'text-muted ') + 'PHFormGroupText ' + (className ? className : '')}>\r\n    {children || (defaultChildren || (showOnlyNeeded ? '' : '\\u00A0'))}\r\n  </Form.Text>\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muListRowTs.tsx",["557","558","559","560","561","562","563","564","565","566","567","568"],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playlistDetailPage.tsx",["569","570"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport ReactPlayer from 'react-player';\r\nimport Icon from '@mdi/react';\r\nimport { mdiPlus, mdiTools, mdiAccountCircle, mdiRefresh, mdiPlayCircle, mdiDelete } from '@mdi/js';\r\n\r\nimport { ListRow } from '../../common/element/muListRow';\r\nimport { Divider } from '../../common/element/divider';\r\nimport { PHButton } from '../../common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHAlertMessageBox } from 'src/ui/common/element/muAlertMsgBox';\r\nimport { YoutubeThumbnail } from '../../common/element/util/youtubeThumbnail';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport { PlaylistControlModal } from './element/playlistControlModal';\r\nimport {\r\n  PlaylistListener,\r\n  PlaylistItem,\r\n  Playlist,\r\n  // PlaylistConfig\r\n} from './playco/model';\r\nimport './playlistDetailPage.css';\r\nimport { PlayCoAPI } from './playco/api';\r\nimport { PlayCoSocketIOHandler, PlayCoRoomType } from './playco/sio';\r\n\r\ntype PlaylistItemParticipantStateType = Array<{\r\n  nickname: string;\r\n  data?: Record<string, unknown>;\r\n}>;\r\n\r\ntype PlaylistParticipantStateType = Map<number, PlaylistItemParticipantStateType>;\r\n\r\ntype PlayCoPlaylistDetailStateType = {\r\n  playlistData: Playlist;\r\n  participantStatus: PlaylistParticipantStateType;\r\n  showPlaylistModifyModal: boolean;\r\n  showAlertMessageBoxModal: boolean;\r\n  alertMessageBoxModalData: { title: string; body: string; onAcceptBtnClick: () => void; };\r\n\r\n  autoplay: boolean;\r\n  loopMode: number;\r\n  currentPlayingIndex: number;\r\n  currentPlayingUrl: string;\r\n\r\n  isAccountFetching: boolean;\r\n  isPlaylistFetching: boolean;\r\n\r\n  socketIoConnectionStatus: string;\r\n};\r\n\r\nconst isNumeric = (val) => (/^\\d+$/.test(val));\r\n\r\nexport const PlaylistDetailDummyListener: React.FC = () => <div style={{ height: '16pt' }} />;\r\nexport const PlaylistDetailListener: React.FC = (props: { nick: string; imgUrl?: string; }) => {\r\n  return <OverlayTrigger\r\n    placement='bottom'\r\n    overlay={(tooltipProps) => <Tooltip {...tooltipProps}>{props.nick}</Tooltip>} >\r\n    <Icon path={mdiAccountCircle} size='16pt' />\r\n  </OverlayTrigger>;\r\n};\r\n\r\nexport const PlaylistDetailItem: React.FC = (props: {\r\n  playlistItemData: PlaylistItem;\r\n  playlistItemParticipantStatusData?: PlaylistItemParticipantStateType;\r\n  onClickFunc: () => void;\r\n  onDeleteBtnClickFunc: () => void;\r\n  selected?: boolean;\r\n}) => {\r\n  const isSelected = props.selected ?? false;\r\n  return <ListRow\r\n    onClick={(isSelected) ? null : props.onClickFunc}\r\n    className='playCoPlaylistDetailListItem'\r\n    itemWidth={[25, 70, 5]}\r\n    style={{\r\n      // This cannot be moved to css,\r\n      // as we have to overwrite the element style of ListRow.\r\n      alignItems: 'center',\r\n      marginLeft: '0',\r\n      marginRight: '0',\r\n      borderRadius: '0.3rem',\r\n      ...(isSelected ? {\r\n        border: 'none',\r\n        outline: '1px solid rgba(255, 255, 255, 1)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.4)',\r\n      } : {\r\n        border: 'none',\r\n        outline: 'none',\r\n      })\r\n    }}>\r\n    <div className='playCoPlaylistDetailListItemThumbnailContainer'>\r\n      <YoutubeThumbnail youtubeId={props.playlistItemData.link_id} />\r\n    </div>\r\n    <div className='playCoPlaylistDetailListItemInfoContainer'>\r\n      <div className='playCoPlaylistDetailListItemTitle'>{props.playlistItemData.name}</div>\r\n      <div className='playCoPlaylistDetailListItemListenerListContainer'>\r\n        <div className='playCoPlaylistDetailListItemListenerList'>\r\n          {(props.playlistItemParticipantStatusData?.length) ? (props.playlistItemParticipantStatusData.map((value, index) => {\r\n            return <PlaylistDetailListener\r\n              key={`playco-playlist-detail-listitem-listener-${index}`}\r\n              nick={value.nickname}\r\n              imgUrl={value.data?.img_url} />\r\n          })) : <PlaylistDetailDummyListener\r\n            key={`playco-playlist-detail-listitem-listener-0`} />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <Button\r\n        variant='link'\r\n        style={{ color: 'var(--color)' }}\r\n        onClick={(e) => { e.stopPropagation(); props.onDeleteBtnClickFunc(); }} >\r\n        <Icon path={mdiDelete} size='1.75rem' />\r\n      </Button>\r\n    </div>\r\n  </ListRow>;\r\n};\r\nexport const PlaylistDetail: React.FC = (props: {\r\n  setPlaylistModifyModalShowStateFunc: (boolean) => void;\r\n  setPlaylistCurrentPlayingStateFunc: (number) => void;\r\n  deletePlaylistItemFunc: (number) => void;\r\n  refreshPlaylistDataFunc: () => void;\r\n  addPlaylistItemFunc?: (string) => Promise<{ newItemUrlTextFieldValue: string, newItemUrlNotUsableReason: string }>;\r\n  playlistData: Playlist;\r\n  participantStatus?: PlaylistParticipantStateType;\r\n  isSignedIn?: boolean;\r\n  disabled?: boolean;\r\n  currentPlayingIndex: number;\r\n  socketIoConnectionStatusState: string;\r\n}) => {\r\n  const [playlistDetailState, setPlaylistDetailState] = useState({\r\n    newItemUrlTextFieldValue: '',\r\n    newItemUrlNotUsableReason: '',\r\n  });\r\n  const onAddPlaylistItemBtnClick = () => {\r\n    props.addPlaylistItemFunc(playlistDetailState.newItemUrlTextFieldValue)\r\n      .then((result) => setPlaylistDetailState({\r\n        ...playlistDetailState,\r\n        ...(result ?? {})\r\n      }));\r\n  }\r\n  return <aside className='playCoPlaylistDetailList'>\r\n    <header>\r\n      <h5 className='playCoPlaylistDetailListTitleContainer'>\r\n        <div className='playCoPlaylistDetailListTitle'>\r\n          {props.playlistData.name}\r\n        </div>\r\n        <OverlayTrigger\r\n          placement='bottom'\r\n          overlay={(tooltipProps) => <Tooltip {...tooltipProps} className='playCoPlaylistDetailListRefreshTooltip'>재생목록 새로고침</Tooltip>} >\r\n          <Button\r\n            className='rounded-circle playCoPlaylistDetailListRefreshButton'\r\n            variant='primary'\r\n            style={{ padding: '0.05rem' }}\r\n            disabled={props.disabled}\r\n            onClick={props.refreshPlaylistDataFunc}>\r\n\r\n            <div className='playCoPlaylistDetailListRefreshButtonIconContainer'>\r\n              <Icon path={mdiRefresh} size='1.75rem' />\r\n            </div>\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </h5>\r\n    </header>\r\n    <Divider style={{ margin: 'unset', marginLeft: '0', marginRight: '0', marginTop: '1.25rem', marginBottom: '1.25rem', width: '100%' }} />\r\n    {\r\n      props.socketIoConnectionStatusState && <>\r\n        <PHFormText showOnlyNeeded>{props.socketIoConnectionStatusState}</PHFormText>\r\n        <Divider\r\n          style={{\r\n            marginLeft: 0,\r\n            marginRight: 0,\r\n            marginTop: '1rem',\r\n            marginBottom: '1rem',\r\n            width: '100%',\r\n          }} />\r\n      </>\r\n    }\r\n    <input\r\n      title='Add item on playlist'\r\n      placeholder='재생목록에 추가할 URL'\r\n      className='playCoPlaylistDetailAddTextField'\r\n      disabled={props.disabled}\r\n      value={playlistDetailState.newItemUrlTextFieldValue}\r\n      onChange={(evt) => setPlaylistDetailState({\r\n        ...playlistDetailState,\r\n        newItemUrlTextFieldValue: evt.target.value,\r\n        newItemUrlNotUsableReason: '',\r\n      })}\r\n    ></input>\r\n    <PHFormText showOnlyNeeded>{playlistDetailState.newItemUrlNotUsableReason}</PHFormText>\r\n    <div className='playCoPlaylistDetailBtnGroup'>\r\n      <PHButton\r\n        smaller\r\n        variant='warning'\r\n        disabled={props.disabled}\r\n        onClick={() => props.setPlaylistModifyModalShowStateFunc(true)}>\r\n        <Icon path={mdiTools} size='1.1rem' />&nbsp;&nbsp;재생목록 설정\r\n      </PHButton>\r\n      <PHButton\r\n        smaller\r\n        variant='primary'\r\n        disabled={props.disabled}\r\n        onClick={onAddPlaylistItemBtnClick} >\r\n        <Icon path={mdiPlus} size='1.1rem' />&nbsp;&nbsp;재생목록에 추가하기\r\n      </PHButton>\r\n    </div>\r\n    <Divider style={{ margin: 'unset', marginLeft: '0', marginRight: '0', marginTop: '1.25rem', marginBottom: '1.25rem', width: '100%' }} />\r\n    <div>\r\n      {(props.playlistData.items.length)\r\n        ? props.playlistData.items.map((value, index) => <PlaylistDetailItem\r\n          key={`playco-playlist-detail-listitem-${value.uuid}`}\r\n          onClickFunc={props.disabled\r\n            ? () => { /* */ }\r\n            : () => props.setPlaylistCurrentPlayingStateFunc(index)}\r\n          onDeleteBtnClickFunc={props.disabled\r\n            ? () => { /* */ }\r\n            : () => props.deletePlaylistItemFunc(index)}\r\n          playlistItemData={value}\r\n          playlistItemParticipantStatusData={props.participantStatus?.get(index)}\r\n          selected={index === props.currentPlayingIndex} />)\r\n        : <ListRow style={{ width: '100%', marginRight: '0', marginLeft: '0', border: 'none' }}>재생목록에 아무 것도 없어요...</ListRow>}\r\n    </div>\r\n  </aside>;\r\n};\r\n\r\nexport const PlaylistDetailPlayer: React.FC = (props: {\r\n  targetUrl: string;\r\n  autoplay: boolean;\r\n  loopMode: number;\r\n  setAutoplayStateFunc: (boolean) => void;\r\n  setLoopModeStateFunc: () => void;\r\n  onPlayerEndedFunc?: () => void;\r\n}) => {\r\n  const playerConfig = {\r\n    youtube: {\r\n      playerVars: {\r\n        autoplay: props.autoplay ? 1 : 0,\r\n        loop: props.loopMode === 1 ? 1 : 0,\r\n        showinfo: 1,\r\n        controls: 1,\r\n      }\r\n    }\r\n  };\r\n\r\n  return <aside className='playCoPlaylistDetailPlayerAside'>\r\n    <div className='playCoPlaylistDetailPlayerContainer'>\r\n      <ReactPlayer\r\n        controls pip\r\n        className='playCoPlaylistDetailPlayer'\r\n        width='100%' height='100%'\r\n        config={playerConfig}\r\n\r\n        url={props.targetUrl}\r\n        loop={props.loopMode === 1}\r\n        playing={props.autoplay}\r\n        onEnded={(props.loopMode) ? props.onPlayerEndedFunc : null} />\r\n    </div>\r\n    <br />\r\n    <div className='playCoPlaylistDetailPlayerBtnGroup'>\r\n      <PHButton\r\n        variant={(props.autoplay) ? 'primary' : 'outline-primary'}\r\n        onClick={() => props.setAutoplayStateFunc(!props.autoplay)} >\r\n        <Icon path={mdiPlayCircle} size='1.1rem' />&nbsp;&nbsp;자동 재생\r\n      </PHButton>\r\n\r\n      <PHButton\r\n        variant={(props.loopMode === 0) ? 'outline-primary' : 'primary'}\r\n        onClick={props.setLoopModeStateFunc} >\r\n        <Icon path={mdiRefresh} size='1.1rem' />\r\n        &nbsp;&nbsp;{\r\n          (props.loopMode === 0)\r\n            ? '반복  해제됨' // loopMode === 0\r\n            : (props.loopMode === 1)\r\n              ? '한곡 반복 중' // loopMode === 1\r\n              : (props.loopMode === 2)\r\n                ? '전곡 반복 중' // loopMode === 2\r\n                : '전곡 한번만 재생 중' // loopMode === 3\r\n        }\r\n      </PHButton>\r\n    </div>\r\n  </aside>;\r\n};\r\n\r\nexport const PlayCoPlaylistDetail: React.FC = () => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [playlistDetailRootState, setPlaylistDetailRootState] = useState<PlayCoPlaylistDetailStateType>({\r\n    playlistData: new Playlist({\r\n      uuid: -1,\r\n      index: 0,\r\n      name: '정보를 불러오는 중...',\r\n\r\n      public_accessable: false,\r\n      public_modifiable: false,\r\n      public_item_appendable: false,\r\n      public_item_orderable: false,\r\n      public_item_deletable: false,\r\n      allow_duplicate: false,\r\n\r\n      items: [\r\n        new PlaylistItem({\r\n          uuid: -1,\r\n          index: 0,\r\n          name: '정보를 불러오는 중이에요, 잠시만 기다려주세요...',\r\n          data: {},\r\n\r\n          added_by_uuid: -1,\r\n          added_by_nick: '',\r\n\r\n          link: '',\r\n          link_type: '',\r\n          link_id: '',\r\n          current_listener: [],\r\n        }),\r\n      ],\r\n    }),\r\n    participantStatus: new Map(),\r\n    showPlaylistModifyModal: false,\r\n    showAlertMessageBoxModal: false,\r\n    alertMessageBoxModalData: { title: '', body: '', onAcceptBtnClick: () => { /* */ }, },\r\n\r\n    autoplay: true,\r\n    // 0: loop disabled\r\n    // 1: loop one item\r\n    // 2: loop all items in playlist, and loop again if the last item in playlist played.\r\n    // 3: loop all items in playlist, and stop if the last item in playlist played.\r\n    loopMode: 3,\r\n    currentPlayingIndex: 0,\r\n    currentPlayingUrl: '',\r\n\r\n    isFirstInitialized: false,\r\n    isAccountFetching: false,\r\n    isPlaylistFetching: false,\r\n\r\n    socketIoConnectionStatus: '',\r\n  });\r\n  const defaultAlertMsgModalData = {\r\n    title: '재생목록을 불러올 수 없어요...',\r\n    body: '',\r\n    onAcceptBtnClick: () => navigate('/playco'),\r\n  }\r\n  const playCoSocketIO = new PlayCoSocketIOHandler();\r\n\r\n  const refreshPlaylistData = () => {\r\n    if (playlistDetailRootState.isAccountFetching || playlistDetailRootState.isPlaylistFetching)\r\n      return;\r\n\r\n    setPlaylistDetailRootState((prevState) => ({ ...prevState, isPlaylistFetching: true, }));\r\n\r\n    // Fetch playlist from API\r\n    PlayCoAPI\r\n      .getPlaylistInfo(params.playlistId)\r\n      .then(\r\n        (result) => setPlaylistDetailRootState((prevState) => ({\r\n          ...prevState,\r\n          isFirstInitialized: true,\r\n          isPlaylistFetching: false,\r\n          playlistData: result,\r\n\r\n          // Update playlist state if this is the first time the playlist information is loading\r\n          // or there's a new item added on a playlist when the playlist was empty\r\n          ...((prevState.playlistData.uuid === -1 || prevState.playlistData.items.length === 0) ? {\r\n            currentPlayingUrl: result.items[0]?.link ?? '',\r\n            currentPlayingIndex: 0,\r\n          } : {}),\r\n        })),\r\n        (reason: FrostError) => setPlaylistDetailRootState((prevState) => ({\r\n          ...prevState,\r\n          isPlaylistFetching: false,\r\n          showAlertMessageBoxModal: true,\r\n          alertMessageBoxModalData: {\r\n            ...defaultAlertMsgModalData,\r\n            body: reason.message,\r\n          },\r\n        }))\r\n      )\r\n  }\r\n  const setPlaylistLoopModeState = () => {\r\n    setPlaylistDetailRootState({\r\n      ...playlistDetailRootState,\r\n      loopMode: (playlistDetailRootState.loopMode <= 0) ? 3 : playlistDetailRootState.loopMode - 1,\r\n    });\r\n  }\r\n  const setPlaylistModifyModalShowState = (newState: boolean) => {\r\n    if (!playlistDetailRootState.playlistData\r\n      || playlistDetailRootState.playlistData.uuid <= 0\r\n      || playlistDetailRootState.isAccountFetching\r\n      || playlistDetailRootState.isPlaylistFetching)\r\n      return;\r\n\r\n    setPlaylistDetailRootState({\r\n      ...playlistDetailRootState,\r\n      showPlaylistModifyModal: newState,\r\n    });\r\n\r\n    // Re-fetch playlist data when config modal closed.\r\n    if (!newState) refreshPlaylistData();\r\n  };\r\n  const setPlaylistCurrentPlayingState = (newIndex: number) => {\r\n    if (0 > newIndex || newIndex > playlistDetailRootState.playlistData.items.length - 1)\r\n      return;\r\n\r\n    const newPlayerLink = (playlistDetailRootState.playlistData.items != 0) ? playlistDetailRootState.playlistData.items[newIndex].link : '';\r\n    setPlaylistDetailRootState({\r\n      ...playlistDetailRootState,\r\n      currentPlayingIndex: newIndex,\r\n      currentPlayingUrl: newPlayerLink,\r\n    });\r\n    if (playlistDetailRootState.isFirstInitialized && playCoSocketIO.connected) {\r\n      playCoSocketIO.setSessionCurrentPlaying(playlistDetailRootState.playlistData.uuid, newIndex);\r\n    }\r\n  }\r\n  const setPlaylistCurrentPlayingStateToNext = () => {\r\n    if (playlistDetailRootState.currentPlayingIndex + 1 >= playlistDetailRootState.playlistData.items.length) {\r\n      if (playlistDetailRootState.loopMode === 2)\r\n        setPlaylistCurrentPlayingState(0);\r\n      return;\r\n    }\r\n    setPlaylistCurrentPlayingState(playlistDetailRootState.currentPlayingIndex + 1);\r\n  }\r\n\r\n  const addPlaylistItem = (newItemUrl: string) => {\r\n    if (!playlistDetailRootState.playlistData\r\n      || playlistDetailRootState.playlistData.uuid <= 0\r\n      || playlistDetailRootState.isAccountFetching\r\n      || playlistDetailRootState.isPlaylistFetching)\r\n      return;\r\n\r\n    newItemUrl = (newItemUrl ?? '').trim();\r\n    if (!newItemUrl)\r\n      return new Promise((resolve) => resolve({\r\n        newItemUrlTextFieldValue: newItemUrl,\r\n        newItemUrlNotUsableReason: '재생목록에 추가할 URL을 적어주세요!',\r\n      }));\r\n\r\n    setPlaylistDetailRootState((prevState) => ({ ...prevState, isPlaylistFetching: true, }));\r\n\r\n    return PlayCoAPI.insertPlaylistItem(\r\n      playlistDetailRootState.playlistData.uuid,\r\n      newItemUrl,\r\n      playlistDetailRootState.playlistData.hash)\r\n      .then(\r\n        (result) => {\r\n          setPlaylistDetailRootState((prevState) => ({ ...prevState, isPlaylistFetching: false, }));\r\n          if (!result.success) {\r\n            let errorMsg: string | null = null;\r\n            let shouldUrlTextFieldCleared = false;\r\n\r\n            if (result.subCode === 'resource.forbidden') {\r\n              errorMsg = '재생목록에 추가할 수 있는 권한이 없어요.';\r\n            } else if (result.subCode === 'resource.prediction_failed') {\r\n              if (result.data.prediction_failed_reason?.includes('playlist_outdated')) {\r\n                errorMsg = '재생목록에 수정사항이 생겼어요,\\n상단의 \"새로고침\" 버튼을 눌러주세요.';\r\n              } else if (result.data.prediction_failed_reason?.includes('link_not_implemented')) {\r\n                shouldUrlTextFieldCleared = true;\r\n                errorMsg = '지금은 YouTube 영상만 지원해요,\\n다른 영상의 URL을 시도해주세요.';\r\n              } else if (result.data.prediction_failed_reason?.includes('link_data_fetch_failed')) {\r\n                errorMsg = '영상의 정보를 확인할 수 없어요,\\n다른 URL을 시도하시거나 10분 후 다시 시도해주세요.';\r\n              } else {\r\n                errorMsg = '알 수 없는 문제가 생겼어요,\\n상단의 \"새로고침\" 버튼을 눌러주세요.';\r\n              }\r\n            } else if (result.subCode === 'resource.unique_failed') {\r\n              errorMsg = '이미 재생목록에 해당 영상이 포함되어 있어요,\\n'\r\n              errorMsg += '만약 재생목록에 중복해서 포함하고 싶으시다면\\n';\r\n              errorMsg += '\"재생목록 설정\"에서 설정을 바꿔주세요.';\r\n            } else if (result.subCode === 'resource.not_found') {\r\n              // Show an alertbox and kick to main screen\r\n              setPlaylistDetailRootState((prevState) => ({\r\n                ...prevState,\r\n                isPlaylistFetching: false,\r\n                showAlertMessageBoxModal: true,\r\n                alertMessageBoxModalData: {\r\n                  ...defaultAlertMsgModalData,\r\n                  body: (<>존재하지 않는 재생목록 ID입니다,<br />ID를 확인 후 다시 시도해주세요.</>),\r\n                },\r\n              }));\r\n            } else {\r\n              errorMsg = '알 수 없는 문제가 생겼어요,\\n상단의 \"새로고침\" 버튼을 눌러주세요.';\r\n            }\r\n\r\n            // Don't erase url input field, so that user can try once more.\r\n            return {\r\n              ...(shouldUrlTextFieldCleared ? { newItemUrlTextFieldValue: '', } : {}),\r\n              newItemUrlNotUsableReason: errorMsg,\r\n            };\r\n          }\r\n\r\n          refreshPlaylistData();\r\n          return {\r\n            newItemUrlTextFieldValue: '',\r\n            newItemUrlNotUsableReason: '',\r\n          };\r\n        },\r\n        (reason: FrostError) => {\r\n          setPlaylistDetailRootState((prevState) => ({ ...prevState, isPlaylistFetching: false, }));\r\n          return { newItemUrlNotUsableReason: reason.message, };\r\n        });\r\n  };\r\n  const deletePlaylistItem = (index: number) => {\r\n    if (!playlistDetailRootState.playlistData\r\n      || playlistDetailRootState.playlistData.uuid <= 0\r\n      || playlistDetailRootState.isAccountFetching\r\n      || playlistDetailRootState.isPlaylistFetching)\r\n      return;\r\n\r\n    setPlaylistDetailRootState((prevState) => ({ ...prevState, isPlaylistFetching: true, }));\r\n\r\n    PlayCoAPI.deletePlaylistItem(\r\n      playlistDetailRootState.playlistData.uuid,\r\n      index,\r\n      playlistDetailRootState.playlistData.hash)\r\n      .then(\r\n        (result) => {\r\n          if (playlistDetailRootState.currentPlayingIndex >= index) {\r\n            // Fetch playlist items after deleting item,\r\n            // and set playlist data while doing minus 1 on currentPlayingIndex not to change currentPlayingUrl,\r\n            // as \"one item before current playing item\" or \"current playing item\" is gone, and we don't want to refresh player.\r\n            setPlaylistDetailRootState((prevState) => ({\r\n              ...prevState,\r\n              currentPlayingIndex: prevState.currentPlayingIndex - 1,\r\n            }));\r\n          } else {\r\n            // Update playlist data state after deleting item and ignore it.\r\n            // Deleting item after current playing item won't affect our player.\r\n          }\r\n          refreshPlaylistData();\r\n        },\r\n        (reason: FrostError) => {\r\n          setPlaylistDetailRootState((prevState) => ({\r\n            ...prevState,\r\n            newItemUrlNotUsableReason: reason.message,\r\n            isPlaylistFetching: false,\r\n          }));\r\n        }\r\n      );\r\n  }\r\n\r\n  // Socket.IO specific event handler\r\n  const onPlaylistUserStateModified = (newRoomState: PlayCoRoomType) => {\r\n    // Convert PlayCoRoomType to PlaylistParticipantStateType\r\n    const newParticipantState: PlaylistParticipantStateType = new Map();\r\n\r\n    if (playlistDetailRootState.playlistData.uuid != newRoomState.playlist_id)\r\n      return;\r\n\r\n    for (const [nickname, roomStatus] of Object.entries(newRoomState.participants)) {\r\n      const currentStateIndex = roomStatus.status.currently_playing;\r\n      if (!newParticipantState.has(currentStateIndex)) {\r\n        newParticipantState.set(currentStateIndex, []);\r\n      }\r\n      newParticipantState.get(currentStateIndex)?.push({ nickname: nickname, data: roomStatus.data, });\r\n    }\r\n\r\n    setPlaylistDetailRootState((prevState) => ({ ...prevState, participantStatus: newParticipantState, }))\r\n  };\r\n  const onSocketIOStatusChanged = (newSIOStateMessage: string) => {\r\n    setPlaylistDetailRootState((prevState) => ({ ...prevState, socketIoConnectionStatus: newSIOStateMessage, }));\r\n  };\r\n\r\n  playCoSocketIO.onPlayCoConnected = () => {\r\n    // Try to connect SocketIO and fetch participant status.\r\n    playCoSocketIO.enterPlaylist(\r\n      playlistDetailRootState.playlistData.uuid,\r\n      playlistDetailRootState.currentPlayingIndex);\r\n  };\r\n  playCoSocketIO.onSocketIOStatusChanged = onSocketIOStatusChanged;\r\n  playCoSocketIO.onPlaylistModified = refreshPlaylistData;\r\n  playCoSocketIO.onUserStatusChanged = onPlaylistUserStateModified;\r\n\r\n  useEffect(() => {\r\n    // Check if params.playlistId is a valid numeric value\r\n    if (!isNumeric(params.playlistId)) {\r\n      setPlaylistDetailRootState({\r\n        ...playlistDetailRootState,\r\n        showAlertMessageBoxModal: true,\r\n        alertMessageBoxModalData: {\r\n          ...defaultAlertMsgModalData,\r\n          body: (<>올바르지 않은 재생목록 ID입니다,<br />ID를 확인 후 다시 시도해주세요.</>),\r\n        },\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Initialize and fetch playlist data\r\n    if ((!playlistDetailRootState.playlistData || playlistDetailRootState.playlistData.uuid <= 0)\r\n      && !playlistDetailRootState.isAccountFetching && !playlistDetailRootState.isPlaylistFetching)\r\n      refreshPlaylistData();\r\n\r\n    return () => { // Page unmounted\r\n      // Try to leave SocketIO room.\r\n      // playCoSocketIO.leavePlaylist(playlistDetailRootState.playlistData.uuid);\r\n      playCoSocketIO.disconnect(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (playlistDetailRootState.isFirstInitialized) {\r\n      playCoSocketIO.connect();\r\n    }\r\n  }, [playlistDetailRootState.isFirstInitialized])\r\n\r\n  return <section className='playCoPlaylistDetailPage'>\r\n    <PHAlertMessageBox\r\n      variant='error'\r\n      modalShowState={playlistDetailRootState.showAlertMessageBoxModal}\r\n      setModalShowState={(newState: boolean) => setPlaylistDetailRootState({ ...playlistDetailRootState, showAlertMessageBoxModal: newState })}\r\n      {...(playlistDetailRootState.alertMessageBoxModalData ?? {})} />\r\n    <header>\r\n      <h2>PlayCO<sup className='playCoTitleHeaderSup'>Alpha</sup></h2>\r\n      <p>플레이리스트를, 멀리서, 다 같이</p>\r\n    </header>\r\n    <div className='playCoPlaylistDetail'>\r\n      <PlaylistControlModal\r\n        initialModalState={playlistDetailRootState.playlistData}\r\n        modalShowState={playlistDetailRootState.showPlaylistModifyModal}\r\n        setModalShowState={setPlaylistModifyModalShowState} />\r\n      <PlaylistDetail\r\n        playlistData={playlistDetailRootState.playlistData}\r\n        participantStatus={playlistDetailRootState.participantStatus}\r\n        currentPlayingIndex={playlistDetailRootState.currentPlayingIndex}\r\n        socketIoConnectionStatusState={playlistDetailRootState.socketIoConnectionStatus}\r\n        disabled={\r\n          !playlistDetailRootState.playlistData\r\n          || playlistDetailRootState.playlistData.uuid <= 0\r\n          || playlistDetailRootState.isAccountFetching\r\n          || playlistDetailRootState.isPlaylistFetching\r\n        }\r\n        setPlaylistModifyModalShowStateFunc={setPlaylistModifyModalShowState}\r\n        setPlaylistCurrentPlayingStateFunc={setPlaylistCurrentPlayingState}\r\n        addPlaylistItemFunc={addPlaylistItem}\r\n        deletePlaylistItemFunc={deletePlaylistItem}\r\n        refreshPlaylistDataFunc={refreshPlaylistData} />\r\n      <PlaylistDetailPlayer\r\n        targetUrl={playlistDetailRootState.currentPlayingUrl}\r\n        loopMode={playlistDetailRootState.loopMode}\r\n        setLoopModeStateFunc={setPlaylistLoopModeState}\r\n        autoplay={playlistDetailRootState.autoplay}\r\n        setAutoplayStateFunc={(newState) => setPlaylistDetailRootState({ ...playlistDetailRootState, autoplay: newState })}\r\n        onPlayerEndedFunc={setPlaylistCurrentPlayingStateToNext} />\r\n    </div>\r\n  </section>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\element\\playlistControlModal.tsx",["571","572","573"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PlaylistConfig } from '../playco/model';\r\nimport { PlayCoAPI } from '../playco/api';\r\n\r\nexport const PlaylistControlModal: React.FC = (props: {\r\n  modalShowState: boolean;\r\n  setModalShowState: (boolean) => void;\r\n  createMode?: boolean;\r\n  initialModalState?: Playlist;\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [playlistControlModalState, setPlaylistControlModalState] = useState({\r\n    isProcessing: false,\r\n\r\n    nameTextFieldValue: props.initialModalState?.name ?? '',\r\n    nameNotUsableReason: '',\r\n    isAllowingDuplicate: props.initialModalState?.allow_duplicate ?? true,\r\n    isPublicAccessable: props.initialModalState?.public_accessable ?? false,\r\n    isPublicItemAppendable: props.initialModalState?.public_item_appendable ?? false,\r\n    isPublicItemDeletable: props.initialModalState?.public_item_deletable ?? false,\r\n    playlistCreationFailedReason: '',\r\n  });\r\n  useEffect(() => setPlaylistControlModalState({\r\n    ...playlistControlModalState,\r\n    nameTextFieldValue: props.initialModalState?.name ?? '',\r\n    nameNotUsableReason: '',\r\n    isAllowingDuplicate: props.initialModalState?.allow_duplicate ?? true,\r\n    isPublicAccessable: props.initialModalState?.public_accessable ?? false,\r\n    isPublicItemAppendable: props.initialModalState?.public_item_appendable ?? false,\r\n    isPublicItemDeletable: props.initialModalState?.public_item_deletable ?? false,\r\n    playlistCreationFailedReason: '',\r\n  }), [props.initialModalState]);\r\n  const currentStateToPlaylistConfig = () => new PlaylistConfig({\r\n    name: playlistControlModalState.nameTextFieldValue,\r\n    allow_duplicate: playlistControlModalState.isAllowingDuplicate,\r\n    public_accessable: playlistControlModalState.isPublicAccessable,\r\n    public_item_appendable: playlistControlModalState.isPublicItemAppendable,\r\n    public_item_deletable: playlistControlModalState.isPublicItemDeletable,\r\n  });\r\n  const closeModalFunc = () => {\r\n    if (!playlistControlModalState.isProcessing)\r\n      props.setModalShowState(false);\r\n  };\r\n  const handleInputChange = (valueName) => (e) => {\r\n    const newModalState = {\r\n      ...playlistControlModalState,\r\n      [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n    };\r\n    if (valueName === 'nameTextFieldValue')\r\n      newModalState.nameNotUsableReason = '';\r\n    setPlaylistControlModalState(newModalState);\r\n  }\r\n  const tryPlaylistCreate = () => {\r\n    let isRequestable = true;\r\n\r\n    setPlaylistControlModalState({\r\n      ...playlistControlModalState,\r\n      isProcessing: true,\r\n    });\r\n\r\n    const newModalState = {\r\n      ...playlistControlModalState,\r\n      isProcessing: true,\r\n    };\r\n    // trim all strings in states\r\n    for (const key in newModalState)\r\n      if (typeof (newModalState[key]) === 'string')\r\n        newModalState[key] = newModalState[key].trim();\r\n\r\n    if (!newModalState.nameTextFieldValue) {\r\n      newModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\r\n      newModalState.isProcessing = false;\r\n      isRequestable = false;\r\n    }\r\n    setPlaylistControlModalState(newModalState);\r\n\r\n    if (isRequestable) {\r\n      PlayCoAPI\r\n        .createPlaylist(currentStateToPlaylistConfig())\r\n        .then(\r\n          (response) => {\r\n            setPlaylistControlModalState((prevState) => ({\r\n              ...prevState,\r\n\r\n              // Reset our modal\r\n              nameTextFieldValue: props.initialModalState?.name ?? '',\r\n              nameNotUsableReason: '',\r\n              isAllowingDuplicate: props.initialModalState?.allow_duplicate ?? true,\r\n              isPublicAccessable: props.initialModalState?.public_accessable ?? false,\r\n              isPublicItemAppendable: props.initialModalState?.public_item_appendable ?? false,\r\n              isPublicItemDeletable: props.initialModalState?.public_item_deletable ?? false,\r\n              playlistCreationFailedReason: '',\r\n              isProcessing: false,\r\n            }));\r\n            closeModalFunc();\r\n          },\r\n          (reason: FrostError) => {\r\n            setPlaylistControlModalState((prevState) => ({\r\n              ...prevState,\r\n              playlistCreationFailedReason: reason.message,\r\n              isProcessing: false,\r\n            }));\r\n          });\r\n    }\r\n  }\r\n  const tryPlaylistModify = () => {\r\n    if (!props.initialModalState?.uuid) {\r\n      setPlaylistControlModalState({\r\n        ...playlistControlModalState,\r\n        playlistCreationFailedReason: '예상하지 못한 오류가 발생했어요, 새로고침을 해 주세요.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setPlaylistControlModalState({\r\n      ...playlistControlModalState,\r\n      isProcessing: true,\r\n    })\r\n\r\n    PlayCoAPI\r\n      .modifyPlaylist(\r\n        props.initialModalState.uuid,\r\n        currentStateToPlaylistConfig(),\r\n        props.initialModalState.hash)\r\n      .then(\r\n        (result) => {\r\n          setPlaylistControlModalState((prevState) => ({\r\n            ...prevState,\r\n            isProcessing: false,\r\n          }));\r\n          closeModalFunc();\r\n        },\r\n        (reason: FrostError) => {\r\n          setPlaylistControlModalState((prevState) => ({\r\n            ...prevState,\r\n            isProcessing: false,\r\n            playlistCreationFailedReason: reason.message,\r\n          }));\r\n        },\r\n      );\r\n  }\r\n\r\n  return <Modal\r\n    show={props.modalShowState}\r\n    onHide={closeModalFunc}\r\n    backdrop='static'\r\n    centered >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>\r\n        <h5 style={{ margin: 0, }}>\r\n          {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n        </h5>\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <Form onSubmit={evt => evt.preventDefault()}>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 이름</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder={\r\n              (props.createMode)\r\n                ? '여기에 새로 만드실 재생목록의 이름을 적어주세요'\r\n                : '여기에 이 재생목록의 새 이름을 적어주세요'\r\n            }\r\n            disabled={playlistControlModalState.isProcessing}\r\n            value={playlistControlModalState.nameTextFieldValue}\r\n            onChange={handleInputChange('nameTextFieldValue')} />\r\n          <PHFormText>{playlistControlModalState.nameNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 설정</Form.Label>\r\n          <Form.Switch\r\n            onChange={handleInputChange('isAllowingDuplicate')}\r\n            checked={playlistControlModalState.isAllowingDuplicate}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isAllowingDuplicateSwitch'\r\n            label={`중복되는 영상을 추가할 수 ${(playlistControlModalState.isAllowingDuplicate) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicAccessable')}\r\n            checked={playlistControlModalState.isPublicAccessable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicAccessableSwitch'\r\n            label={`다른 사람이 재생목록을 볼 수 ${(playlistControlModalState.isPublicAccessable) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemAppendable')}\r\n            checked={playlistControlModalState.isPublicItemAppendable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemAppendableSwitch'\r\n            label={`다른 사람이 재생목록에 영상을 추가할 수 ${(playlistControlModalState.isPublicItemAppendable) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemDeletable')}\r\n            checked={playlistControlModalState.isPublicItemDeletable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemDeletableSwitch'\r\n            label={`다른 사람이 재생목록에서 영상을 삭제할 수 ${(playlistControlModalState.isPublicItemDeletable) ? '있어요' : '없어요'}.`} />\r\n        </Form.Group>\r\n        <PHFormText>{playlistControlModalState.playlistCreationFailedReason}</PHFormText>\r\n      </Form>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button\r\n        variant='secondary'\r\n        onClick={closeModalFunc}\r\n        disabled={playlistControlModalState.isProcessing}>\r\n        취소\r\n      </Button>\r\n\r\n      <PHSpinnerButton\r\n        variant='primary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        onClick={(props.createMode) ? tryPlaylistCreate : tryPlaylistModify}\r\n        showSpinner={playlistControlModalState.isProcessing}>\r\n        {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n      </PHSpinnerButton>\r\n    </Modal.Footer>\r\n  </Modal>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\main.tsx",["574","575","576","577","578","579"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { refreshAccessTokenActionCreatorAsync } from 'src/redux/modules/account/action_creator';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nimport Icon from '@mdi/react';\r\nimport { mdiPlus, mdiCheckBold, mdiDeleteCircle, mdiRefresh } from '@mdi/js';\r\nimport { OverlayTrigger, Tooltip, Spinner, Button } from 'react-bootstrap';\r\n\r\nimport { PHButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { ListRow } from '../../common/element/muListRow';\r\nimport { Divider } from '../../common/element/divider';\r\n\r\nimport './main.css';\r\n\r\nimport { PlaylistListener, PlaylistItem, Playlist } from './playco/model';\r\nimport { PlaylistControlModal } from './element/playlistControlModal';\r\nimport { PlayCoAPI } from './playco/api';\r\nimport { PlayCoSocketIOHandler } from './playco/sio';\r\n\r\nconst isNumeric = (val) => (/^\\d+$/.test(val));\r\n\r\nconst PlayCoPlaylistList: React.FC = (props: {\r\n  playlistList: Playlist[],\r\n  isPlaylistFetchingState: boolean,\r\n  playlistCreateModalShowState: boolean,\r\n  socketIoConnectionStatusState: string,\r\n  deletePlaylistFunc: (number) => void,\r\n  refreshPlaylistFunc: () => void,\r\n  enterPlaylistFunc: (number) => void,\r\n  setPlaylistCreateModalShowState: (boolean) => void,\r\n}) => {\r\n  const [playlistListState, setPlaylistListState] = useState({\r\n    playlistManualEnterTargetIdTextField: '',\r\n    playlistManualEnterFailedReason: '',\r\n  });\r\n  const navigate = useNavigate();\r\n  const showPlaylistCreateModalFunc = () => props.setPlaylistCreateModalShowState(true);\r\n  const enterPlaylist = (playlistId: number) => {\r\n    if (!playlistId)\r\n      setPlaylistListState({\r\n        ...playlistListState,\r\n        playlistManualEnterFailedReason: '참여하실 재생목록의 ID를 입력해주세요.',\r\n      });\r\n\r\n    props.enterPlaylistFunc(playlistId);\r\n  };\r\n\r\n  return <aside className='playCoListAside'>\r\n    <div>\r\n      {\r\n        props.socketIoConnectionStatusState && <>\r\n          <PHFormText showOnlyNeeded>{props.socketIoConnectionStatusState}</PHFormText>\r\n          <Divider\r\n            style={{\r\n              marginLeft: 0,\r\n              marginRight: 0,\r\n              marginTop: '1rem',\r\n              marginBottom: '1rem',\r\n              width: '100%',\r\n            }} />\r\n        </>\r\n      }\r\n\r\n      <input\r\n        title='ID of playlist to enter'\r\n        placeholder='참여할 재생목록 ID'\r\n        className='playCoIdToEnterTextField'\r\n        disabled={props.isPlaylistFetchingState}\r\n        type='text'\r\n        pattern='\\d*'\r\n        value={playlistListState.playlistManualEnterTargetIdTextField}\r\n        onChange={(evt) => {\r\n          const inputedString = evt.target.value.trim();\r\n          if (inputedString && !isNumeric(inputedString))\r\n            return;\r\n\r\n          setPlaylistListState({\r\n            ...playlistListState,\r\n            playlistManualEnterTargetIdTextField: inputedString,\r\n            playlistManualEnterFailedReason: '',\r\n          });\r\n        }} ></input>\r\n      <PHButton\r\n        variant='success'\r\n        width='100%'\r\n        disabled={props.isPlaylistFetchingState}\r\n        onClick={() => enterPlaylist(playlistListState.playlistManualEnterTargetIdTextField)} >\r\n        {\r\n          (props.isPlaylistFetchingState)\r\n            ? <>잠시만 기다려주세요...</>\r\n            : <><Icon path={mdiCheckBold} size='1.1rem' />&nbsp;&nbsp;재생목록에 참여하기</>\r\n        }\r\n      </PHButton>\r\n      <PHFormText showOnlyNeeded>{playlistListState.playlistManualEnterFailedReason}</PHFormText>\r\n      <Divider\r\n        style={{\r\n          marginLeft: 0,\r\n          marginRight: 0,\r\n          marginTop: '1rem',\r\n          marginBottom: '1rem',\r\n          width: '100%',\r\n        }} />\r\n\r\n      <header>\r\n        <h5 className='playCoPlaylistListTitleContainer'>\r\n          <div className='playCoPlaylistListTitle'>\r\n            내 재생목록\r\n          </div>\r\n          <OverlayTrigger\r\n            placement='bottom'\r\n            overlay={(tooltipProps) => <Tooltip {...tooltipProps} className='playCoPlaylistListRefreshTooltip'>새로고침</Tooltip>} >\r\n            <Button\r\n              className='rounded-circle playCoPlaylistListRefreshButton'\r\n              variant='primary'\r\n              style={{ padding: '0.05rem' }}\r\n              disabled={props.isPlaylistFetchingState}\r\n              onClick={props.refreshPlaylistFunc} >\r\n              <div className='playCoPlaylistDetailListRefreshButtonIconContainer'>\r\n                <Icon path={mdiRefresh} size='1.75rem' />\r\n              </div>\r\n            </Button>\r\n          </OverlayTrigger>\r\n        </h5>\r\n      </header>\r\n      <div className='playCoAsideSectionHeaderButtonContainer'>\r\n        <PHButton\r\n          smaller\r\n          variant='outline-secondary'\r\n          style={{\r\n            color: 'var(--color)',\r\n            border: '1px solid var(--color)',\r\n          }}\r\n          disabled={props.isPlaylistFetchingState}\r\n          onClick={showPlaylistCreateModalFunc} >\r\n          <Icon path={mdiPlus} size='1.1rem' />\r\n          &nbsp;&nbsp;새 재생목록 만들기\r\n        </PHButton>\r\n        <PlaylistControlModal\r\n          createMode\r\n          modalShowState={props.playlistCreateModalShowState}\r\n          setModalShowState={props.setPlaylistCreateModalShowState} />\r\n      </div>\r\n      {\r\n        (props.playlistList && props.playlistList.length != 0)\r\n          ? props.playlistList.map((value, index, array) => <div key={`playco-playlist-main-listitem-${value.uuid}`}>\r\n            <ListRow\r\n              className='playCoListItem'\r\n              style={{\r\n                marginLeft: '1rem',\r\n                marginRight: '1rem',\r\n                border: 'none',\r\n                borderRadius: 'none',\r\n                ...((value.blocked_at) ? {\r\n                  textDecoration: 'line-through red',\r\n                  textDecorationThickness: '0.3rem',\r\n                } : {})\r\n              }}\r\n              itemWidth={[90, 10]}\r\n              onClick={() => enterPlaylist(value.uuid)}>\r\n              <div className='playCoListItemTextContainer'>\r\n                <h6 className='playCoListTitleContainer'>{value.name}</h6>\r\n                <div className='playCoListAdditionalInfoContainer'>\r\n                  <div>{\r\n                    (value.blocked_at)\r\n                      ? value.why_blocked\r\n                      : (value.item_count)\r\n                        ? `${value.item_count}개`\r\n                        : '비어있는 재생목록'\r\n                  }</div>\r\n                  <div>{\r\n                    (value.participant_count)\r\n                      ? `적어도 ${value.participant_count}명이 듣는 중이에요!` : ''\r\n                  }</div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <Button\r\n                  variant='link'\r\n                  style={{ color: 'var(--color)' }}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    props.deletePlaylistFunc(value.uuid);\r\n                  }} >\r\n                  <Icon path={mdiDeleteCircle} size='1.75rem' />\r\n                </Button>\r\n              </div>\r\n            </ListRow>\r\n            {(index === (array.length - 1)) ? <></> : <Divider />}\r\n          </div>)\r\n          : (props.isPlaylistFetchingState)\r\n            ? <>재생목록을 불러오는 중이에요,<br />잠시만 기다려주세요...</>\r\n            : <>\r\n              만드신 재생목록이 없어요,<br />\r\n              &quot;새 재생목록 만들기&quot; 버튼을 눌러주세요!\r\n            </>\r\n      }\r\n    </div>\r\n  </aside>;\r\n};\r\n\r\nconst PlayCoRequireSignedIn: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  return <aside style={{ width: 'calc(var(--width-card) * 1.25)' }}>\r\n    <header>\r\n      <p>\r\n        PlayCo의 특정 기능은 계정이 필요해요,<br />\r\n        이 기능을 위해 로그인을 해 주세요.\r\n      </p>\r\n    </header>\r\n    <PHButton\r\n      onClick={() => navigate('/account/signin')}\r\n      variant='primary'\r\n      size='medium'>\r\n      로그인\r\n    </PHButton>\r\n    <Divider style={{ margin: 'unset', marginLeft: '0', marginRight: '0', marginTop: '1.25rem', marginBottom: '1.25rem', width: '100%' }} />\r\n    {/* <header>\r\n      <p>\r\n        만약 몇몇 기능이 필요없으시다면...\r\n      </p>\r\n    </header>\r\n    <PHButton\r\n      onClick={() => navigate('/')}  // FIXME: NOT READY YET!!!\r\n      variant='outline-info'\r\n      size='medium'>\r\n      로그인 없이 사용하기\r\n    </PHButton> */}\r\n    <header>\r\n      <p>\r\n        현재 로그인 없이 사용할 수 있도록 준비 중이에요,<br />\r\n        조금만 기다려주세요!\r\n      </p>\r\n    </header>\r\n  </aside>;\r\n}\r\n\r\nexport const PlaycoMain: React.FC = (props) => {\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [playCoMainState, setPlayCoMainState] = useState({\r\n    playlistCreateModalShowState: false,\r\n\r\n    playlists: [],\r\n    playlistFetchFailedReason: '',\r\n    didAccountInfoDispatched: false,\r\n    isSignedIn: accountInfo?.isSignedIn ?? false,\r\n    isAccountFetching: accountInfo?.isFetching ?? false,\r\n    isPlaylistFetching: false,\r\n    socketIoConnectionStatus: '',\r\n  });\r\n  const fetchAndUpdatePlaylistListState = () => {\r\n    if (playCoMainState.isPlaylistFetching) // is currently fetching\r\n      return;\r\n\r\n    setPlayCoMainState((prevState) => ({\r\n      ...prevState,\r\n      isPlaylistFetching: true,\r\n    }));\r\n    PlayCoAPI.getAllPlaylists().then(\r\n      (result) => setPlayCoMainState((prevState) => ({\r\n        ...prevState,\r\n        isPlaylistFetching: false,\r\n        playlists: result,\r\n        playlistFetchFailedReason: '',\r\n      })),\r\n      (reason: FrostError) => setPlayCoMainState((prevState) => ({\r\n        ...prevState,\r\n        isPlaylistFetching: false,\r\n        playlists: [],\r\n        playlistFetchFailedReason: reason.message,\r\n      })),\r\n    );\r\n  }\r\n  const deletePlaylist = (playlistId) => {\r\n    setPlayCoMainState((prevState) => ({\r\n      ...prevState,\r\n      playlists: [],\r\n      isPlaylistFetching: true,\r\n    }));\r\n\r\n    PlayCoAPI.deletePlaylist(playlistId).then(\r\n      (result) => fetchAndUpdatePlaylistListState(),\r\n      (reason: FrostError) => setPlayCoMainState({\r\n        ...playCoMainState,\r\n        playlistFetchFailedReason: reason.message,\r\n      })\r\n    );\r\n  }\r\n  const enterPlaylist = (playlistId) => {\r\n    if (!isNumeric(playlistId))\r\n      return;\r\n\r\n    navigate(`/playco/${playlistId}`);\r\n  }\r\n\r\n  const setPlaylistCreateModalState = (newState) => {\r\n    setPlayCoMainState((prevState) => ({\r\n      ...prevState,\r\n      playlistCreateModalShowState: newState,\r\n    }));\r\n\r\n    if (!newState) {\r\n      // We are closing modal now.\r\n      fetchAndUpdatePlaylistListState();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(refreshAccessTokenActionCreatorAsync());\r\n  }, []);\r\n  useEffect(() => {\r\n    setPlayCoMainState((prevState) => ({\r\n      ...prevState,\r\n      isSignedIn: accountInfo?.isSignedIn ?? false,\r\n      isAccountFetching: accountInfo?.isFetching ?? false,\r\n      didAccountInfoDispatched: true,\r\n    }));\r\n    if (playCoMainState.didAccountInfoDispatched && accountInfo && !accountInfo.isFetching && accountInfo.isSignedIn) {\r\n      fetchAndUpdatePlaylistListState();\r\n\r\n      // Initialize SocketIO-client if it's not initialized.\r\n      // const playCoSocketIo = new PlayCoSocketIOHandler();\r\n      // playCoSocketIo.connect();\r\n\r\n      return () => {\r\n        // This will be called when this component unmounts.\r\n        // console.log('UNMOUNTED!!!');\r\n      };\r\n    }\r\n  }, [accountInfo]);\r\n\r\n  const needToShowSpinner = playCoMainState.isAccountFetching;\r\n  const playCoBody = needToShowSpinner\r\n    ? <Spinner animation='border' role='status'>\r\n      <span className='visually-hidden'>불러오는 중이에요...</span>\r\n    </Spinner>\r\n    : !playCoMainState.isSignedIn\r\n      ? <PlayCoRequireSignedIn />\r\n      : <PlayCoPlaylistList\r\n        playlistList={playCoMainState.playlists}\r\n        isPlaylistFetchingState={playCoMainState.isPlaylistFetching}\r\n        playlistCreateModalShowState={playCoMainState.playlistCreateModalShowState}\r\n        socketIoConnectionStatusState={playCoMainState.socketIoConnectionStatus}\r\n        refreshPlaylistFunc={fetchAndUpdatePlaylistListState}\r\n        deletePlaylistFunc={deletePlaylist}\r\n        enterPlaylistFunc={enterPlaylist}\r\n        setPlaylistCreateModalShowState={setPlaylistCreateModalState} />;\r\n\r\n  return <section className='playCoMain'>\r\n    <header>\r\n      <h2>PlayCO<sup className='playCoTitleHeaderSup'>Alpha</sup></h2>\r\n      <p>플레이리스트를, 멀리서, 다 같이</p>\r\n    </header>\r\n    {playCoBody}\r\n  </section>\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\playco\\playco\\sio.ts",["580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600"],"import { io, Manager } from 'socket.io-client';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from 'src/network/api';\r\n\r\nconst SIO_RESP_UNMOUNT_TIMEOUT = 15;\r\nconst SIO_DESCRIPTION = '재생목록의 실시간 정보를 받아오기 위한 연결';\r\nconst COMMON_ERR_MSG_ADD_MAP = {\r\n    retryAfter5Min: '\\n5분 후에 다시 시도해주세요.',\r\n    retryAfter10Min: '\\n10분 후에 다시 시도해주세요.',\r\n    retryFullReload: '\\n키보드에서 \\'F5\\' 버튼을 눌러서 새로고침을 해 주세요.',\r\n    retryAfterSignIn: '\\n로그인 후 이용해주세요.',\r\n}\r\nconst COMMON_ERR_MSG_MAP = {\r\n    safeDisconnected: SIO_DESCRIPTION + '이 종료됐어요.',\r\n\r\n    unknownErrorRetry5Min: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfter5Min,\r\n    unknownErrorRetryFullReload: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    signInRequired: '이 기능은 로그인 후 사용할 수 있어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfterSignIn,\r\n    signInfoCheckFailed: '로그인 정보를 확인하는 중 문제가 발생했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    connectFailed: SIO_DESCRIPTION + '을 만들지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownDisconnected: SIO_DESCRIPTION + '이\\n알 수 없는 이유로 종료됐어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authFailed: SIO_DESCRIPTION + '을 인증하지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authResponseFailed: SIO_DESCRIPTION + '의 인증 정보를 받지 못했어요.' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownAuthFailed: SIO_DESCRIPTION + '을 인증하는 중\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n}\r\n\r\ninterface PlayCoSocketIOResponseType {\r\n    code: number;\r\n    subCode: string;\r\n    success: boolean;\r\n    message: string;\r\n    data?: Record<string, unknown>;\r\n}\r\n\r\nexport interface PlayCoRoomType {\r\n    playlist_id: number;\r\n    playlist_hash: string;\r\n    participants: {\r\n        [nickname: string]: {\r\n            nickname: string;\r\n            data: Record<string, unknown>;\r\n            status: {\r\n                currently_playing: number;\r\n            };\r\n        }\r\n    };\r\n    current_play_target?: string; // NOT_USED\r\n    db_modified?: boolean;\r\n}\r\n\r\n// Generate random safe string, borrowed from FrostAPI implementation\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n    const randArray = new Uint32Array(bytes);\r\n    window.crypto.getRandomValues(randArray);\r\n    return buf2hex(randArray);\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\n// Buffer to hex, also borrowed from FrostAPI implementation\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n    return [...new Uint8Array(buffer)]\r\n        .map(x => x.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\n// From https://stackoverflow.com/a/39977764/5702135\r\nconst assign = (target, ...sources) =>\r\n    Object.assign(target, ...sources.map(x =>\r\n        Object.entries(x)\r\n            .filter(([key, value]) => value !== undefined)\r\n            .reduce((obj, [key, value]) => (obj[key] = value, obj), {})\r\n    ))\r\n\r\nlet playCoSocketIOHandlerInstance: PlayCoSocketIOHandler;\r\nexport class PlayCoSocketIOHandler {\r\n    private socketIoMgr: io.Manager;\r\n    private socketIo: io;\r\n\r\n    private sioToken: string;\r\n    private sioTokenExpiresAt: Date;\r\n    private csrfToken: string;\r\n    private sessionId: string;\r\n\r\n    private prevRoomStatus?: PlayCoRoomType;\r\n\r\n    socketIoStatusMessage: string;\r\n\r\n    onPlayCoConnected?: () => void;\r\n    onPlaylistModified?: () => void;\r\n    onUserStatusChanged?: (PlayCoRoomType) => void;\r\n    onSocketIOStatusChanged?: (string) => void;\r\n\r\n    // UTIL METHOD\r\n    get connected() {\r\n        return this.socketIo.connected;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    private getAuthBody(additionalBody?: Record<string, unknown>) {\r\n        return assign(\r\n            {\r\n                sid: this.sessionId,\r\n                sio_token: this.sioToken,\r\n                sio_csrf_token: this.csrfToken,\r\n            },\r\n            additionalBody ?? {}\r\n        )\r\n    }\r\n\r\n    // UTIL METHOD\r\n    setSIOStatMsg(newMsg: string) {\r\n        this.socketIoStatusMessage = newMsg;\r\n        try { if (this.onSocketIOStatusChanged) this.onSocketIOStatusChanged(newMsg); } catch (e) { console.log(e); }\r\n    }\r\n\r\n    // UTIL METHOD\r\n    defaultErrorHandler(reason: FrostError, shouldDisconnect = true, alternativeShowMsg?: string) {\r\n        const self = this ?? playCoSocketIOHandlerInstance;\r\n\r\n        if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n            console.log(reason.message);\r\n            console.log(reason.debugMessage);\r\n            console.log(reason.apiResponse);\r\n        } else {\r\n            console.log(reason);\r\n        }\r\n\r\n        // Set error message\r\n        try {\r\n            self.setSIOStatMsg(alternativeShowMsg ?? reason.message);\r\n        } catch (e1) {\r\n            console.log(alternativeShowMsg ?? reason.message);\r\n            console.log(e1);\r\n        }\r\n\r\n        // Disconnect from SocketIO.\r\n        if (shouldDisconnect) self.disconnect(false);\r\n\r\n        return false;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    unsubscribeAllHooks() {\r\n        this.onPlayCoConnected = undefined;\r\n        this.onPlaylistModified = undefined;\r\n        this.onUserStatusChanged = undefined;\r\n        this.onSocketIOStatusChanged = undefined;\r\n    }\r\n\r\n    // EVENT HANDLER\r\n    private socketIoEventHandler: Record<string, () => void> = {\r\n        connect: () => {\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        reconnect: () => {\r\n            // Same as connect\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        disconnect: (reason) => {\r\n            console.log(`DISCONNECTED FROM PLAYCO SIO, REASON: ${reason}`)\r\n\r\n            // Before disconnect and unconnect all hooks, we need to cleanup the UI if it's possible.\r\n            try {\r\n                if (this.onUserStatusChanged)\r\n                    this.onUserStatusChanged({\r\n                        playlist_id: this.prevRoomStatus?.playlist_id ?? -1,\r\n                        playlist_hash: this.prevRoomStatus?.playlist_hash ?? '',\r\n                        participants: {},\r\n                        db_modified: true,\r\n                    });\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n\r\n            this.unsubscribeAllHooks();\r\n\r\n            this.sessionId = '';\r\n            this.sioToken = '';\r\n            this.sioTokenExpiresAt = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n            this.csrfToken = generateRandomSecureToken(32);\r\n        },\r\n        REQUEST_RESPONSE_0: (data?: PlayCoSocketIOResponseType) => {\r\n            console.log('Unknown response received! Received data >>> ---------------');\r\n            console.log(data);\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n        PLAYLIST_USER_ENTERED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user entered to this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            this.prevRoomStatus = roomStatus;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_USER_EXITED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user exited from this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_MODIFIED: (data: PlayCoSocketIOResponseType) => {\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            const shouldRoomRefreshed: boolean = data.data.room.db_modified ?? false;\r\n            this.prevRoomStatus = roomStatus;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n            try { if (shouldRoomRefreshed && this.onPlaylistModified) this.onPlaylistModified(); } catch (e) { console.log(e); }\r\n        },\r\n        OFFICIAL_ANNOUNCEMENT: (data?: PlayCoSocketIOResponseType) => {\r\n            // RESERVED\r\n            console.log('OFFICIAL_ANNOUNCEMENT event received! Received data >>> ----');\r\n            console.log(data)\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n    };\r\n\r\n    constructor() {\r\n        if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\r\n\r\n        this.socketIoMgr = new Manager('https://mudev.cc', {\r\n            reconnectionDelayMax: 5000,\r\n            path: '/api/dev/ws',\r\n            transports: ['websocket',],\r\n            upgrade: false,\r\n\r\n            forceNew: false,\r\n            autoConnect: false,\r\n\r\n            closeOnBeforeunload: false,\r\n        });\r\n\r\n        this.socketIo = this.socketIoMgr.socket('/playco_ws');\r\n        for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\r\n            this.socketIo.on(key, value);\r\n        }\r\n\r\n        playCoSocketIOHandlerInstance = this;\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private emitEvent(\r\n        event: string,\r\n        data?: Record<string, unknown>,\r\n        onSuccess?: (response: PlayCoSocketIOResponseType) => void,\r\n        onFailure?: (reason: FrostError, response?: PlayCoSocketIOResponseType) => void,\r\n        isRetry?: boolean) {\r\n\r\n        const requestId = generateRandomSecureToken(16);\r\n        if (data) {\r\n            data.request_id = requestId;\r\n        } else {\r\n            data = { request_id: requestId };\r\n        }\r\n\r\n        const eventName = `REQUEST_RESPONSE_${requestId}`;\r\n\r\n        // Unregister request response handler after {SIO_RESP_UNMOUNT_TIMEOUT}sec.\r\n        const eventHandlerTimeoutID = setTimeout(() => {\r\n            console.log(`WARNING: ${eventName} didn't handled in ${SIO_RESP_UNMOUNT_TIMEOUT}sec, and handler is unmounted.`);\r\n            this.socketIo.removeAllListeners(eventName);\r\n        }, SIO_RESP_UNMOUNT_TIMEOUT * 1000);\r\n\r\n        const eventHandler = (response?: PlayCoSocketIOResponseType) => {\r\n            clearTimeout(eventHandlerTimeoutID); // This will clear eventHandlerTimeout.\r\n\r\n            try {\r\n                if (response?.success) {\r\n                    if (onSuccess) onSuccess(response);\r\n                } else {\r\n                    // Response contains (success == false)\r\n                    let dbgMsg = 'sio:emitEvent error\\n';\r\n                    dbgMsg += `(event=${event})=>\\n`\r\n                    if (response) {\r\n                        for (const [key, value] of Object.entries(response ?? {})) {\r\n                            if (key !== 'data') {\r\n                                dbgMsg += `response?.${key} = ${value}\\n`\r\n                            } else {\r\n                                dbgMsg += `response?.${key} = ${JSON.stringify(value)}\\n`\r\n                            }\r\n                        }\r\n                    } else { dbgMsg += `response = ${response}\\n`; }\r\n\r\n                    if (event === 'playco_connect') {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (isRetry) {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (response?.subCode.startsWith('SIO_TOKEN_')) {\r\n                        // Refresh SIO Token and retry emitEvent.\r\n                        this.refreshSIOToken(() => this.emitEvent(event, data, onSuccess, onFailure, true), false, true);\r\n                        return;\r\n                    } else {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message || COMMON_ERR_MSG_MAP.unknownErrorRetry5Min,\r\n                                dbgMsg, response?.code, false),\r\n                            false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (e: FrostError) {\r\n                if (onFailure) {\r\n                    try {\r\n                        onFailure(e, response);\r\n                    } catch (e1) {\r\n                        console.log(e);\r\n                        console.log(e1);\r\n\r\n                        this.defaultErrorHandler(e, false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.socketIo.once(eventName, eventHandler);\r\n        this.socketIo.emit(event, data);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private refreshSIOToken(callback: (() => void) = (() => { /* */ }), isOnConnect = false, forceRefresh = false) {\r\n        if (!forceRefresh && this.sioToken && this.sioTokenExpiresAt > new Date()) {\r\n            // We assumes that token is alive.\r\n            // If the callback is emitEvent and server returns SIO_TOKEN_EXPIRED or SIO_TOKEN_INVALID,\r\n            // then emitEvent method will handle it properly.\r\n            try {\r\n                callback();\r\n                return;\r\n            } catch (err) {\r\n                this.defaultErrorHandler(err);\r\n            }\r\n        }\r\n\r\n        const frostAPI = new FrostAPI();\r\n        frostAPI\r\n            .isSignedIn(true)\r\n            .then(\r\n                (isSignedIn) => {\r\n                    if (!isSignedIn) { // Check if Frost is signed in.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.signInRequired,\r\n                            'on refreshSIOToken, isSignedIn == false', -1, true);\r\n                    } else if (!this.socketIo.connected || !this.sessionId) { // Check if Socket.IO is connected, and every statement is fulfilled.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.connectFailed,\r\n                            `this.socketIo.connected = ${this.socketIo.connected}, !this.sessionId = ${this.sessionId}`, -1, false);\r\n                    }\r\n\r\n                    // We need to get a new SIO Token by request.\r\n                    this.csrfToken = generateRandomSecureToken(32);\r\n                    return frostAPI\r\n                        .post('playco/socketio/auth', this.getAuthBody(), true)\r\n                        .then(\r\n                            (result) => {\r\n                                if (!result.success) {\r\n                                    throw new FrostError(\r\n                                        COMMON_ERR_MSG_MAP.authResponseFailed,\r\n                                        '/playco/socketio/auth returns response.success == false',\r\n                                        result.code, false, result, undefined, 'playco/socketio/auth');\r\n                                }\r\n\r\n                                // Get SIO token from response\r\n                                const sioTokenData: { 'exp': string, 'token': string } = result.data.sio_token;\r\n                                this.sioToken = sioTokenData.token;\r\n                                this.sioTokenExpiresAt = new Date(sioTokenData.exp);\r\n\r\n                                // Register session if this function is called on SocketIO onConnect event.\r\n                                if (isOnConnect) {\r\n                                    this.emitEvent(\r\n                                        'playco_connect', this.getAuthBody(),\r\n                                        (response) => ((this.onPlayCoConnected) ? this.onPlayCoConnected() : () => {/* */ }),\r\n                                        // Session creation failed\r\n                                        (reason, response) => this.defaultErrorHandler(reason, true, COMMON_ERR_MSG_MAP.authFailed)\r\n                                    );\r\n                                    return;\r\n                                } else {\r\n                                    callback();\r\n                                    return;\r\n                                }\r\n                            },\r\n                            (reason: FrostError) => { // Failed to get SIO token\r\n                                reason.message = COMMON_ERR_MSG_MAP.authFailed;\r\n                                throw reason;\r\n                            },\r\n                        );\r\n                },\r\n                (reason: FrostError) => {\r\n                    reason.message = COMMON_ERR_MSG_MAP.signInfoCheckFailed;\r\n                    throw reason;\r\n                }\r\n            ).catch(this.defaultErrorHandler);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    connect() {\r\n        if (!this.socketIo.connected) // Connect SocketIO if it's not connected.\r\n            // This will fire this.socketIoEventHandler.connect if the connection is successfully established.\r\n            this.socketIo.connect();\r\n    }\r\n\r\n    // EVENT MAKER\r\n    disconnect(isSafeDisconnect = true) {\r\n        if (this.socketIo.connected) {\r\n            this.socketIo.disconnect();\r\n\r\n            if (isSafeDisconnect)\r\n                this.setSIOStatMsg(COMMON_ERR_MSG_MAP.safeDisconnected);\r\n        }\r\n    }\r\n\r\n    // EVENT MAKER\r\n    enterPlaylist(playlistId: number, currentlyPlaying?: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_enter',\r\n                this.getAuthBody(({ playlist_id: playlistId, currently_playing: currentlyPlaying })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    leavePlaylist(playlistId: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_leave',\r\n                this.getAuthBody(({ playlist_id: playlistId })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    setSessionCurrentPlaying(playlistId: number, currentPlaying: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_set_status',\r\n                this.getAuthBody(({ playlist_id: playlistId, currently_playing: currentPlaying })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\common\\element\\muAlertMsgBox.tsx",["601","602","603","604","605","606","607","608","609"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PlaylistConfig } from '../playco/model';\r\nimport { PlayCoAPI } from '../playco/api';\r\nimport './muAlertMsgBox.css';\r\n\r\nexport const PHAlertMessageBox: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n    onAcceptBtnClick: () => void;\r\n    onCancelBtnClick?: () => void;\r\n    title: string;\r\n    body: React.FC;\r\n    showCloseBtn?: boolean;\r\n    variant?: 'warning' | 'error';\r\n}) => {\r\n    const closeModalFunc = () => props.setModalShowState(false);\r\n\r\n    let msgBoxBody = props.body;\r\n    if ((typeof (props.body) === 'string' || props.body instanceof String) && props.body.includes('\\n'))\r\n        msgBoxBody = <div>{props.body.split('\\n').map((value) => <>{value}<br /></>)}</div>;\r\n\r\n    return <Modal\r\n        className={`muAlertMsgBoxModal${props.variant ?? ''}`}\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        keyboard={false}\r\n        centered >\r\n        <Modal.Header closeButton={props.showCloseBtn}>\r\n            <Modal.Title><h5 style={{ margin: 0, }}>{props.title}</h5></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{msgBoxBody}</Modal.Body>\r\n        <Modal.Footer>\r\n            {props.onCancelBtnClick && <Button variant='secondary' onClick={props.onCancelBtnClick}>취소</Button>}\r\n            <Button\r\n                variant={(props.variant === 'error') ? 'danger' : (props.variant === 'warning') ? 'warning' : 'primary'}\r\n                onClick={props.onAcceptBtnClick}>확인</Button>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\subpage\\qrDecode.tsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\tool\\subpage\\protocolParser.tsx",[],"C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\mailSentWelcomeToMuDev.tsx",["610","611","612"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { parse_host } from 'tld-extract';\r\n\r\nimport { OverlayTrigger, Tooltip, Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nconst getDomainUrlFromEmailAddress = (email: string) => {\r\n  const address = email.split('@').pop();\r\n  const parsedResult = parse_host(address);\r\n  return parse_host(address).domain;\r\n}\r\n\r\nexport const MailSentWelcomeToMuDev = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [welcomePageState, setWelcomePageState] = useState({\r\n    goToMailDomain: undefined,\r\n    mailDomain: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (location?.state?.email) {\r\n      try {\r\n        const targetDomain = getDomainUrlFromEmailAddress(location.state.email);\r\n        const targetUrl = 'https://' + targetDomain;\r\n\r\n        setWelcomePageState({\r\n          ...welcomePageState,\r\n          mailDomain: targetDomain,\r\n          goToMailDomain: (evt) => {\r\n            try {\r\n              if (evt && evt.type === 'mousedown' && evt.button === 0) {\r\n                // If it's clicked by mouse left button\r\n                window.location.href = targetUrl;\r\n              } else if (evt && evt.type === 'mousedown' && evt.button === 1) {\r\n                // If it's clicked by mouse middle button\r\n                window.open(targetUrl, '_blank');\r\n              } else if (evt && evt.type === 'mousedown') {\r\n                // Ignore other mouse buttons\r\n              } else {\r\n                window.open(targetUrl, '_blank');\r\n              }\r\n            } catch (e1) { /* */ }\r\n          }\r\n        });\r\n      } catch (e) { /* */ }\r\n    }\r\n  }, []);\r\n\r\n  let welcomeString = '입력하신 주소로 메일을 보냈습니다,\\n'\r\n  welcomeString += '메일에 포함된 주소를 눌러 가입을 마무리 해주세요.\\n'\r\n  welcomeString += '메일이 전송되는데 30분 정도 걸릴 수 있어요.'\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 만들기</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>MUdev.cc에 오신 것을 환영합니다!</Form.Label>\r\n          <PHFormText defaultChildren={welcomeString}></PHFormText><br />\r\n        </Form.Group>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-secondary'\r\n            style={{\r\n              color: 'var(--color)',\r\n              border: '1px solid var(--color)',\r\n            }}\r\n            onClick={() => navigate('/')}>\r\n            홈으로 가기\r\n          </Button>\r\n          <Button\r\n            variant='primary'\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n        </div>\r\n        {\r\n          welcomePageState.goToMailDomain && <div className='accountSubBtnContainer'>\r\n            <OverlayTrigger\r\n              placement='bottom'\r\n              overlay={(tooltipProps) => <Tooltip {...tooltipProps}>{welcomePageState.mailDomain}</Tooltip>} >\r\n              <Button\r\n                style={{ width: '100%' }}\r\n                variant='outline-primary'\r\n                onClick={welcomePageState.goToMailDomain}\r\n                onMouseDown={welcomePageState.goToMailDomain}>\r\n                이메일 주소의 도메인으로 가기<br />\r\n                <small>(마우스 스크롤 버튼으로 새 탭에서 여세요!)</small>\r\n              </Button>\r\n            </OverlayTrigger>\r\n          </div>\r\n        }\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\accountConfig.tsx",["613","614","615","616","617","618","619","620","621","622"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { OverlayTrigger, Tooltip, Spinner, Form, Button } from 'react-bootstrap';\r\nimport Icon from '@mdi/react';\r\nimport { mdiAccountCircle } from '@mdi/js';\r\n\r\nimport { PHButton, PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { ListRow } from 'src/ui/common/element/muListRow';\r\n\r\nimport './accountConfig.css';\r\n\r\nimport { AccountNickIDChangeModal } from './modal/nickIdChangeModal';\r\nimport { AccountPasswordChangeModal } from './modal/passwordChangeModal';\r\n\r\nconst RequireSignedIn: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  return <aside style={{ width: 'calc(var(--width-card) * 1.25)' }}>\r\n    <header>\r\n      <p>\r\n        현재 로그인 된 상태가 아니에요,<br />\r\n        계정 설정을 위해서는 로그인을 해 주세요.\r\n      </p>\r\n    </header>\r\n    <PHButton\r\n      onClick={() => navigate('/account/signin')}\r\n      variant='info'\r\n      size='medium'>\r\n      로그인\r\n    </PHButton>\r\n  </aside>;\r\n}\r\n\r\nexport const AccountConfig = () => {\r\n  const [accountConfigState, setAccountConfigState] = useState({\r\n    showNickIdChangeModal: false,\r\n    showPasswordChangeModal: false,\r\n  });\r\n  const navigate = useNavigate();\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  return <section className='accountMain' >\r\n    <AccountNickIDChangeModal\r\n      modalShowState={accountConfigState.showNickIdChangeModal}\r\n      setModalShowState={(newModalState: boolean) => setAccountConfigState({\r\n        ...accountConfigState,\r\n        showNickIdChangeModal: newModalState,\r\n      })} />\r\n    <AccountPasswordChangeModal\r\n      modalShowState={accountConfigState.showPasswordChangeModal}\r\n      setModalShowState={(newModalState: boolean) => setAccountConfigState({\r\n        ...accountConfigState,\r\n        showPasswordChangeModal: newModalState,\r\n      })} />\r\n\r\n    <header>\r\n      <h2>계정 설정</h2>\r\n    </header>\r\n\r\n    {\r\n      accountInfo.isFetching\r\n        ? <><br /><br />\r\n          <Spinner animation='border' role='status'>\r\n            <span className='visually-hidden'>불러오는 중이에요...</span>\r\n          </Spinner>\r\n        </>\r\n        : accountInfo.isSignedIn ? <aside className='accountConfigAside'>\r\n          <div className='accountConfigProfileInfoContainer'>\r\n            {/* User profile image / nickname / id / email */}\r\n            <div\r\n              className='accountConfigProfileImgContainer'\r\n              title='프로필 이미지'\r\n              onClick={() => alert('아직 준비 중이에요,\\n조금만 기다려주세요ㅠㅜ')}>\r\n              {\r\n                accountInfo.img_url\r\n                ? <img\r\n                  className='accountConfigProfileImg'\r\n                  alt='profile image'\r\n                  src={accountInfo.img_url || 'https://picsum.photos/200/300'} />\r\n                : <Icon path={mdiAccountCircle} size='10rem' />\r\n              }\r\n              <div className='accountConfigProfileImgChangeTextContainer'>\r\n                이미지 변경\r\n              </div>\r\n            </div>\r\n            <div className='accountConfigNickEmailContainer'>\r\n              <h4 className='accountConfigNick' title='별칭'>\r\n                {accountInfo.nick}&nbsp;\r\n                <div className='accountConfigUuid' title='고유번호'>\r\n                  #{accountInfo.uuid}\r\n                </div>\r\n              </h4>\r\n              <p className='accountConfigId' title='아이디'>@{accountInfo.id}</p>\r\n              <p title='이메일'>\r\n                <div>\r\n                  이메일 : {accountInfo.email}&nbsp;&nbsp;\r\n                </div>\r\n                <sup title='이메일 인증 여부' style={{ top: '0' }}>\r\n                  {accountInfo.emailVerified ? '메일 인증됨' : '메일 인증되지 않음'}\r\n                </sup>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className='accountConfigGoToBtnContainer'>\r\n            <Button\r\n              variant='link'\r\n              onClick={() => setAccountConfigState({ ...accountConfigState, showNickIdChangeModal: true, })}\r\n              className='accountConfigGoToBtn'>\r\n              {/* Change id / nick */}\r\n              아이디 / 별칭 변경\r\n            </Button>\r\n            <Button\r\n              variant='link'\r\n              onClick={() => setAccountConfigState({ ...accountConfigState, showPasswordChangeModal: true, })}\r\n              className='accountConfigGoToBtn'>\r\n              {/* Change password */}\r\n              비밀번호 변경\r\n            </Button>\r\n            <Button\r\n              variant='link'\r\n              onClick={() => navigate('/account/deactivate')}\r\n              className='accountConfigGoToBtn'>\r\n              {/* Deactivate account */}\r\n              계정 비활성화\r\n            </Button>\r\n\r\n          </div>\r\n        </aside> : <RequireSignedIn />\r\n    }\r\n\r\n  </section >;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\changePassword.tsx",["623","624","625","626","627","628","629"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { parse_host } from 'tld-extract';\r\n\r\nimport { OverlayTrigger, Tooltip, Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nexport const AccountPasswordChange = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>비밀번호 변경</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>현재 비밀번호</Form.Label>\r\n          <PHFormText defaultChildren={descriptionString}></PHFormText><br />\r\n          <Form.Control type=\"password\" placeholder=\"someone@example.com\" /><br />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>새 비밀번호</Form.Label>\r\n          <PHFormText defaultChildren={descriptionString}></PHFormText><br />\r\n          <Form.Control type=\"email\" placeholder=\"someone@example.com\" /><br />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>새 비밀번호 확인</Form.Label>\r\n          <PHFormText defaultChildren={descriptionString}></PHFormText><br />\r\n          <Form.Control type=\"email\" placeholder=\"someone@example.com\" /><br />\r\n        </Form.Group>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='info'\r\n            type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={() => {\r\n              setAccountPasswordResetFormData({\r\n                ...accountPasswordResetFormData,\r\n                isProcessing: true,\r\n              });\r\n              setTimeout(() => {\r\n                setAccountPasswordResetFormData({\r\n                  ...accountPasswordResetFormData,\r\n                  isProcessing: false,\r\n                });\r\n                alert('해당 이메일 주소와 연결된 계정이 있다면,\\n비밀번호 초기화 메일이 전송돼요.\\n해당 메일에서 계속 진행해주세요!');\r\n                navigate('/account/signin');\r\n              }, 5000);\r\n            }}\r\n            showSpinner={accountPasswordResetFormData.isProcessing}>\r\n            비밀번호 초기화\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\modal\\nickIdChangeModal.tsx",["630","631"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { refreshAccessTokenActionCreatorAsync } from 'src/redux/modules/account/action_creator';\r\nimport { isEmail } from 'validator';\r\n\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport FrostAPI from 'src/network/api';\r\n\r\ninterface AccountNickIDChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    nickTextFieldValue: string;\r\n    nickNotUsableReason: string;\r\n    idTextFieldValue: string;\r\n    idNotUsableReason: string;\r\n    nickIdChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountNickIDChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        id: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디를 입력해주세요.',\r\n                };\r\n            } else if (str.length < 4) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n                };\r\n            } else if (48 < str.length) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(str);\r\n            if (strType.has('e') || strType.has('s')) {\r\n                return {\r\n                    success: false,\r\n                    idNotUsableReason: '새 아이디에 사용할 수 없는 글자가 포함되어 있어요,\\n공백, 특수문자 등을 빼고 다시 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return { success: true, idNotUsableReason: null };\r\n        },\r\n        nick: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    nickNotUsableReason: '별칭을 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                nickNotUsableReason: null,\r\n            };\r\n        },\r\n    };\r\n    const FrostErrorToAccountNickIdChangeError = (err: FrostError) => {\r\n        if (!err)\r\n            return { nickIdChangeFailedReason: null };\r\n        if (err.route !== 'account')\r\n            return { nickIdChangeFailedReason: null };\r\n        // We need to set Frost's error message(showMsg)\r\n        // to proper (id|nick)NotUsableReason field or nickIdChangeFailedReason.\r\n        const errShowMsg = err.message;\r\n        const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'nickIdChangeFailedReason';\r\n\r\n        return { [errFieldName]: errShowMsg, };\r\n    };\r\n\r\n    const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [nickIdChangeModalState, setNickIdChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        nickTextFieldValue: accountInfo.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: accountInfo.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    });\r\n    // Reset form inputs when accountInfo changed or modal showed/disappeared.\r\n    useEffect(() => setNickIdChangeModalState({\r\n        ...nickIdChangeModalState,\r\n        nickTextFieldValue: accountInfo.nick ?? '',\r\n        nickNotUsableReason: '',\r\n        idTextFieldValue: accountInfo.id ?? '',\r\n        idNotUsableReason: '',\r\n        nickIdChangeFailedReason: '',\r\n    }), [accountInfo, props.modalShowState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!nickIdChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountNickIDChangeModalStateType) => {\r\n        const tempModalState: AccountNickIDChangeModalStateType = { ...(modalState ?? nickIdChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    };\r\n    const handleInputChange = (fieldName: string) => (e: Event) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n        const checkerResult = InputChecker[fieldName](fieldValue.trim());\r\n        delete (checkerResult.success);\r\n\r\n        setNickIdChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...checkerResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const whatChanged = () => {\r\n        // Trim and test\r\n        const tempModalState = getTrimmedState();\r\n        return {\r\n            nick: tempModalState.nickTextFieldValue !== accountInfo.nick,\r\n            id: tempModalState.idTextFieldValue !== accountInfo.id\r\n        };\r\n    };\r\n    const getSubmitBtnText = () => {\r\n        const result = whatChanged();\r\n        if (result.id && result.nick) {\r\n            return '아이디 및 별칭 수정하기';\r\n        } else if (result.id) {\r\n            return '아이디 수정하기';\r\n        } else if (result.nick) {\r\n            return '별칭 수정하기';\r\n        } else {\r\n            return '수정된 정보가 없어요';\r\n        }\r\n    };\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (nickIdChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['id', 'nick'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult: string = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setNickIdChangeModalState({\r\n            ...nickIdChangeModalState,\r\n            nickTextFieldValue: accountInfo.nick ?? '',\r\n            nickNotUsableReason: '',\r\n            idTextFieldValue: accountInfo.id ?? '',\r\n            idNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountInfoChange = () => {\r\n        // Trim all strings in states\r\n        const tempModalState = getTrimmedState();\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        const isChanged = whatChanged();\r\n        if (!isChanged.id && !isChanged.nick) {\r\n            // Stats are not modified, just close it.\r\n            setNickIdChangeModalState(prevState => ({\r\n                ...prevState,\r\n                isProcessing: false,\r\n            }));\r\n            return;\r\n        }\r\n\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        ['id', 'nick'].map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setNickIdChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return;\r\n\r\n        (new FrostAPI())\r\n            .modifyAccountInfo({\r\n                ...((isChanged.id) ? { id: tempModalState.idTextFieldValue, } : {}),\r\n                ...((isChanged.nick) ? { nickname: tempModalState.nickTextFieldValue, } : {}),\r\n            })\r\n            .then(() => {\r\n                setNickIdChangeModalState(prevState => ({ ...prevState, isProcessing: false, }));\r\n                dispatch(refreshAccessTokenActionCreatorAsync(true));\r\n                closeModalFunc();\r\n            })\r\n            .catch((reason: FrostError) => {\r\n                console.log(reason);\r\n                console.log(reason.debugMessage);\r\n                setNickIdChangeModalState(prevState => ({\r\n                    ...prevState,\r\n                    isProcessing: false,\r\n                    ...FrostErrorToAccountNickIdChangeError(reason),\r\n                }));\r\n            });\r\n\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    아이디 및 별칭 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>아이디</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 아이디를 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.idTextFieldValue}\r\n                        onChange={handleInputChange('id')} />\r\n                    <PHFormText>{nickIdChangeModalState.idNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>별칭</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='여기에 새로 사용하실 별칭을 적어주세요.'\r\n                        disabled={nickIdChangeModalState.isProcessing}\r\n                        value={nickIdChangeModalState.nickTextFieldValue}\r\n                        onChange={handleInputChange('nick')} />\r\n                    <PHFormText>{nickIdChangeModalState.nickNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n                <PHFormText>{nickIdChangeModalState.nickIdChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                되돌리기\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={nickIdChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountInfoChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={nickIdChangeModalState.isProcessing}>\r\n                {getSubmitBtnText()}\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\modal\\passwordChangeModal.tsx",["632","633"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport FrostAPI from 'src/network/api';\r\n\r\ninterface AccountPasswordChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    currentPwTextFieldValue: string;\r\n    currentPwNotUsableReason: string;\r\n    newPwTextFieldValue: string;\r\n    newPwNotUsableReason: string;\r\n    newPwReTypeTextFieldValue: string;\r\n    newPwReTypeNotUsableReason: string;\r\n    pwChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountPasswordChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        currentPw: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                currentPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPw: (currentPwStr: string, newPwStr: string) => {\r\n            if (!newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호를 입력해주세요,\\n',\r\n                };\r\n            } else if (!currentPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '현재 사용 중인 비밀번호를 먼저 입력해주세요,\\n',\r\n                };\r\n            } else if (currentPwStr === newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        '새로운 비밀번호가 현재 사용 중으로 적으신 비밀번호와 같아요,\\n'\r\n                        + '다른 비밀번호를 적어주세요.\\n',\r\n                };\r\n            } else if (newPwStr.length < 8) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,\\n',\r\n                };\r\n            } else if (1024 < newPwStr.length) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        `새 비밀번호로 ${newPwStr.length}자는 너어어어무 길어요!\\n`\r\n                        + '새 비밀번호는 1024자 이하로 해 주시고,\\n',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(newPwStr);\r\n            if (strType.has('e')) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,',\r\n                };\r\n            } else if (strType.size < 2) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                newPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPwReType: (pwStr: string, pwReTypeStr: string) => {\r\n            if (!pwReTypeStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.',\r\n                };\r\n            } else if (pwStr === pwReTypeStr) {\r\n                return {\r\n                    success: true,\r\n                    newPwReTypeNotUsableReason: null,\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.',\r\n            };\r\n        },\r\n    };\r\n    const FrostErrorToPasswordChangeError = (err: FrostError) => {\r\n        if (!err)\r\n            return { signUpFailedReason: null };\r\n        if (err.route !== 'account/change-password')\r\n            return { signUpFailedReason: null };\r\n        // We need to set Frost's error message(showMsg)\r\n        // to proper (currentPw|newPw|newPwReType)NotUsableReason field or pwChangeFailedReason.\r\n        const errShowMsg = err.message;\r\n        const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'pwChangeFailedReason';\r\n\r\n        return { [errFieldName]: errShowMsg, };\r\n    };\r\n\r\n    const passwordRuleText = '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.';\r\n\r\n    const navigate = useNavigate();\r\n    const [passwordChangeModalState, setPasswordChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    });\r\n    useEffect(() => setPasswordChangeModalState({\r\n        ...passwordChangeModalState,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    }), [props.modalShowState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!passwordChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountPasswordChangeModalStateType) => {\r\n        const tempModalState: AccountPasswordChangeModalStateType = { ...(modalState ?? passwordChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    };\r\n    const handleInputChange = (fieldName: string) => (e: Event) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n        let fieldCheckResult = undefined;\r\n        switch (fieldName) {\r\n            case 'newPw':\r\n                fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'newPwReType':\r\n                fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'currentPw':\r\n            default:\r\n                fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                break;\r\n        }\r\n        delete (fieldCheckResult.success);\r\n\r\n        setPasswordChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...fieldCheckResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (passwordChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setPasswordChangeModalState({\r\n            ...passwordChangeModalState,\r\n\r\n            currentPwTextFieldValue: '',\r\n            currentPwNotUsableReason: '',\r\n            newPwTextFieldValue: '',\r\n            newPwNotUsableReason: '',\r\n            newPwReTypeTextFieldValue: '',\r\n            newPwReTypeNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountPasswordChange = () => {\r\n        // Trim all strings in states\r\n        const tempModalState = getTrimmedState();\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return;\r\n\r\n        (new FrostAPI()).changePassword(\r\n            tempModalState.currentPwTextFieldValue,\r\n            tempModalState.newPwTextFieldValue,\r\n            tempModalState.newPwReTypeTextFieldValue)\r\n            .then(\r\n                () => {\r\n                    setPasswordChangeModalState(prevState => ({ ...prevState, isProcessing: false, }));\r\n                    alert('비밀번호가 변경되었습니다!');\r\n                    closeModalFunc();\r\n                },\r\n                (reason: FrostError) => {\r\n                    setPasswordChangeModalState(prevState => ({\r\n                        ...prevState,\r\n                        isProcessing: false,\r\n                        ...FrostErrorToPasswordChangeError(reason),\r\n                    }));\r\n                }\r\n            );\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    비밀번호 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>현재 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='current-password'\r\n                        placeholder='여기에 현재 사용 중인 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.currentPwTextFieldValue}\r\n                        onChange={handleInputChange('currentPw')} />\r\n                    <PHFormText>{passwordChangeModalState.currentPwNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 새로 사용하실 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwTextFieldValue}\r\n                        onChange={handleInputChange('newPw')} />\r\n                    <PHFormText defaultChildren={passwordRuleText}>\r\n                        {passwordChangeModalState.newPwNotUsableReason\r\n                            ? passwordChangeModalState.newPwNotUsableReason + passwordRuleText : ''}\r\n                    </PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호 확인</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 위에 입력하신 새 비밀번호를 다시 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwReTypeTextFieldValue}\r\n                        onChange={handleInputChange('newPwReType')} />\r\n                    <PHFormText>{passwordChangeModalState.newPwReTypeNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <PHFormText>{passwordChangeModalState.pwChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                초기화\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountPasswordChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={passwordChangeModalState.isProcessing}>\r\n                비밀번호 변경\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\deactivate.tsx",["634"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { accountDeactivateActionCreatorAsync } from 'src/redux/modules/account/action_creator';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\n\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport './account.css';\r\n\r\ninterface AccountDeactivateStateType {\r\n  isInitialized: boolean;\r\n  isProcessing: boolean;\r\n\r\n  pwTextFieldValue: string;\r\n  pwNotUsableReason: string;\r\n  accountDeactivateFailedReason: string;\r\n}\r\n\r\nexport const AccountDeactivate = () => {\r\n  const InputChecker = {\r\n    pw: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호를 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return { success: true, pwNotUsableReason: null };\r\n    },\r\n  };\r\n  const FrostErrorToAccountDeactivationError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signUpFailedReason: null };\r\n    if (err.route !== 'account/deactivate')\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper pwNotUsableReason field or accountDeactivateFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'pwChangeFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [accountDeactivateFormData, setAccountDeactivateFormData] = useState({\r\n    isInitialized: false,\r\n    isProcessing: false,\r\n\r\n    pwTextFieldValue: '',\r\n    pwNotUsableReason: '',\r\n    accountDeactivateFailedReason: '',\r\n  });\r\n  useEffect(() => {\r\n    if (!accountDeactivateFormData.isInitialized && !accountInfo.isFetching) {\r\n      setAccountDeactivateFormData(prevState => ({\r\n        ...prevState,\r\n        isInitialized: true,\r\n      }));\r\n    }\r\n\r\n    if (accountDeactivateFormData.isInitialized && !accountInfo.isFetching) {\r\n      if (!accountDeactivateFormData.isProcessing && !accountInfo.isSignedIn) {\r\n        // User got this page without signing in.\r\n        alert('로그인 후에 사용하실 수 있어요.');\r\n        navigate('/');\r\n      } else if (accountDeactivateFormData.isProcessing && accountInfo.frostErrorObj) {\r\n        // Error raised while deactivating account, parse error and show proper message.\r\n        if (accountInfo.frostErrorObj.apiResponse?.subCode === 'user.deactivated') {\r\n          alert(accountInfo.frostErrorObj.message);\r\n          setAccountDeactivateFormData(prevState => ({\r\n            ...prevState,\r\n            isProcessing: false,\r\n          }));\r\n          navigate('/');\r\n          return;\r\n        }\r\n        setAccountDeactivateFormData(prevState => ({\r\n          ...prevState,\r\n          isProcessing: false,\r\n          ...FrostErrorToAccountDeactivationError(accountInfo.frostErrorObj),\r\n        }));\r\n      } else if (accountDeactivateFormData.isProcessing && !accountInfo.isSignedIn) {\r\n        // User successfully deactivated.\r\n        alert('계정이 정상적으로 비활성화됐어요,\\n이용해주셔서 감사합니다!');\r\n        setAccountDeactivateFormData(prevState => ({\r\n          ...prevState,\r\n          isProcessing: false,\r\n        }));\r\n        navigate('/');\r\n      }\r\n    }\r\n  }, [accountInfo, accountDeactivateFormData.isInitialized, accountDeactivateFormData.isProcessing]);\r\n\r\n  const getTrimmedState = (modalState?: AccountDeactivateStateType) => {\r\n    const tempModalState: AccountDeactivateStateType = { ...(modalState ?? accountDeactivateFormData), };\r\n    for (const key in tempModalState)\r\n      if (typeof (tempModalState[key]) === 'string')\r\n        tempModalState[key] = tempModalState[key].trim();\r\n\r\n    return tempModalState;\r\n  };\r\n  const handleInputChange = (fieldName: string) => (e: Event) => {\r\n    const fieldStateKey = `${fieldName}TextFieldValue`;\r\n    const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n    const checkerResult = InputChecker[fieldName](fieldValue.trim());\r\n    delete (checkerResult.success);\r\n\r\n    setAccountDeactivateFormData((prevState) => ({\r\n      ...prevState,\r\n      ...checkerResult,\r\n      [fieldStateKey]: fieldValue,\r\n    }));\r\n  };\r\n\r\n  const shouldSubmitBtnDisabled = () => {\r\n    if (accountDeactivateFormData.isProcessing)\r\n      return true;\r\n\r\n    const tempModalState = getTrimmedState();\r\n    let isFormCheckSuccess = true;\r\n    ['pw',].map(fieldName => {\r\n      const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult: string = InputChecker[fieldName](fieldValue);\r\n\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        // And also, we are in a map function, so we cannot return directly here,\r\n        // we need to store the result somewhere outside of the function.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n    });\r\n\r\n    return !isFormCheckSuccess;\r\n  };\r\n\r\n  const tryAccountDeactivate = () => {\r\n    // Trim all strings in states\r\n    const tempModalState = getTrimmedState();\r\n    setAccountDeactivateFormData(prevState => ({\r\n      ...prevState,\r\n      ...tempModalState,\r\n      isProcessing: true,\r\n    }));\r\n\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    ['pw',].map(fieldName => {\r\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        // And also, we are in a map function, so we cannot return directly here,\r\n        // we need to store the result somewhere outside of the function.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    setAccountDeactivateFormData(prevState => ({\r\n      ...prevState,\r\n      ...resultFormCheckData,\r\n      isProcessing: isFormCheckSuccess,\r\n    }));\r\n\r\n    if (!isFormCheckSuccess)\r\n      return;\r\n\r\n    dispatch(accountDeactivateActionCreatorAsync(\r\n      accountInfo.email,\r\n      tempModalState.pwTextFieldValue,\r\n    ));\r\n  };\r\n\r\n  let accountDeactivateDescription = '계정을 비활성화 시 생성하신 PlayCo의 재생목록이 차단 상태로 되고,\\n';\r\n  accountDeactivateDescription += '이 이메일로 MUdev.cc에 다시 가입을 하실 수 없으며, 비활성화는 되돌릴 수 없어요!\\n';\r\n  accountDeactivateDescription += '계속 진행하시려면 아래에 현재 비밀번호를 입력 후\\n<비활성화하기> 버튼을 눌러주세요.\\n';\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 비활성화</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>계정을 정말 비활성화 하실건가요?</Form.Label>\r\n          <PHFormText defaultChildren={accountDeactivateDescription} />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            autoComplete='current-password'\r\n            placeholder='여기에 현재 사용 중이신 비밀번호를 적어주세요.'\r\n            disabled={accountDeactivateFormData.isProcessing}\r\n            value={accountDeactivateFormData.pwTextFieldValue}\r\n            onChange={handleInputChange('pw')} />\r\n          <PHFormText>{accountDeactivateFormData.pwNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText>{accountDeactivateFormData.accountDeactivateFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='primary'\r\n            disabled={accountDeactivateFormData.isProcessing}\r\n            onClick={() => navigate(-1)}>\r\n            취소하기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='danger'\r\n            type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            disabled={shouldSubmitBtnDisabled()}\r\n            onClick={tryAccountDeactivate}\r\n            showSpinner={accountDeactivateFormData.isProcessing}>\r\n            비활성화하기\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\redux\\modules\\account\\action_creator.ts",["635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655"],"import { Dispatch } from 'redux';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from '../../../network/api';\r\n\r\nimport {\r\n    ACCOUNT_FETCHING,\r\n    SIGNED_IN,\r\n    SIGNED_OUT,\r\n    FORCE_SET_ACCOUNTINFO,\r\n} from './action';\r\nimport { AccountInfo } from './model';\r\n\r\nexport const removeFrostErrorFromStateActionCreator = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FORCE_SET_ACCOUNTINFO,\r\n        accountInfo: new AccountInfo({\r\n            ...(getState().accountReducer || {}),\r\n            frostErrorObj: undefined,\r\n        }),\r\n    });\r\n};\r\n\r\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    return (new FrostAPI())\r\n        .signIn(idOrEmail, password)\r\n        .then(\r\n            (result: FrostAPI) => dispatch({\r\n                type: SIGNED_IN,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: true,\r\n                    uuid: result.userData.uuid,\r\n                    id: result.userData.id,\r\n                    nick: result.userData.nickname,\r\n                    email: result.userData.email,\r\n                    emailVerified: result.userData.email_verified,\r\n                    profileImageUrl: result.userData.profile_image,\r\n                }),\r\n            }),\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signUp(id, email, password, nick)\r\n        .then(\r\n            (api: FrostAPI) => {\r\n                if (api.isSignedInWithoutAsync()) {\r\n                    dispatch({\r\n                        type: SIGNED_IN,\r\n                        accountInfo: new AccountInfo({\r\n                            isSignedIn: true,\r\n                            isSignedUp: true,\r\n\r\n                            uuid: api.userData.uuid,\r\n                            id: api.userData.id,\r\n                            nick: api.userData.nickname,\r\n                            email: api.userData.email,\r\n                            emailVerified: api.userData.email_verified,\r\n                            profileImageUrl: api.userData.profile_image,\r\n                        }),\r\n                    });\r\n                } else {\r\n                    // User successfully signed up, but needs email verification.\r\n                    dispatch({\r\n                        type: SIGNED_OUT,\r\n                        accountInfo: new AccountInfo({\r\n                            isSignedUp: true,\r\n                        }),\r\n                    });\r\n                }\r\n            },\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const signOutActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signOut()\r\n        .finally(\r\n            () => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({ isSignedIn: false }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const refreshAccessTokenActionCreatorAsync = (forceRefresh = false) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .refreshAuthentications(forceRefresh)\r\n        .then((result: FrostAPI) => dispatch({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n                emailVerified: result.userData.email_verified,\r\n                profileImageUrl: result.userData.profile_image,\r\n            }),\r\n        }))\r\n        .catch((reason: FrostError) => dispatch({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        }));\r\n};\r\n\r\nexport const accountDeactivateActionCreatorAsync = (email: string, pw: string) => async (dispatch, getState) => {\r\n    // Save previous state before dispatching something.\r\n    const prevState: AccountInfo = getState().accountReducer;\r\n\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .deactivate(email, pw)\r\n        .then(() => dispatch({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({ isSignedIn: false }),\r\n        }))\r\n        .catch((reason: FrostError) => dispatch({\r\n            // Guessing out what was the last action using previous account state.\r\n            type: prevState.isSignedIn ? SIGNED_IN : SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                // Rollback to previous state, and save FrostError obj.\r\n                ...prevState,\r\n                frostErrorObj: reason,\r\n            }),\r\n        }));\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\account\\welcomeToMuDev.tsx",["656"],"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './account.css';\r\n\r\nexport const WelcomeToMuDev = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 만들기</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>MUdev.cc에 오신 것을 환영합니다!</Form.Label><br />\r\n        </Form.Group>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <>&nbsp;</>\r\n          <Button\r\n            variant='primary'\r\n            onClick={() => navigate('/')}>\r\n            홈으로 가기\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\my_skills.jsx",["657","658","659","660"],"import React, { useState } from 'react';\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Divider } from 'src/ui/common/element/divider';\r\n\r\nimport './introduce.css';\r\n\r\nexport const HomeMySkillsSection = props => {\r\n  const [mySkillState, setMySkillState] = useState({\r\n    backendDetailFold: true,\r\n    backendWasSubDetailFold: true,\r\n    backendLinuxSubDetailFold: true,\r\n    backendAwsSubDetailFold: true,\r\n    backendEtcSubDetailFold: true,\r\n\r\n    frontendDetailFold: true,\r\n    applicationDetailFold: true,\r\n    pythonDetailFold: true,\r\n    etcDetailFold: true,\r\n  });\r\n  const toggleDetails = (detailName) => (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const keyName = `${detailName}DetailFold`;\r\n    setMySkillState(prevState => ({ ...prevState, [keyName]: !prevState[keyName], }));\r\n  };\r\n  const isAllDetailsFolded = () => {\r\n    let isAllValueFalse = true;\r\n    const tempModalState = { ...mySkillState };\r\n    for (const key in tempModalState)\r\n      if (typeof (tempModalState[key]) === 'boolean' && tempModalState[key])\r\n        if (isAllValueFalse) isAllValueFalse = false;\r\n\r\n    return isAllValueFalse;\r\n  };\r\n  const toggleAllDetails = () => {\r\n    const isAllValueFalse = isAllDetailsFolded();\r\n\r\n    setMySkillState(prevState => ({\r\n      ...prevState,\r\n\r\n      backendDetailFold: isAllValueFalse,\r\n      backendWasSubDetailFold: isAllValueFalse,\r\n      backendLinuxSubDetailFold: isAllValueFalse,\r\n      backendAwsSubDetailFold: isAllValueFalse,\r\n      backendEtcSubDetailFold: isAllValueFalse,\r\n\r\n      frontendDetailFold: isAllValueFalse,\r\n      applicationDetailFold: isAllValueFalse,\r\n      pythonDetailFold: isAllValueFalse,\r\n      etcDetailFold: isAllValueFalse,\r\n    }));\r\n  };\r\n\r\n  return <section className='homeIntroduceSection' id='skills'>\r\n    <header>\r\n      <h2>Skills</h2>\r\n      <p>\r\n        저는 가능한 많은 경험으로 배우고 성장하려 노력합니다.<br />\r\n        아래의 몇몇 경험들은 제 취미로 진행한 것으로 서로 연관이 없어 보일 수 있지만,\r\n        <ul>\r\n          <li>Python으로 웹 사이트 파서를 작성하면서 멀티 스레드 / 멀티 프로세싱과 이에 맞는 디자인 패턴을 배웠고</li>\r\n          <li>AVR MCU와 ESP32와 같은 임베디드 환경에서 코드를 작성하며 최적화를 진지하게 고민하게 되었으며</li>\r\n          <li>3D 모델 뷰어를 작성하며 자연스레 브라우저의 CSSOM과 DOM을 이해하게 되는 등</li>\r\n        </ul>\r\n        다양한 경험은 저의 안목과 식견을 넓히는 기회가 되었다고 생각합니다.\r\n      </p>\r\n    </header>\r\n    <Divider style={{ margin: '1rem' }} />\r\n\r\n    <small style={{ color: 'var(--color-75)' }}>\r\n      각 제목을 클릭 시 접거나 펼칠 수 있습니다. <a onClick={toggleAllDetails} className='homeSkillsFoldBtn'>\r\n        전부 {isAllDetailsFolded() ? '펼치시려면' : '접으시려면'} 여기를 눌러주세요.</a>\r\n    </small>\r\n\r\n    <article className='homeIntroduceArticle homeSkillsArticle'>\r\n      <aside>\r\n        <details open={mySkillState.backendDetailFold} style={{ margin: '.5rem' }}>\r\n          <summary\r\n            className='homeSkillsDetailsSummary'\r\n            style={{ fontSize: '1.5rem' }}\r\n            onClick={toggleDetails('backend')}>\r\n            <h5>백엔드 개발</h5>\r\n          </summary>\r\n          <p>\r\n            <ul>\r\n              <li>\r\n                <details open={mySkillState.backendWasSubDetailFold} style={{ margin: '.5rem' }}>\r\n                  <summary\r\n                    className='homeSkillsDetailsSummary'\r\n                    style={{ fontSize: '1.25rem' }}\r\n                    onClick={toggleDetails('backendWasSub')}>\r\n                    <h6>애플리케이션 서버&#40;WAS&#41;</h6>\r\n                  </summary>\r\n                  <ul>\r\n                    <li>\r\n                      API가 RESTful하게 설계한다는 것에 대해 깊은 이해를 하고 있으며,<br />\r\n                      Flask로 RESTful한 API 서버를 구축할 수 있습니다.\r\n                    </li>\r\n                    <li>\r\n                      JWT이 무엇인지 알고 있으며, Refresh Token + Access Token을 사용한 인증 시스템을 구축할 수 있습니다.<br />\r\n                      이 사이트 또한 Refresh Token과 Access Token을 사용하여 인증하고 있습니다.\r\n                    </li>\r\n                    <li>HTTP Cookie와 이것의 속성인 HTTP Only와 Secure에 대해 알고 있습니다.</li>\r\n                    <li>\r\n                      SQLite나 PostgreSQL 등의 RDB나 Redis같은 In-memory 데이터 스토어를 사용하고,<br />\r\n                      ORM 또는 Raw SQL을 사용할 수 있습니다.\r\n                    </li>\r\n                  </ul>\r\n                </details>\r\n              </li>\r\n              <li>\r\n                <details open={mySkillState.backendLinuxSubDetailFold} style={{ margin: '.5rem' }}>\r\n                  <summary\r\n                    className='homeSkillsDetailsSummary'\r\n                    style={{ fontSize: '1.25rem' }}\r\n                    onClick={toggleDetails('backendLinuxSub')}>\r\n                    <h6>Linux</h6>\r\n                  </summary>\r\n                  <ul>\r\n                    <li>Debian 기반의 Linux를 주로 다룹니다.</li>\r\n                    <li>Linux Mint 20으로 SAMBA/NFS 서버를 직접 구축해서 사용하고 있습니다.</li>\r\n                    <li>\r\n                      APT/DPKG 등의 패키지 매니저를 사용하며,<br />\r\n                      의존성 꼬임 등의 문제에 대처할 수 있습니다.\r\n                    </li>\r\n                    <li>기본적인 Bash 셸 스크립트을 작성할 수 있습니다.</li>\r\n                    <li>POSIX 기반의 C 언어를 사용한 소켓 프로그래밍을 할 수 있습니다.</li>\r\n                  </ul>\r\n                </details>\r\n              </li>\r\n              <li>\r\n                <details open={mySkillState.backendAwsSubDetailFold} style={{ margin: '.5rem' }}>\r\n                  <summary\r\n                    className='homeSkillsDetailsSummary'\r\n                    style={{ fontSize: '1.25rem' }}\r\n                    onClick={toggleDetails('backendAwsSub')}>\r\n                    <h6>AWS</h6>\r\n                  </summary>\r\n                  <ul>\r\n                    <li>\r\n                      Amazon Web Service의 EC2, RDS, ElastiCache, SQS, Lambda를 사용해본 적이 있습니다.<br />\r\n                      또한, 위 자원들을 Python의 Boto3 라이브러리를 통해 제어할 수 있습니다.\r\n                    </li>\r\n                    <li>\r\n                      AWS SQS나 AWS S3의 트리거로 AWS Lambda를 호출할 수 있습니다.<br />\r\n                      예를 들면, 후술할 프로젝트인 B.Ca에서 과거에는 오래 걸리는 작업을 SQS의 FIFO 큐에 푸시하고,<br />\r\n                      Lambda에서 Pull하여 작업을 처리하는 구성을 사용했었습니다.<br />\r\n                      (현재는 AWS 종속성을 없애는 과정에서 Celery와 Redis로 해당 기능을 이관했습니다.)\r\n                    </li>\r\n                    <li>AWS Lambda와 API Gateway를 사용한 Serverless 아키텍처를 구성할 수 있습니다.</li>\r\n                  </ul>\r\n                </details>\r\n              </li>\r\n              <li>\r\n                <details open={mySkillState.backendEtcSubDetailFold} style={{ margin: '.5rem' }}>\r\n                  <summary\r\n                    className='homeSkillsDetailsSummary'\r\n                    style={{ fontSize: '1.25rem' }}\r\n                    onClick={toggleDetails('backendEtcSub')}>\r\n                    <h6>그 외</h6>\r\n                  </summary>\r\n                  <ul>\r\n                    <li>NGINX로 리버스 프록시를 구성할 수 있습니다.</li>\r\n                    <li>\r\n                      Google API를 통해 Gmail로 메일을 전송할 수 있습니다.<br />\r\n                      예시로, 이 사이트는 회원가입 또는 비밀번호 초기화 시 해당 방식으로 메일을 전송합니다.\r\n                    </li>\r\n                    <li>Firebase Cloud Messaging을 통해 특정 사용자에게 메시지를 푸시할 수 있습니다.</li>\r\n                  </ul>\r\n                </details>\r\n              </li>\r\n            </ul>\r\n          </p>\r\n        </details>\r\n      </aside>\r\n\r\n      <aside>\r\n        <details open={mySkillState.frontendDetailFold} style={{ margin: '.5rem' }}>\r\n          <summary\r\n            className='homeSkillsDetailsSummary'\r\n            style={{ fontSize: '1.25rem' }}\r\n            onClick={toggleDetails('frontend')}>\r\n            <h5>프론트엔드 개발</h5>\r\n          </summary>\r\n          <p>\r\n            <ul>\r\n              <li>\r\n                기본적인 HTML과 CSS, JavaScript를 사용할 수 있으며,<br />\r\n                용도에 맞는 HTML 태그 사용을 지향합니다.\r\n              </li>\r\n              <li>\r\n                React(+JSX)와 Redux를 능숙하게 사용합니다.<br />\r\n                이 사이트도 React 함수형 컴포넌트로 UI를 작성하고 React Hook로 컴포넌트별 상태를 관리하며,<br />\r\n                Redux를 사용하여 사이트 전체 로그인 상태를 관리하도록 작성했습니다.\r\n              </li>\r\n              <li>\r\n                가능한 TypeScript로 타입을 명시하려 하며,<br />\r\n                JavaScript로 개발된 사이트를 TypeScript로 전환할 수 있습니다.\r\n              </li>\r\n              <li>Yarn과 Yarn Berry 사용을 선호합니다.</li>\r\n            </ul>\r\n          </p>\r\n        </details>\r\n      </aside>\r\n\r\n      <aside>\r\n        <details open={mySkillState.applicationDetailFold} style={{ margin: '.5rem' }}>\r\n          <summary\r\n            className='homeSkillsDetailsSummary'\r\n            style={{ fontSize: '1.25rem' }}\r\n            onClick={toggleDetails('application')}>\r\n            <h5>애플리케이션 개발</h5>\r\n          </summary>\r\n          <p>\r\n            <ul>\r\n              <li>\r\n                Java로 안드로이드 네이티브 앱 개발을 할 수 있으며,<br />\r\n                졸업 작품에 Android Jetpack을 사용하여 앱을 개발했습니다.\r\n              </li>\r\n              <li>LiveData와 ViewModel을 사용해서 MVVM 디자인 패턴으로 앱을 설계하고 개발할 수 있습니다.</li>\r\n              <li>Flutter로 크로스플랫폼 앱 개발을 할 수 있습니다.</li>\r\n              <li>교수님께 실력을 인정받아 4학년 2학기에 &lt;안드로이드 프로그래밍(JAVA)&gt; 조교로 근무했습니다.</li>\r\n            </ul>\r\n          </p>\r\n        </details>\r\n      </aside>\r\n\r\n      <aside>\r\n        <details open={mySkillState.pythonDetailFold} style={{ margin: '.5rem' }}>\r\n          <summary\r\n            className='homeSkillsDetailsSummary'\r\n            style={{ fontSize: '1.25rem' }}\r\n            onClick={toggleDetails('python')}>\r\n            <h5>Python</h5>\r\n          </summary>\r\n          <p>\r\n            <div className='homeSkillsArticlePythonDescription'>\r\n              Python은 제 최애 언어라고 할 수 있을 정도로 관심이 많고 자주 사용하는 언어입니다.\r\n              그만큼 새로운 Python 관련 소식을 적극적으로 챙겨보기도 하고,\r\n              Python의 느린 함수 호출 속도 등과 같은 단점에 대해서도 알고 있으며,\r\n              Python의 장점으로 더 좋은 코드를 작성할 수 있을지 고민하기도 합니다.\r\n            </div>\r\n            <ul>\r\n              <li>Flask를 사용해서 RESTful한 웹 애플리케이션 서버를 작성할 수 있습니다.</li>\r\n              <li>magic method, metaclass, decorator 등을 이해하고 적절한 곳에 사용합니다.</li>\r\n              <li>Type hint를 적용하는 법을 알고 프로젝트에 적극적으로 사용합니다.</li>\r\n              <li>\r\n                반복적인 문제 해결을 위해 Python으로 CLI 도구를 만들 수 있습니다.<br />\r\n                예시로, 제 백엔드에서는 아래와 같은 도구를 작성해서 사용하고 있습니다.\r\n                <ul>\r\n                  <li>OpenAPI 문서를 생성하는 도구</li>\r\n                  <li>SQLAlchemy ORM으로 작성된 DB 테이블의 <abbr title='Entity Relationship Diagram'>ERD</abbr>를 생성하는 도구</li>\r\n                  <li>JSON으로 작성된 환경변수 컬렉션을 Bash, PowerShell, ENV 파일 등 여러 타입으로 내보내는 도구</li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                Walrus 연산자와 match-case 구문 등 Python에 최근 추가된 문법에 대해 알고 있으며,<br />\r\n                실제로 Walrus는 이 사이트의 백엔드에 사용되고 있습니다.</li>\r\n              <li>C 언어 단에서 Py_INCREF와 Py_DECREF 매크로 등을 직접 사용해보면서 Python이 내부적으로 메모리를 관리하는 방법을 알고 있습니다.</li>\r\n              <li>C 애플리케이션에 CPython의 dll과 ctypes를 통한 임베딩을 통해 C 함수를 Python에서 호출하거나 Python 객체를 C에서 사용해본 경험이 있습니다.</li>\r\n              <li>PyCon과 같은 컨퍼런스를 자주 챙겨봅니다.</li>\r\n            </ul>\r\n          </p>\r\n        </details>\r\n      </aside>\r\n\r\n      <aside>\r\n        <details open={mySkillState.etcDetailFold} style={{ margin: '.5rem' }}>\r\n          <summary\r\n            className='homeSkillsDetailsSummary'\r\n            style={{ fontSize: '1.25rem' }}\r\n            onClick={toggleDetails('etc')}>\r\n            <h5>그 외</h5>\r\n          </summary>\r\n          <p>\r\n            <ul>\r\n              <li>Git을 사용할 줄 알고, Branch 등을 사용할 수 있습니다.</li>\r\n              <li>AVR 8비트 MCU를 다룰 줄 알며, ATmega2560의 <abbr title='eXternal MEMory Interface'>XMEM 인터페이스</abbr>로 <abbr title='AY-3-8910 Programmable Sound Generator(PSG)'>과거 80년대를 풍미한 음원칩</abbr>을 제어할 수 있습니다.</li>\r\n              <li>SDL2와 OpenGL 3로 간단한 3D 렌더러를 만들 줄 알며, 이것을 WASM으로 빌드해서 최신 웹 브라우저에서 실행시킬 수 있습니다.</li>\r\n            </ul>\r\n          </p>\r\n        </details>\r\n      </aside>\r\n    </article>\r\n  </section>;\r\n};\r\n","C:\\Users\\MUsoftware\\Desktop\\project\\MUsoftware\\mudev.cc\\src\\ui\\page\\home\\home_section\\projects.tsx",["661","662","663","664"],"import React from 'react';\r\nimport GitHubButton from 'react-github-btn';\r\nimport { Divider } from 'src/ui/common/element/divider';\r\nimport { ListRow } from 'src/ui/common/element/muListRow';\r\n\r\nimport './introduce.css';\r\nimport './projects.css';\r\n\r\nconst ProjectDescRow: () => React.FC = (props: {\r\n  projectName: string;\r\n  projectAs?: string;\r\n  projectPart?: string;\r\n  projectPeriod: string;\r\n  additionalClass?: string;\r\n} & defaultProps) => <div className={`projectDescRow ${props.additionalClass ?? ''}`}>\r\n    <header className='projectDescTitle'>\r\n      <h4 className='projectName'>{props.projectName}</h4>\r\n      {props.projectAs && <p className='projectAs'>{props.projectAs}</p>}\r\n      {props.projectPart && <p className='projectPart'>{props.projectPart}</p>}\r\n      <p className='projectPeriod'>{props.projectPeriod}</p>\r\n    </header>\r\n    <div className='projectDescBody'>\r\n      {props.children}\r\n    </div>\r\n  </div>;\r\n\r\nconst TechStackTag: () => React.FC = (props: {\r\n  bgColor: string;\r\n  textColor?: string;\r\n  techName: string;\r\n}) => <sup\r\n  className='projectTechStackTag'\r\n  style={{\r\n    backgroundColor: props.bgColor,\r\n    color: props.textColor ?? 'rgba(255, 255, 255, 1)',\r\n  }} >\r\n    {props.techName}\r\n  </sup>;\r\n\r\nconst MuGithubButton: () => React.FC = (props: {\r\n  repoName: string;\r\n  btnText?: string;\r\n  icon?: string;\r\n  small?: boolean;\r\n  disableHighContrast?: boolean;\r\n  generateTemplate?: boolean;\r\n}) => {\r\n  let colorScheme = 'no-preference: light_high_contrast; ';\r\n  colorScheme += 'light: light_high_contrast; ';\r\n  colorScheme += 'dark: light_high_contrast; ';\r\n\r\n  const hrefResult = `https://github.com/${props.repoName}/${props.generateTemplate ? 'generate' : ''}`;\r\n\r\n  return <div className='projectGithubBtn'>\r\n    <GitHubButton\r\n      data-color-scheme={props.disableHighContrast ? false : colorScheme}\r\n      data-size={props.small ? false : 'large'}\r\n      data-icon={props.icon ?? false}\r\n      href={hrefResult}>\r\n      {`\\u00A0${props.btnText ?? props.repoName}`}\r\n    </GitHubButton>\r\n  </div>;\r\n}\r\n\r\nexport const HomeProjectsByMUSection = props => {\r\n  return <section className='homeIntroduceSection homeProjectsSection' id='projects'>\r\n    <header>\r\n      <h2>프로젝트</h2>\r\n    </header>\r\n    <Divider style={{ marginTop: '2rem' }} />\r\n\r\n    <article className='homeProjectsArticle'>\r\n      <ProjectDescRow\r\n        projectName='Frost'\r\n        projectAs='개인 프로젝트'\r\n        projectPeriod='2020.12 - 진행 중' >\r\n        <p className='projectDescParagraph'>\r\n          <abbr title='Flask based Restful Oriented Server Template'>Frost</abbr>는 Flask 기반의 REST API 서버 템플릿입니다.<br />\r\n          이 템플릿은...\r\n          <ul>\r\n            <li>Python의 Decorator를 활용한 API 요청 필드 검증 및 라우트 문서화</li>\r\n            <li>JWT를 사용한 Refresh/Access Token 인증 기반 Stateless 서버</li>\r\n            <li>이메일을 통한 계정 인증과 비밀번호 초기화 기능</li>\r\n            <li>강제 토큰 무효화 (강제로 사용자 로그아웃)</li>\r\n            <li>OpenAPI 3.0 YAML 규격으로 API 문서 생성</li>\r\n            <li>명세된 ORM 테이블로 ER 다이어그램 생성</li>\r\n          </ul>\r\n          등을 지원하며, 현재 제 많은 프로젝트에서 백엔드로 사용되고 있습니다.\r\n        </p>\r\n\r\n        <h5>기술 스택 (백엔드)</h5>\r\n        <div className='projectTechStackTagContainer'>\r\n          <TechStackTag bgColor='#306998' textColor='#FFD43B' techName='Python' />\r\n          <TechStackTag bgColor='#000000' techName='Flask' />\r\n          <TechStackTag bgColor='#d71f00' techName='SQLAlchemy' />\r\n          <TechStackTag bgColor='#336791' techName='PostgreSQL' />\r\n          <TechStackTag bgColor='#dc382c' techName='Redis' />\r\n          <TechStackTag bgColor='#173647' textColor='#85ea2d' techName='OpenAPI 3.0' />\r\n        </div>\r\n        <br />\r\n\r\n        <h5>링크 (저장소)</h5>\r\n        <MuGithubButton\r\n          repoName='MU-Software/frost' />\r\n        <MuGithubButton\r\n          generateTemplate\r\n          icon='octicon-repo-template'\r\n          repoName='MU-Software/frost'\r\n          btnText='이 템플릿으로 새 저장소 만들기' />\r\n      </ProjectDescRow>\r\n      <ProjectDescRow\r\n        projectName='B.Ca'\r\n        projectAs='학사 졸업 작품'\r\n        projectPart='Android 앱 및 백엔드 개발'\r\n        projectPeriod='2021.04 - 2021.12' >\r\n        <p className='projectDescParagraph'>\r\n          B.Ca는 학사 졸업 작품으로 진행한 프로젝트로,<br />\r\n          디자인 / QA / 서류 작업을 담당한 김호준 학우와 같이 진행했습니다.<br />\r\n          저는 이 프로젝트에서 Android 네이티브 앱 개발과 백엔드 개발을 담당했습니다.<br />\r\n          <br />\r\n          B.Ca는 디지털 명함 기반의 커뮤니케이션 메신저 서비스로,<br />\r\n          <ul>\r\n            <li>REST API를 통해 사용자의 프로필/명함이나 채팅과 같은 자원 CRUD 가능</li>\r\n            <li>오프라인 지원을 위해 클라이언트에서 필요한 자원을 전부 포함한 동기화 DB를 서버에서 생성 후 푸시</li>\r\n            <li>위의 동기화 DB를 서버에서 생성 및 수정 시 Celery와 Redis를 통한 비동기 작업 처리</li>\r\n            <li>Firebase Cloud Messaging을 통한 실시간 채팅 지원</li>\r\n          </ul>\r\n          과 같은 기능을 가지고 있습니다.\r\n        </p>\r\n\r\n        <h5 style={{ margin: '0' }}>기술 스택</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>\r\n            Android 애플리케이션\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='#3DDC84' textColor='#073042' techName='Android' />\r\n              <TechStackTag bgColor='#073042' textColor='#3DDC84' techName='Android Jetpack' />\r\n              <TechStackTag bgColor='#5382A1' textColor='#FFA518' techName='Java' />\r\n              <TechStackTag bgColor='#003b57' textColor='#97d9f6' techName='SQLite' />\r\n              <TechStackTag bgColor='#ffcb2e' textColor='#ef6c00' techName='Firebase Cloud Messaging' />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            백엔드\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='royalblue' techName='Frost' />\r\n              <TechStackTag bgColor='#a9cc54' textColor='#3e4349' techName='Celery' />\r\n              <TechStackTag bgColor='#003b57' textColor='#97d9f6' techName='SQLite' />\r\n              <TechStackTag bgColor='#ffcb2e' textColor='#ef6c00' techName='FCM' />\r\n            </div>\r\n          </li>\r\n        </ul>\r\n\r\n        <br />\r\n        <h5 style={{ margin: '0' }}>링크</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>\r\n            Android 애플리케이션 저장소<br />\r\n            <MuGithubButton repoName='MU-Software/bca_android' />\r\n          </li>\r\n          <li>\r\n            백엔드 저장소<br />\r\n            <MuGithubButton repoName='MU-Software/bca_backend' />\r\n          </li>\r\n        </ul>\r\n      </ProjectDescRow>\r\n      <ProjectDescRow\r\n        projectName='MUdev.cc'\r\n        projectAs='개인 프로젝트'\r\n        projectPeriod='2021.12 - 2022.05' >\r\n        <p className='projectDescParagraph'>\r\n          MUdev.cc는 제 개인 사이트로 기획된 프로젝트로, 현재 보고 계신 이 사이트입니다.<br />\r\n          프론트엔드 디자인은 React-Bootstrap과 MVP.CSS에 조금 <del>많은</del> 수정을 거쳐서 만들어졌으며,\r\n          백엔드도 Frost에 약간의 수정을 거쳐서 작성되었고,<br />\r\n          현재 Vultr 서버에서 서비스되고 있습니다.<br />\r\n          하위 프로젝트로 아래의 PlayCo가 있으며, 현재 추가로 기획 중인 서비스가 있습니다.\r\n        </p>\r\n        <h5 style={{ margin: '0' }}>기술 스택</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>\r\n            프론트엔드\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='#20232a' textColor='#61dbfb' techName='React' />\r\n              <TechStackTag bgColor='#764abc' techName='Redux' />\r\n              <TechStackTag bgColor='#f0db4f' textColor='#323330' techName='JavaScript' />\r\n              <TechStackTag bgColor='#3178c6' techName='TypeScript' />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            백엔드\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='#69b53f' techName='linux mint' />\r\n              <TechStackTag bgColor='#009639' techName='NGINX' />\r\n              <TechStackTag bgColor='#499848' techName='Gunicorn' />\r\n              <TechStackTag bgColor='royalblue' techName='Frost' />\r\n              <TechStackTag bgColor='#003b57' textColor='#97d9f6' techName='SQLite' />\r\n            </div>\r\n          </li>\r\n        </ul>\r\n\r\n        <br />\r\n        <h5 style={{ margin: '0' }}>링크</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>\r\n            프론트엔드 저장소<br />\r\n            <MuGithubButton repoName='MU-Software/mudev_frontend' />\r\n          </li>\r\n          <li>\r\n            백엔드 저장소<br />\r\n            <MuGithubButton repoName='MU-Software/mudev_backend' />\r\n          </li>\r\n        </ul>\r\n      </ProjectDescRow>\r\n      <ProjectDescRow\r\n        additionalClass='lastItem'\r\n        projectName='PlayCo'\r\n        projectAs='개인 프로젝트'\r\n        projectPeriod='2022.02 - 2022.05' >\r\n        <p className='projectDescParagraph'>\r\n          PlayCo는 MUdev.cc의 일부로 기획된 프로젝트 중 하나로,\r\n          <ul>\r\n            <li>YouTube 재생목록이 특정 상황에서 의도하지 않게 중복된 영상을 담게 되는 오류</li>\r\n            <li>영상의 반복 설정 등이 어렵다는 점</li>\r\n            <li>다른 사람과 재생목록을 같이 듣고 싶은데, 상대방이 무엇을 듣는지 알수 없다는 점</li>\r\n          </ul>\r\n          등에서 불편함을 겪어 간단하게 사용하고자 만든 서비스입니다.\r\n          <br /><br />\r\n\r\n          이 서비스를 통해...\r\n          <ul>\r\n            <li>REST API로 재생목록에 추가/삭제하거나 타인의 CRUD 가능 여부를 설정할 수 있고</li>\r\n            <li>Socket.IO를 통해 재생목록의 설정 변경 &amp; 아이템 추가/삭제 등의 이벤트 수신 가능하며</li>\r\n            <li>역시 Socket.IO를 통해 현재 누가 재생목록의 몇 번째 영상을 보는지 여부도 수신할 수 있습니다.</li>\r\n          </ul>\r\n        </p>\r\n\r\n        <h5 style={{ margin: '0' }}>기술 스택</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>\r\n            프론트엔드\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='#20232a' textColor='#61dbfb' techName='React' />\r\n              <TechStackTag bgColor='#3178c6' techName='TypeScript' />\r\n              <TechStackTag bgColor='#010101' techName='Socket.IO' />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            백엔드\r\n            <div className='projectTechStackTagContainer'>\r\n              <TechStackTag bgColor='royalblue' techName='Frost' />\r\n              <TechStackTag bgColor='#dc382c' techName='Redis' />\r\n              <TechStackTag bgColor='#010101' techName='Flask-SocketIO' />\r\n            </div>\r\n          </li>\r\n        </ul>\r\n\r\n        <br />\r\n        <h5 style={{ margin: '0' }}>링크</h5>\r\n        <ul style={{ margin: '0' }}>\r\n          <li>프론트엔드 : 위의 MUdev.cc를 참고해주세요.</li>\r\n          <li>백엔드 : 역시 위의 MUdev.cc를 참고해주세요.</li>\r\n        </ul>\r\n      </ProjectDescRow>\r\n    </article>\r\n  </section>;\r\n}\r\n","C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\index.js",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\App.js",["665"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\reportWebVitals.js",["666","667"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\store.js",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\dummySidebar.jsx",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\topbar.jsx",["668","669"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\common\\notfound.jsx",["670"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\main.jsx",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\util\\sidebar.jsx",["671","672"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\bca\\main.jsx",["673","674"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\signup.jsx",["675"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\signin.jsx",["676"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\resetPassword.jsx",["677"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home.jsx",["678"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\blog\\blogRoot.jsx",["679"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\subpage\\protocolParser.tsx",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\tool\\subpage\\qrDecode.tsx",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\accountConfig.tsx",["680","681","682","683","684","685","686","687","688","689"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\changePassword.tsx",["690","691","692","693","694","695","696"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\welcomeToMuDev.tsx",["697"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\deactivate.tsx",["698"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playlistDetailPage.tsx",["699","700"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\mailSentWelcomeToMuDev.tsx",["701","702","703"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\main.tsx",["704","705","706","707","708","709"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\index.js",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\main.jsx",["710","711"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\introduce.jsx",["712","713","714","715"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\footer.jsx",["716","717"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\my_skills.jsx",["718","719","720","721"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\model.ts",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\action_creator.ts",["722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\common\\error.ts",["743"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muButton.jsx",["744","745","746","747"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muListRow.jsx",["748","749","750","751","752","753","754","755","756","757","758"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\home\\home_section\\projects.tsx",["759","760","761","762"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\divider.tsx",["763"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muFormText.tsx",["764"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\sio.ts",["765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\api.ts",["786","787","788","789","790","791","792","793","794","795","796","797","798","799","800"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\playco\\model.ts",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\muAlertMsgBox.tsx",["801","802","803","804","805","806","807","808","809"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\modal\\passwordChangeModal.tsx",["810","811"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\account\\modal\\nickIdChangeModal.tsx",["812","813"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\page\\playco\\element\\playlistControlModal.tsx",["814","815","816"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\util\\youtubeThumbnail.tsx",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\reducer.ts",["817","818","819","820","821","822"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\redux\\modules\\account\\action.ts",[],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\network\\api.ts",["823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\ui\\common\\element\\scrollIndicator.jsx",["845","846"],"C:\\Users\\MUsoftware\\Documents\\GitHub\\mudev_frontend\\src\\network\\api_response.ts",[],{"ruleId":"847","severity":1,"message":"848","line":36,"column":13,"nodeType":"849","messageId":"850","endLine":36,"endColumn":18},{"ruleId":"847","severity":1,"message":"848","line":1,"column":25,"nodeType":"849","messageId":"850","endLine":1,"endColumn":39},{"ruleId":"847","severity":1,"message":"851","line":1,"column":25,"nodeType":"852","messageId":"853","endLine":1,"endColumn":36},{"ruleId":"847","severity":1,"message":"848","line":10,"column":25,"nodeType":"849","messageId":"850","endLine":10,"endColumn":30},{"ruleId":"847","severity":1,"message":"848","line":7,"column":25,"nodeType":"849","messageId":"850","endLine":7,"endColumn":30},{"ruleId":"847","severity":1,"message":"848","line":5,"column":32,"nodeType":"849","messageId":"850","endLine":5,"endColumn":42},{"ruleId":"847","severity":1,"message":"854","line":5,"column":33,"nodeType":"852","messageId":"853","endLine":5,"endColumn":38},{"ruleId":"847","severity":1,"message":"848","line":7,"column":34,"nodeType":"849","messageId":"850","endLine":7,"endColumn":42},{"ruleId":"847","severity":1,"message":"854","line":7,"column":34,"nodeType":"852","messageId":"853","endLine":7,"endColumn":39},{"ruleId":"847","severity":1,"message":"848","line":10,"column":33,"nodeType":"849","messageId":"850","endLine":10,"endColumn":41},{"ruleId":"847","severity":1,"message":"854","line":10,"column":33,"nodeType":"852","messageId":"853","endLine":10,"endColumn":38},{"ruleId":"847","severity":1,"message":"848","line":7,"column":24,"nodeType":"849","messageId":"850","endLine":7,"endColumn":34},{"ruleId":"847","severity":1,"message":"854","line":7,"column":25,"nodeType":"852","messageId":"853","endLine":7,"endColumn":30},{"ruleId":"855","severity":1,"message":"856","line":3,"column":50,"nodeType":"852","messageId":"857","endLine":3,"endColumn":58},{"ruleId":"847","severity":1,"message":"848","line":9,"column":37,"nodeType":"849","messageId":"850","endLine":9,"endColumn":45},{"ruleId":"847","severity":1,"message":"854","line":9,"column":37,"nodeType":"852","messageId":"853","endLine":9,"endColumn":42},{"ruleId":"855","severity":1,"message":"858","line":9,"column":37,"nodeType":"852","messageId":"857","endLine":9,"endColumn":42},{"ruleId":"847","severity":1,"message":"848","line":7,"column":25,"nodeType":"849","messageId":"850","endLine":7,"endColumn":30},{"ruleId":"847","severity":1,"message":"848","line":116,"column":3,"nodeType":"859","messageId":"850","endLine":116,"endColumn":29},{"ruleId":"847","severity":1,"message":"848","line":305,"column":3,"nodeType":"859","messageId":"850","endLine":305,"endColumn":27},{"ruleId":"847","severity":1,"message":"848","line":309,"column":3,"nodeType":"859","messageId":"850","endLine":309,"endColumn":35},{"ruleId":"855","severity":1,"message":"860","line":311,"column":50,"nodeType":"852","messageId":"857","endLine":311,"endColumn":51},{"ruleId":"855","severity":1,"message":"860","line":311,"column":63,"nodeType":"852","messageId":"857","endLine":311,"endColumn":64},{"ruleId":"847","severity":1,"message":"848","line":316,"column":3,"nodeType":"859","messageId":"850","endLine":316,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":429,"column":3,"nodeType":"859","messageId":"850","endLine":429,"endColumn":46},{"ruleId":"847","severity":1,"message":"848","line":488,"column":3,"nodeType":"859","messageId":"850","endLine":488,"endColumn":12},{"ruleId":"847","severity":1,"message":"848","line":503,"column":3,"nodeType":"859","messageId":"850","endLine":503,"endColumn":47},{"ruleId":"847","severity":1,"message":"848","line":532,"column":3,"nodeType":"859","messageId":"850","endLine":532,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":627,"column":3,"nodeType":"859","messageId":"850","endLine":627,"endColumn":40},{"ruleId":"847","severity":1,"message":"848","line":693,"column":3,"nodeType":"859","messageId":"850","endLine":693,"endColumn":107},{"ruleId":"855","severity":1,"message":"861","line":769,"column":19,"nodeType":"852","messageId":"857","endLine":769,"endColumn":41},{"ruleId":"847","severity":1,"message":"848","line":806,"column":3,"nodeType":"859","messageId":"850","endLine":806,"endColumn":15},{"ruleId":"847","severity":1,"message":"848","line":814,"column":3,"nodeType":"859","messageId":"850","endLine":814,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":822,"column":3,"nodeType":"859","messageId":"850","endLine":822,"endColumn":14},{"ruleId":"847","severity":1,"message":"848","line":841,"column":3,"nodeType":"859","messageId":"850","endLine":841,"endColumn":73},{"ruleId":"847","severity":1,"message":"848","line":849,"column":3,"nodeType":"859","messageId":"850","endLine":849,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":857,"column":3,"nodeType":"859","messageId":"850","endLine":857,"endColumn":109},{"ruleId":"847","severity":1,"message":"848","line":866,"column":3,"nodeType":"859","messageId":"850","endLine":866,"endColumn":108},{"ruleId":"847","severity":1,"message":"848","line":875,"column":3,"nodeType":"859","messageId":"850","endLine":875,"endColumn":110},{"ruleId":"847","severity":1,"message":"848","line":884,"column":3,"nodeType":"859","messageId":"850","endLine":884,"endColumn":75},{"ruleId":"862","severity":1,"message":"863","line":24,"column":16,"nodeType":"864","messageId":"865","endLine":24,"endColumn":19,"suggestions":"866"},{"ruleId":"847","severity":1,"message":"848","line":39,"column":30,"nodeType":"849","messageId":"850","endLine":39,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":18,"column":30,"nodeType":"849","messageId":"850","endLine":18,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":10,"column":37,"nodeType":"849","messageId":"850","endLine":10,"endColumn":42},{"ruleId":"855","severity":1,"message":"867","line":5,"column":40,"nodeType":"852","messageId":"857","endLine":5,"endColumn":44},{"ruleId":"855","severity":1,"message":"868","line":30,"column":9,"nodeType":"852","messageId":"857","endLine":30,"endColumn":18},{"ruleId":"855","severity":1,"message":"869","line":8,"column":3,"nodeType":"852","messageId":"857","endLine":8,"endColumn":27},{"ruleId":"855","severity":1,"message":"870","line":9,"column":3,"nodeType":"852","messageId":"857","endLine":9,"endColumn":27},{"ruleId":"855","severity":1,"message":"871","line":10,"column":3,"nodeType":"852","messageId":"857","endLine":10,"endColumn":28},{"ruleId":"855","severity":1,"message":"872","line":11,"column":3,"nodeType":"852","messageId":"857","endLine":11,"endColumn":39},{"ruleId":"855","severity":1,"message":"873","line":12,"column":3,"nodeType":"852","messageId":"857","endLine":12,"endColumn":38},{"ruleId":"855","severity":1,"message":"874","line":13,"column":3,"nodeType":"852","messageId":"857","endLine":13,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":16,"column":24,"nodeType":"849","messageId":"850","endLine":16,"endColumn":54},{"ruleId":"847","severity":1,"message":"875","line":52,"column":15,"nodeType":"852","messageId":"853","endLine":52,"endColumn":19},{"ruleId":"847","severity":1,"message":"876","line":108,"column":15,"nodeType":"877","messageId":"878","endLine":127,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":153,"column":3,"nodeType":"859","messageId":"850","endLine":153,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":153,"column":12,"nodeType":"852","messageId":"853","endLine":153,"endColumn":17},{"ruleId":"847","severity":1,"message":"876","line":181,"column":15,"nodeType":"877","messageId":"878","endLine":189,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":201,"column":3,"nodeType":"859","messageId":"850","endLine":201,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":201,"column":12,"nodeType":"852","messageId":"853","endLine":201,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":206,"column":17,"nodeType":"849","messageId":"850","endLine":206,"endColumn":27},{"ruleId":"847","severity":1,"message":"854","line":206,"column":18,"nodeType":"852","messageId":"853","endLine":206,"endColumn":23},{"ruleId":"855","severity":1,"message":"880","line":250,"column":38,"nodeType":"852","messageId":"857","endLine":250,"endColumn":41},{"ruleId":"855","severity":1,"message":"881","line":325,"column":39,"nodeType":"852","messageId":"857","endLine":325,"endColumn":40},{"ruleId":"847","severity":1,"message":"848","line":12,"column":25,"nodeType":"849","messageId":"850","endLine":12,"endColumn":35},{"ruleId":"847","severity":1,"message":"854","line":12,"column":26,"nodeType":"852","messageId":"853","endLine":12,"endColumn":31},{"ruleId":"847","severity":1,"message":"848","line":47,"column":32,"nodeType":"849","messageId":"850","endLine":47,"endColumn":44},{"ruleId":"847","severity":1,"message":"882","line":47,"column":33,"nodeType":"852","messageId":"853","endLine":47,"endColumn":40},{"ruleId":"855","severity":1,"message":"883","line":5,"column":47,"nodeType":"852","messageId":"857","endLine":5,"endColumn":68},{"ruleId":"855","severity":1,"message":"884","line":88,"column":44,"nodeType":"852","messageId":"857","endLine":88,"endColumn":45},{"ruleId":"855","severity":1,"message":"885","line":5,"column":5,"nodeType":"852","messageId":"857","endLine":5,"endColumn":21},{"ruleId":"855","severity":1,"message":"886","line":6,"column":5,"nodeType":"852","messageId":"857","endLine":6,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":12,"column":5,"nodeType":"859","messageId":"850","endLine":12,"endColumn":36},{"ruleId":"847","severity":1,"message":"848","line":13,"column":5,"nodeType":"859","messageId":"850","endLine":13,"endColumn":59},{"ruleId":"847","severity":1,"message":"848","line":22,"column":5,"nodeType":"859","messageId":"850","endLine":22,"endColumn":29},{"ruleId":"855","severity":1,"message":"887","line":30,"column":65,"nodeType":"852","messageId":"857","endLine":30,"endColumn":66},{"ruleId":"855","severity":1,"message":"881","line":30,"column":68,"nodeType":"852","messageId":"857","endLine":30,"endColumn":69},{"ruleId":"847","severity":1,"message":"848","line":47,"column":5,"nodeType":"859","messageId":"850","endLine":47,"endColumn":47},{"ruleId":"847","severity":1,"message":"848","line":77,"column":5,"nodeType":"859","messageId":"850","endLine":77,"endColumn":51},{"ruleId":"847","severity":1,"message":"848","line":103,"column":5,"nodeType":"859","messageId":"850","endLine":103,"endColumn":82},{"ruleId":"847","severity":1,"message":"848","line":137,"column":5,"nodeType":"859","messageId":"850","endLine":137,"endColumn":46},{"ruleId":"847","severity":1,"message":"848","line":142,"column":5,"nodeType":"859","messageId":"850","endLine":142,"endColumn":48},{"ruleId":"847","severity":1,"message":"848","line":147,"column":5,"nodeType":"859","messageId":"850","endLine":147,"endColumn":81},{"ruleId":"847","severity":1,"message":"848","line":152,"column":5,"nodeType":"859","messageId":"850","endLine":152,"endColumn":94},{"ruleId":"847","severity":1,"message":"848","line":157,"column":5,"nodeType":"859","messageId":"850","endLine":157,"endColumn":83},{"ruleId":"847","severity":1,"message":"848","line":13,"column":27,"nodeType":"849","messageId":"850","endLine":13,"endColumn":109},{"ruleId":"862","severity":1,"message":"863","line":53,"column":13,"nodeType":"864","messageId":"865","endLine":53,"endColumn":16,"suggestions":"888"},{"ruleId":"847","severity":1,"message":"876","line":81,"column":15,"nodeType":"877","messageId":"878","endLine":100,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":126,"column":3,"nodeType":"859","messageId":"850","endLine":126,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":126,"column":12,"nodeType":"852","messageId":"853","endLine":126,"endColumn":17},{"ruleId":"862","severity":1,"message":"863","line":135,"column":12,"nodeType":"864","messageId":"865","endLine":135,"endColumn":15,"suggestions":"889"},{"ruleId":"847","severity":1,"message":"876","line":140,"column":15,"nodeType":"877","messageId":"878","endLine":148,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":160,"column":3,"nodeType":"859","messageId":"850","endLine":160,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":160,"column":12,"nodeType":"852","messageId":"853","endLine":160,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":165,"column":24,"nodeType":"849","messageId":"850","endLine":165,"endColumn":34},{"ruleId":"847","severity":1,"message":"854","line":165,"column":25,"nodeType":"852","messageId":"853","endLine":165,"endColumn":30},{"ruleId":"855","severity":1,"message":"880","line":209,"column":38,"nodeType":"852","messageId":"857","endLine":209,"endColumn":41},{"ruleId":"855","severity":1,"message":"881","line":283,"column":39,"nodeType":"852","messageId":"857","endLine":283,"endColumn":40},{"ruleId":"855","severity":1,"message":"885","line":18,"column":3,"nodeType":"852","messageId":"857","endLine":18,"endColumn":19},{"ruleId":"855","severity":1,"message":"890","line":514,"column":10,"nodeType":"852","messageId":"857","endLine":514,"endColumn":16},{"ruleId":"855","severity":1,"message":"891","line":17,"column":9,"nodeType":"852","messageId":"857","endLine":17,"endColumn":17},{"ruleId":"855","severity":1,"message":"892","line":87,"column":12,"nodeType":"852","messageId":"857","endLine":87,"endColumn":20},{"ruleId":"855","severity":1,"message":"890","line":132,"column":10,"nodeType":"852","messageId":"857","endLine":132,"endColumn":16},{"ruleId":"855","severity":1,"message":"885","line":18,"column":10,"nodeType":"852","messageId":"857","endLine":18,"endColumn":26},{"ruleId":"855","severity":1,"message":"886","line":18,"column":28,"nodeType":"852","messageId":"857","endLine":18,"endColumn":40},{"ruleId":"855","severity":1,"message":"893","line":21,"column":10,"nodeType":"852","messageId":"857","endLine":21,"endColumn":31},{"ruleId":"855","severity":1,"message":"891","line":39,"column":9,"nodeType":"852","messageId":"857","endLine":39,"endColumn":17},{"ruleId":"855","severity":1,"message":"858","line":240,"column":38,"nodeType":"852","messageId":"857","endLine":240,"endColumn":43},{"ruleId":"855","severity":1,"message":"890","line":286,"column":8,"nodeType":"852","messageId":"857","endLine":286,"endColumn":14},{"ruleId":"855","severity":1,"message":"894","line":70,"column":23,"nodeType":"852","messageId":"857","endLine":70,"endColumn":26},{"ruleId":"847","severity":1,"message":"848","line":94,"column":5,"nodeType":"859","messageId":"850","endLine":94,"endColumn":20},{"ruleId":"847","severity":1,"message":"848","line":111,"column":5,"nodeType":"859","messageId":"850","endLine":111,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":117,"column":5,"nodeType":"859","messageId":"850","endLine":117,"endColumn":98},{"ruleId":"847","severity":1,"message":"848","line":143,"column":5,"nodeType":"859","messageId":"850","endLine":143,"endColumn":26},{"ruleId":"855","severity":1,"message":"892","line":381,"column":42,"nodeType":"852","messageId":"857","endLine":381,"endColumn":50},{"ruleId":"855","severity":1,"message":"892","line":383,"column":50,"nodeType":"852","messageId":"857","endLine":383,"endColumn":58},{"ruleId":"847","severity":1,"message":"848","line":405,"column":5,"nodeType":"859","messageId":"850","endLine":405,"endColumn":14},{"ruleId":"847","severity":1,"message":"848","line":412,"column":5,"nodeType":"859","messageId":"850","endLine":412,"endColumn":40},{"ruleId":"847","severity":1,"message":"848","line":422,"column":5,"nodeType":"859","messageId":"850","endLine":422,"endColumn":65},{"ruleId":"855","severity":1,"message":"892","line":427,"column":18,"nodeType":"852","messageId":"857","endLine":427,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":428,"column":18,"nodeType":"852","messageId":"857","endLine":428,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":428,"column":26,"nodeType":"852","messageId":"857","endLine":428,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":434,"column":5,"nodeType":"859","messageId":"850","endLine":434,"endColumn":38},{"ruleId":"855","severity":1,"message":"892","line":439,"column":18,"nodeType":"852","messageId":"857","endLine":439,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":440,"column":18,"nodeType":"852","messageId":"857","endLine":440,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":440,"column":26,"nodeType":"852","messageId":"857","endLine":440,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":446,"column":5,"nodeType":"859","messageId":"850","endLine":446,"endColumn":73},{"ruleId":"855","severity":1,"message":"892","line":451,"column":18,"nodeType":"852","messageId":"857","endLine":451,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":452,"column":18,"nodeType":"852","messageId":"857","endLine":452,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":452,"column":26,"nodeType":"852","messageId":"857","endLine":452,"endColumn":34},{"ruleId":"855","severity":1,"message":"896","line":1,"column":17,"nodeType":"852","messageId":"857","endLine":1,"endColumn":25},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"898","line":2,"column":10,"nodeType":"852","messageId":"857","endLine":2,"endColumn":21},{"ruleId":"855","severity":1,"message":"867","line":3,"column":10,"nodeType":"852","messageId":"857","endLine":3,"endColumn":14},{"ruleId":"855","severity":1,"message":"899","line":4,"column":10,"nodeType":"852","messageId":"857","endLine":4,"endColumn":20},{"ruleId":"855","severity":1,"message":"900","line":6,"column":10,"nodeType":"852","messageId":"857","endLine":6,"endColumn":20},{"ruleId":"855","severity":1,"message":"901","line":7,"column":10,"nodeType":"852","messageId":"857","endLine":7,"endColumn":25},{"ruleId":"855","severity":1,"message":"902","line":8,"column":10,"nodeType":"852","messageId":"857","endLine":8,"endColumn":24},{"ruleId":"855","severity":1,"message":"903","line":9,"column":10,"nodeType":"852","messageId":"857","endLine":9,"endColumn":19},{"ruleId":"855","severity":1,"message":"901","line":7,"column":10,"nodeType":"852","messageId":"857","endLine":7,"endColumn":25},{"ruleId":"855","severity":1,"message":"904","line":13,"column":9,"nodeType":"852","messageId":"857","endLine":13,"endColumn":21},{"ruleId":"847","severity":1,"message":"848","line":17,"column":39,"nodeType":"849","messageId":"850","endLine":17,"endColumn":44},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"905","line":2,"column":23,"nodeType":"852","messageId":"857","endLine":2,"endColumn":34},{"ruleId":"855","severity":1,"message":"906","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":24},{"ruleId":"855","severity":1,"message":"907","line":5,"column":26,"nodeType":"852","messageId":"857","endLine":5,"endColumn":33},{"ruleId":"855","severity":1,"message":"867","line":5,"column":44,"nodeType":"852","messageId":"857","endLine":5,"endColumn":48},{"ruleId":"855","severity":1,"message":"901","line":9,"column":20,"nodeType":"852","messageId":"857","endLine":9,"endColumn":35},{"ruleId":"855","severity":1,"message":"900","line":10,"column":10,"nodeType":"852","messageId":"857","endLine":10,"endColumn":20},{"ruleId":"855","severity":1,"message":"908","line":11,"column":10,"nodeType":"852","messageId":"857","endLine":11,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":36,"column":30,"nodeType":"849","messageId":"850","endLine":36,"endColumn":35},{"ruleId":"855","severity":1,"message":"909","line":43,"column":9,"nodeType":"852","messageId":"857","endLine":43,"endColumn":17},{"ruleId":"855","severity":1,"message":"896","line":1,"column":17,"nodeType":"852","messageId":"857","endLine":1,"endColumn":25},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"905","line":2,"column":23,"nodeType":"852","messageId":"857","endLine":2,"endColumn":34},{"ruleId":"855","severity":1,"message":"910","line":3,"column":10,"nodeType":"852","messageId":"857","endLine":3,"endColumn":20},{"ruleId":"855","severity":1,"message":"906","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":24},{"ruleId":"855","severity":1,"message":"907","line":5,"column":26,"nodeType":"852","messageId":"857","endLine":5,"endColumn":33},{"ruleId":"847","severity":1,"message":"848","line":11,"column":38,"nodeType":"849","messageId":"850","endLine":11,"endColumn":43},{"ruleId":"855","severity":1,"message":"911","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":17},{"ruleId":"855","severity":1,"message":"891","line":107,"column":11,"nodeType":"852","messageId":"857","endLine":107,"endColumn":19},{"ruleId":"855","severity":1,"message":"912","line":8,"column":10,"nodeType":"852","messageId":"857","endLine":8,"endColumn":21},{"ruleId":"855","severity":1,"message":"891","line":145,"column":11,"nodeType":"852","messageId":"857","endLine":145,"endColumn":19},{"ruleId":"847","severity":1,"message":"848","line":22,"column":34,"nodeType":"849","messageId":"850","endLine":22,"endColumn":39},{"ruleId":"855","severity":1,"message":"913","line":1,"column":10,"nodeType":"852","messageId":"857","endLine":1,"endColumn":18},{"ruleId":"847","severity":1,"message":"848","line":13,"column":61,"nodeType":"849","messageId":"850","endLine":13,"endColumn":84},{"ruleId":"847","severity":1,"message":"914","line":13,"column":62,"nodeType":"852","messageId":"853","endLine":13,"endColumn":70},{"ruleId":"847","severity":1,"message":"915","line":13,"column":72,"nodeType":"852","messageId":"853","endLine":13,"endColumn":80},{"ruleId":"847","severity":1,"message":"916","line":23,"column":42,"nodeType":"852","messageId":"853","endLine":23,"endColumn":51},{"ruleId":"847","severity":1,"message":"917","line":23,"column":53,"nodeType":"852","messageId":"853","endLine":23,"endColumn":61},{"ruleId":"847","severity":1,"message":"848","line":23,"column":66,"nodeType":"849","messageId":"850","endLine":23,"endColumn":83},{"ruleId":"847","severity":1,"message":"914","line":23,"column":72,"nodeType":"852","messageId":"853","endLine":23,"endColumn":80},{"ruleId":"847","severity":1,"message":"918","line":50,"column":42,"nodeType":"852","messageId":"853","endLine":50,"endColumn":44},{"ruleId":"847","severity":1,"message":"919","line":50,"column":46,"nodeType":"852","messageId":"853","endLine":50,"endColumn":51},{"ruleId":"847","severity":1,"message":"920","line":50,"column":53,"nodeType":"852","messageId":"853","endLine":50,"endColumn":57},{"ruleId":"847","severity":1,"message":"917","line":50,"column":59,"nodeType":"852","messageId":"853","endLine":50,"endColumn":67},{"ruleId":"847","severity":1,"message":"848","line":50,"column":72,"nodeType":"849","messageId":"850","endLine":50,"endColumn":89},{"ruleId":"847","severity":1,"message":"914","line":50,"column":78,"nodeType":"852","messageId":"853","endLine":50,"endColumn":86},{"ruleId":"847","severity":1,"message":"848","line":91,"column":48,"nodeType":"849","messageId":"850","endLine":91,"endColumn":65},{"ruleId":"847","severity":1,"message":"914","line":91,"column":54,"nodeType":"852","messageId":"853","endLine":91,"endColumn":62},{"ruleId":"847","severity":1,"message":"848","line":103,"column":79,"nodeType":"849","messageId":"850","endLine":103,"endColumn":96},{"ruleId":"847","severity":1,"message":"914","line":103,"column":85,"nodeType":"852","messageId":"853","endLine":103,"endColumn":93},{"ruleId":"847","severity":1,"message":"848","line":128,"column":83,"nodeType":"849","messageId":"850","endLine":128,"endColumn":112},{"ruleId":"847","severity":1,"message":"914","line":128,"column":90,"nodeType":"852","messageId":"853","endLine":128,"endColumn":98},{"ruleId":"847","severity":1,"message":"915","line":128,"column":100,"nodeType":"852","messageId":"853","endLine":128,"endColumn":108},{"ruleId":"847","severity":1,"message":"848","line":6,"column":31,"nodeType":"849","messageId":"850","endLine":6,"endColumn":36},{"ruleId":"855","severity":1,"message":"921","line":2,"column":10,"nodeType":"852","messageId":"857","endLine":2,"endColumn":16},{"ruleId":"847","severity":1,"message":"848","line":7,"column":36,"nodeType":"849","messageId":"850","endLine":7,"endColumn":44},{"ruleId":"847","severity":1,"message":"854","line":7,"column":36,"nodeType":"852","messageId":"853","endLine":7,"endColumn":41},{"ruleId":"855","severity":1,"message":"858","line":7,"column":36,"nodeType":"852","messageId":"857","endLine":7,"endColumn":41},{"ruleId":"855","severity":1,"message":"908","line":4,"column":10,"nodeType":"852","messageId":"857","endLine":4,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":65,"column":40,"nodeType":"849","messageId":"850","endLine":65,"endColumn":48},{"ruleId":"847","severity":1,"message":"854","line":65,"column":40,"nodeType":"852","messageId":"853","endLine":65,"endColumn":45},{"ruleId":"855","severity":1,"message":"858","line":65,"column":40,"nodeType":"852","messageId":"857","endLine":65,"endColumn":45},{"ruleId":"847","severity":1,"message":"848","line":36,"column":13,"nodeType":"849","messageId":"850","endLine":36,"endColumn":18},{"ruleId":"847","severity":1,"message":"848","line":1,"column":25,"nodeType":"849","messageId":"850","endLine":1,"endColumn":39},{"ruleId":"847","severity":1,"message":"851","line":1,"column":25,"nodeType":"852","messageId":"853","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"867","line":5,"column":40,"nodeType":"852","messageId":"857","endLine":5,"endColumn":44},{"ruleId":"855","severity":1,"message":"868","line":30,"column":9,"nodeType":"852","messageId":"857","endLine":30,"endColumn":18},{"ruleId":"847","severity":1,"message":"848","line":7,"column":25,"nodeType":"849","messageId":"850","endLine":7,"endColumn":30},{"ruleId":"855","severity":1,"message":"883","line":5,"column":47,"nodeType":"852","messageId":"857","endLine":5,"endColumn":68},{"ruleId":"855","severity":1,"message":"884","line":88,"column":44,"nodeType":"852","messageId":"857","endLine":88,"endColumn":45},{"ruleId":"847","severity":1,"message":"848","line":7,"column":24,"nodeType":"849","messageId":"850","endLine":7,"endColumn":34},{"ruleId":"847","severity":1,"message":"854","line":7,"column":25,"nodeType":"852","messageId":"853","endLine":7,"endColumn":30},{"ruleId":"847","severity":1,"message":"848","line":39,"column":30,"nodeType":"849","messageId":"850","endLine":39,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":18,"column":30,"nodeType":"849","messageId":"850","endLine":18,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":10,"column":37,"nodeType":"849","messageId":"850","endLine":10,"endColumn":42},{"ruleId":"847","severity":1,"message":"848","line":10,"column":25,"nodeType":"849","messageId":"850","endLine":10,"endColumn":30},{"ruleId":"847","severity":1,"message":"848","line":7,"column":25,"nodeType":"849","messageId":"850","endLine":7,"endColumn":30},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"905","line":2,"column":23,"nodeType":"852","messageId":"857","endLine":2,"endColumn":34},{"ruleId":"855","severity":1,"message":"906","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":24},{"ruleId":"855","severity":1,"message":"907","line":5,"column":26,"nodeType":"852","messageId":"857","endLine":5,"endColumn":33},{"ruleId":"855","severity":1,"message":"867","line":5,"column":44,"nodeType":"852","messageId":"857","endLine":5,"endColumn":48},{"ruleId":"855","severity":1,"message":"901","line":9,"column":20,"nodeType":"852","messageId":"857","endLine":9,"endColumn":35},{"ruleId":"855","severity":1,"message":"900","line":10,"column":10,"nodeType":"852","messageId":"857","endLine":10,"endColumn":20},{"ruleId":"855","severity":1,"message":"908","line":11,"column":10,"nodeType":"852","messageId":"857","endLine":11,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":36,"column":30,"nodeType":"849","messageId":"850","endLine":36,"endColumn":35},{"ruleId":"855","severity":1,"message":"909","line":43,"column":9,"nodeType":"852","messageId":"857","endLine":43,"endColumn":17},{"ruleId":"855","severity":1,"message":"896","line":1,"column":17,"nodeType":"852","messageId":"857","endLine":1,"endColumn":25},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"905","line":2,"column":23,"nodeType":"852","messageId":"857","endLine":2,"endColumn":34},{"ruleId":"855","severity":1,"message":"910","line":3,"column":10,"nodeType":"852","messageId":"857","endLine":3,"endColumn":20},{"ruleId":"855","severity":1,"message":"906","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":24},{"ruleId":"855","severity":1,"message":"907","line":5,"column":26,"nodeType":"852","messageId":"857","endLine":5,"endColumn":33},{"ruleId":"847","severity":1,"message":"848","line":11,"column":38,"nodeType":"849","messageId":"850","endLine":11,"endColumn":43},{"ruleId":"847","severity":1,"message":"848","line":6,"column":31,"nodeType":"849","messageId":"850","endLine":6,"endColumn":36},{"ruleId":"847","severity":1,"message":"848","line":22,"column":34,"nodeType":"849","messageId":"850","endLine":22,"endColumn":39},{"ruleId":"855","severity":1,"message":"885","line":18,"column":3,"nodeType":"852","messageId":"857","endLine":18,"endColumn":19},{"ruleId":"855","severity":1,"message":"890","line":514,"column":10,"nodeType":"852","messageId":"857","endLine":514,"endColumn":16},{"ruleId":"855","severity":1,"message":"901","line":7,"column":10,"nodeType":"852","messageId":"857","endLine":7,"endColumn":25},{"ruleId":"855","severity":1,"message":"904","line":13,"column":9,"nodeType":"852","messageId":"857","endLine":13,"endColumn":21},{"ruleId":"847","severity":1,"message":"848","line":17,"column":39,"nodeType":"849","messageId":"850","endLine":17,"endColumn":44},{"ruleId":"855","severity":1,"message":"885","line":18,"column":10,"nodeType":"852","messageId":"857","endLine":18,"endColumn":26},{"ruleId":"855","severity":1,"message":"886","line":18,"column":28,"nodeType":"852","messageId":"857","endLine":18,"endColumn":40},{"ruleId":"855","severity":1,"message":"893","line":21,"column":10,"nodeType":"852","messageId":"857","endLine":21,"endColumn":31},{"ruleId":"855","severity":1,"message":"891","line":39,"column":9,"nodeType":"852","messageId":"857","endLine":39,"endColumn":17},{"ruleId":"855","severity":1,"message":"858","line":240,"column":38,"nodeType":"852","messageId":"857","endLine":240,"endColumn":43},{"ruleId":"855","severity":1,"message":"890","line":286,"column":8,"nodeType":"852","messageId":"857","endLine":286,"endColumn":14},{"ruleId":"847","severity":1,"message":"848","line":10,"column":33,"nodeType":"849","messageId":"850","endLine":10,"endColumn":41},{"ruleId":"847","severity":1,"message":"854","line":10,"column":33,"nodeType":"852","messageId":"853","endLine":10,"endColumn":38},{"ruleId":"855","severity":1,"message":"856","line":3,"column":50,"nodeType":"852","messageId":"857","endLine":3,"endColumn":58},{"ruleId":"847","severity":1,"message":"848","line":9,"column":37,"nodeType":"849","messageId":"850","endLine":9,"endColumn":45},{"ruleId":"847","severity":1,"message":"854","line":9,"column":37,"nodeType":"852","messageId":"853","endLine":9,"endColumn":42},{"ruleId":"855","severity":1,"message":"858","line":9,"column":37,"nodeType":"852","messageId":"857","endLine":9,"endColumn":42},{"ruleId":"847","severity":1,"message":"848","line":7,"column":34,"nodeType":"849","messageId":"850","endLine":7,"endColumn":42},{"ruleId":"847","severity":1,"message":"854","line":7,"column":34,"nodeType":"852","messageId":"853","endLine":7,"endColumn":39},{"ruleId":"855","severity":1,"message":"921","line":2,"column":10,"nodeType":"852","messageId":"857","endLine":2,"endColumn":16},{"ruleId":"847","severity":1,"message":"848","line":7,"column":36,"nodeType":"849","messageId":"850","endLine":7,"endColumn":44},{"ruleId":"847","severity":1,"message":"854","line":7,"column":36,"nodeType":"852","messageId":"853","endLine":7,"endColumn":41},{"ruleId":"855","severity":1,"message":"858","line":7,"column":36,"nodeType":"852","messageId":"857","endLine":7,"endColumn":41},{"ruleId":"855","severity":1,"message":"913","line":1,"column":10,"nodeType":"852","messageId":"857","endLine":1,"endColumn":18},{"ruleId":"847","severity":1,"message":"848","line":13,"column":61,"nodeType":"849","messageId":"850","endLine":13,"endColumn":84},{"ruleId":"847","severity":1,"message":"914","line":13,"column":62,"nodeType":"852","messageId":"853","endLine":13,"endColumn":70},{"ruleId":"847","severity":1,"message":"915","line":13,"column":72,"nodeType":"852","messageId":"853","endLine":13,"endColumn":80},{"ruleId":"847","severity":1,"message":"916","line":23,"column":42,"nodeType":"852","messageId":"853","endLine":23,"endColumn":51},{"ruleId":"847","severity":1,"message":"917","line":23,"column":53,"nodeType":"852","messageId":"853","endLine":23,"endColumn":61},{"ruleId":"847","severity":1,"message":"848","line":23,"column":66,"nodeType":"849","messageId":"850","endLine":23,"endColumn":83},{"ruleId":"847","severity":1,"message":"914","line":23,"column":72,"nodeType":"852","messageId":"853","endLine":23,"endColumn":80},{"ruleId":"847","severity":1,"message":"918","line":50,"column":42,"nodeType":"852","messageId":"853","endLine":50,"endColumn":44},{"ruleId":"847","severity":1,"message":"919","line":50,"column":46,"nodeType":"852","messageId":"853","endLine":50,"endColumn":51},{"ruleId":"847","severity":1,"message":"920","line":50,"column":53,"nodeType":"852","messageId":"853","endLine":50,"endColumn":57},{"ruleId":"847","severity":1,"message":"917","line":50,"column":59,"nodeType":"852","messageId":"853","endLine":50,"endColumn":67},{"ruleId":"847","severity":1,"message":"848","line":50,"column":72,"nodeType":"849","messageId":"850","endLine":50,"endColumn":89},{"ruleId":"847","severity":1,"message":"914","line":50,"column":78,"nodeType":"852","messageId":"853","endLine":50,"endColumn":86},{"ruleId":"847","severity":1,"message":"848","line":91,"column":48,"nodeType":"849","messageId":"850","endLine":91,"endColumn":65},{"ruleId":"847","severity":1,"message":"914","line":91,"column":54,"nodeType":"852","messageId":"853","endLine":91,"endColumn":62},{"ruleId":"847","severity":1,"message":"848","line":103,"column":79,"nodeType":"849","messageId":"850","endLine":103,"endColumn":96},{"ruleId":"847","severity":1,"message":"914","line":103,"column":85,"nodeType":"852","messageId":"853","endLine":103,"endColumn":93},{"ruleId":"847","severity":1,"message":"848","line":128,"column":83,"nodeType":"849","messageId":"850","endLine":128,"endColumn":112},{"ruleId":"847","severity":1,"message":"914","line":128,"column":90,"nodeType":"852","messageId":"853","endLine":128,"endColumn":98},{"ruleId":"847","severity":1,"message":"915","line":128,"column":100,"nodeType":"852","messageId":"853","endLine":128,"endColumn":108},{"ruleId":"862","severity":1,"message":"863","line":24,"column":16,"nodeType":"864","messageId":"865","endLine":24,"endColumn":19,"suggestions":"922"},{"ruleId":"847","severity":1,"message":"848","line":12,"column":25,"nodeType":"849","messageId":"850","endLine":12,"endColumn":35},{"ruleId":"847","severity":1,"message":"854","line":12,"column":26,"nodeType":"852","messageId":"853","endLine":12,"endColumn":31},{"ruleId":"847","severity":1,"message":"848","line":47,"column":32,"nodeType":"849","messageId":"850","endLine":47,"endColumn":44},{"ruleId":"847","severity":1,"message":"882","line":47,"column":33,"nodeType":"852","messageId":"853","endLine":47,"endColumn":40},{"ruleId":"847","severity":1,"message":"875","line":52,"column":15,"nodeType":"852","messageId":"853","endLine":52,"endColumn":19},{"ruleId":"847","severity":1,"message":"876","line":108,"column":15,"nodeType":"877","messageId":"878","endLine":127,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":153,"column":3,"nodeType":"859","messageId":"850","endLine":153,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":153,"column":12,"nodeType":"852","messageId":"853","endLine":153,"endColumn":17},{"ruleId":"847","severity":1,"message":"876","line":181,"column":15,"nodeType":"877","messageId":"878","endLine":189,"endColumn":4},{"ruleId":"847","severity":1,"message":"848","line":201,"column":3,"nodeType":"859","messageId":"850","endLine":201,"endColumn":18},{"ruleId":"847","severity":1,"message":"879","line":201,"column":12,"nodeType":"852","messageId":"853","endLine":201,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":206,"column":17,"nodeType":"849","messageId":"850","endLine":206,"endColumn":27},{"ruleId":"847","severity":1,"message":"854","line":206,"column":18,"nodeType":"852","messageId":"853","endLine":206,"endColumn":23},{"ruleId":"855","severity":1,"message":"880","line":250,"column":38,"nodeType":"852","messageId":"857","endLine":250,"endColumn":41},{"ruleId":"855","severity":1,"message":"881","line":325,"column":39,"nodeType":"852","messageId":"857","endLine":325,"endColumn":40},{"ruleId":"855","severity":1,"message":"908","line":4,"column":10,"nodeType":"852","messageId":"857","endLine":4,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":65,"column":40,"nodeType":"849","messageId":"850","endLine":65,"endColumn":48},{"ruleId":"847","severity":1,"message":"854","line":65,"column":40,"nodeType":"852","messageId":"853","endLine":65,"endColumn":45},{"ruleId":"855","severity":1,"message":"858","line":65,"column":40,"nodeType":"852","messageId":"857","endLine":65,"endColumn":45},{"ruleId":"847","severity":1,"message":"848","line":16,"column":24,"nodeType":"849","messageId":"850","endLine":16,"endColumn":54},{"ruleId":"847","severity":1,"message":"848","line":13,"column":27,"nodeType":"849","messageId":"850","endLine":13,"endColumn":109},{"ruleId":"855","severity":1,"message":"894","line":70,"column":23,"nodeType":"852","messageId":"857","endLine":70,"endColumn":26},{"ruleId":"847","severity":1,"message":"848","line":94,"column":5,"nodeType":"859","messageId":"850","endLine":94,"endColumn":20},{"ruleId":"847","severity":1,"message":"848","line":111,"column":5,"nodeType":"859","messageId":"850","endLine":111,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":117,"column":5,"nodeType":"859","messageId":"850","endLine":117,"endColumn":98},{"ruleId":"847","severity":1,"message":"848","line":143,"column":5,"nodeType":"859","messageId":"850","endLine":143,"endColumn":26},{"ruleId":"855","severity":1,"message":"892","line":381,"column":42,"nodeType":"852","messageId":"857","endLine":381,"endColumn":50},{"ruleId":"855","severity":1,"message":"892","line":383,"column":50,"nodeType":"852","messageId":"857","endLine":383,"endColumn":58},{"ruleId":"847","severity":1,"message":"848","line":405,"column":5,"nodeType":"859","messageId":"850","endLine":405,"endColumn":14},{"ruleId":"847","severity":1,"message":"848","line":412,"column":5,"nodeType":"859","messageId":"850","endLine":412,"endColumn":40},{"ruleId":"847","severity":1,"message":"848","line":422,"column":5,"nodeType":"859","messageId":"850","endLine":422,"endColumn":65},{"ruleId":"855","severity":1,"message":"892","line":427,"column":18,"nodeType":"852","messageId":"857","endLine":427,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":428,"column":18,"nodeType":"852","messageId":"857","endLine":428,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":428,"column":26,"nodeType":"852","messageId":"857","endLine":428,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":434,"column":5,"nodeType":"859","messageId":"850","endLine":434,"endColumn":38},{"ruleId":"855","severity":1,"message":"892","line":439,"column":18,"nodeType":"852","messageId":"857","endLine":439,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":440,"column":18,"nodeType":"852","messageId":"857","endLine":440,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":440,"column":26,"nodeType":"852","messageId":"857","endLine":440,"endColumn":34},{"ruleId":"847","severity":1,"message":"848","line":446,"column":5,"nodeType":"859","messageId":"850","endLine":446,"endColumn":73},{"ruleId":"855","severity":1,"message":"892","line":451,"column":18,"nodeType":"852","messageId":"857","endLine":451,"endColumn":26},{"ruleId":"855","severity":1,"message":"895","line":452,"column":18,"nodeType":"852","messageId":"857","endLine":452,"endColumn":24},{"ruleId":"855","severity":1,"message":"892","line":452,"column":26,"nodeType":"852","messageId":"857","endLine":452,"endColumn":34},{"ruleId":"855","severity":1,"message":"885","line":5,"column":5,"nodeType":"852","messageId":"857","endLine":5,"endColumn":21},{"ruleId":"855","severity":1,"message":"886","line":6,"column":5,"nodeType":"852","messageId":"857","endLine":6,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":12,"column":5,"nodeType":"859","messageId":"850","endLine":12,"endColumn":36},{"ruleId":"847","severity":1,"message":"848","line":13,"column":5,"nodeType":"859","messageId":"850","endLine":13,"endColumn":59},{"ruleId":"847","severity":1,"message":"848","line":22,"column":5,"nodeType":"859","messageId":"850","endLine":22,"endColumn":29},{"ruleId":"855","severity":1,"message":"887","line":30,"column":65,"nodeType":"852","messageId":"857","endLine":30,"endColumn":66},{"ruleId":"855","severity":1,"message":"881","line":30,"column":68,"nodeType":"852","messageId":"857","endLine":30,"endColumn":69},{"ruleId":"847","severity":1,"message":"848","line":47,"column":5,"nodeType":"859","messageId":"850","endLine":47,"endColumn":47},{"ruleId":"847","severity":1,"message":"848","line":77,"column":5,"nodeType":"859","messageId":"850","endLine":77,"endColumn":51},{"ruleId":"847","severity":1,"message":"848","line":103,"column":5,"nodeType":"859","messageId":"850","endLine":103,"endColumn":82},{"ruleId":"847","severity":1,"message":"848","line":137,"column":5,"nodeType":"859","messageId":"850","endLine":137,"endColumn":46},{"ruleId":"847","severity":1,"message":"848","line":142,"column":5,"nodeType":"859","messageId":"850","endLine":142,"endColumn":48},{"ruleId":"847","severity":1,"message":"848","line":147,"column":5,"nodeType":"859","messageId":"850","endLine":147,"endColumn":81},{"ruleId":"847","severity":1,"message":"848","line":152,"column":5,"nodeType":"859","messageId":"850","endLine":152,"endColumn":94},{"ruleId":"847","severity":1,"message":"848","line":157,"column":5,"nodeType":"859","messageId":"850","endLine":157,"endColumn":83},{"ruleId":"855","severity":1,"message":"896","line":1,"column":17,"nodeType":"852","messageId":"857","endLine":1,"endColumn":25},{"ruleId":"855","severity":1,"message":"897","line":1,"column":27,"nodeType":"852","messageId":"857","endLine":1,"endColumn":36},{"ruleId":"855","severity":1,"message":"898","line":2,"column":10,"nodeType":"852","messageId":"857","endLine":2,"endColumn":21},{"ruleId":"855","severity":1,"message":"867","line":3,"column":10,"nodeType":"852","messageId":"857","endLine":3,"endColumn":14},{"ruleId":"855","severity":1,"message":"899","line":4,"column":10,"nodeType":"852","messageId":"857","endLine":4,"endColumn":20},{"ruleId":"855","severity":1,"message":"900","line":6,"column":10,"nodeType":"852","messageId":"857","endLine":6,"endColumn":20},{"ruleId":"855","severity":1,"message":"901","line":7,"column":10,"nodeType":"852","messageId":"857","endLine":7,"endColumn":25},{"ruleId":"855","severity":1,"message":"902","line":8,"column":10,"nodeType":"852","messageId":"857","endLine":8,"endColumn":24},{"ruleId":"855","severity":1,"message":"903","line":9,"column":10,"nodeType":"852","messageId":"857","endLine":9,"endColumn":19},{"ruleId":"855","severity":1,"message":"912","line":8,"column":10,"nodeType":"852","messageId":"857","endLine":8,"endColumn":21},{"ruleId":"855","severity":1,"message":"891","line":145,"column":11,"nodeType":"852","messageId":"857","endLine":145,"endColumn":19},{"ruleId":"855","severity":1,"message":"911","line":5,"column":10,"nodeType":"852","messageId":"857","endLine":5,"endColumn":17},{"ruleId":"855","severity":1,"message":"891","line":107,"column":11,"nodeType":"852","messageId":"857","endLine":107,"endColumn":19},{"ruleId":"855","severity":1,"message":"891","line":17,"column":9,"nodeType":"852","messageId":"857","endLine":17,"endColumn":17},{"ruleId":"855","severity":1,"message":"892","line":87,"column":12,"nodeType":"852","messageId":"857","endLine":87,"endColumn":20},{"ruleId":"855","severity":1,"message":"890","line":132,"column":10,"nodeType":"852","messageId":"857","endLine":132,"endColumn":16},{"ruleId":"855","severity":1,"message":"869","line":8,"column":3,"nodeType":"852","messageId":"857","endLine":8,"endColumn":27},{"ruleId":"855","severity":1,"message":"870","line":9,"column":3,"nodeType":"852","messageId":"857","endLine":9,"endColumn":27},{"ruleId":"855","severity":1,"message":"871","line":10,"column":3,"nodeType":"852","messageId":"857","endLine":10,"endColumn":28},{"ruleId":"855","severity":1,"message":"872","line":11,"column":3,"nodeType":"852","messageId":"857","endLine":11,"endColumn":39},{"ruleId":"855","severity":1,"message":"873","line":12,"column":3,"nodeType":"852","messageId":"857","endLine":12,"endColumn":38},{"ruleId":"855","severity":1,"message":"874","line":13,"column":3,"nodeType":"852","messageId":"857","endLine":13,"endColumn":35},{"ruleId":"847","severity":1,"message":"848","line":116,"column":3,"nodeType":"859","messageId":"850","endLine":116,"endColumn":29},{"ruleId":"847","severity":1,"message":"848","line":305,"column":3,"nodeType":"859","messageId":"850","endLine":305,"endColumn":27},{"ruleId":"847","severity":1,"message":"848","line":309,"column":3,"nodeType":"859","messageId":"850","endLine":309,"endColumn":35},{"ruleId":"855","severity":1,"message":"860","line":311,"column":50,"nodeType":"852","messageId":"857","endLine":311,"endColumn":51},{"ruleId":"855","severity":1,"message":"860","line":311,"column":63,"nodeType":"852","messageId":"857","endLine":311,"endColumn":64},{"ruleId":"847","severity":1,"message":"848","line":316,"column":3,"nodeType":"859","messageId":"850","endLine":316,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":429,"column":3,"nodeType":"859","messageId":"850","endLine":429,"endColumn":46},{"ruleId":"847","severity":1,"message":"848","line":488,"column":3,"nodeType":"859","messageId":"850","endLine":488,"endColumn":12},{"ruleId":"847","severity":1,"message":"848","line":503,"column":3,"nodeType":"859","messageId":"850","endLine":503,"endColumn":47},{"ruleId":"847","severity":1,"message":"848","line":532,"column":3,"nodeType":"859","messageId":"850","endLine":532,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":627,"column":3,"nodeType":"859","messageId":"850","endLine":627,"endColumn":40},{"ruleId":"847","severity":1,"message":"848","line":693,"column":3,"nodeType":"859","messageId":"850","endLine":693,"endColumn":107},{"ruleId":"855","severity":1,"message":"861","line":769,"column":19,"nodeType":"852","messageId":"857","endLine":769,"endColumn":41},{"ruleId":"847","severity":1,"message":"848","line":806,"column":3,"nodeType":"859","messageId":"850","endLine":806,"endColumn":15},{"ruleId":"847","severity":1,"message":"848","line":814,"column":3,"nodeType":"859","messageId":"850","endLine":814,"endColumn":17},{"ruleId":"847","severity":1,"message":"848","line":822,"column":3,"nodeType":"859","messageId":"850","endLine":822,"endColumn":14},{"ruleId":"847","severity":1,"message":"848","line":841,"column":3,"nodeType":"859","messageId":"850","endLine":841,"endColumn":73},{"ruleId":"847","severity":1,"message":"848","line":849,"column":3,"nodeType":"859","messageId":"850","endLine":849,"endColumn":72},{"ruleId":"847","severity":1,"message":"848","line":857,"column":3,"nodeType":"859","messageId":"850","endLine":857,"endColumn":109},{"ruleId":"847","severity":1,"message":"848","line":866,"column":3,"nodeType":"859","messageId":"850","endLine":866,"endColumn":108},{"ruleId":"847","severity":1,"message":"848","line":875,"column":3,"nodeType":"859","messageId":"850","endLine":875,"endColumn":110},{"ruleId":"847","severity":1,"message":"848","line":884,"column":3,"nodeType":"859","messageId":"850","endLine":884,"endColumn":75},{"ruleId":"847","severity":1,"message":"848","line":5,"column":32,"nodeType":"849","messageId":"850","endLine":5,"endColumn":42},{"ruleId":"847","severity":1,"message":"854","line":5,"column":33,"nodeType":"852","messageId":"853","endLine":5,"endColumn":38},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'onPerfEntry' should be typed.","Identifier","missingArgType","Argument 'props' should be typed.","@typescript-eslint/no-unused-vars","'mdiPhone' is defined but never used.","unusedVar","'props' is defined but never used.","FunctionExpression","'_' is defined but never used.","'parsedBadSemanticsData' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["923","924"],"'Form' is defined but never used.","'isFirefox' is assigned a value but never used.","'signInActionCreatorAsync' is defined but never used.","'signUpActionCreatorAsync' is defined but never used.","'signOutActionCreatorAsync' is defined but never used.","'refreshAccessTokenActionCreatorAsync' is defined but never used.","'accountDeactivateActionCreatorAsync' is defined but never used.","'setAccountInfoForceActionCreator' is defined but never used.","Argument 'text' should be typed.","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","Argument 'param' should be typed.","'arr' is defined but never used.","'a' is defined but never used.","Argument 'inProps' should be typed.","'mdiCardAccountDetails' is defined but never used.","'k' is defined but never used.","'PlaylistListener' is defined but never used.","'PlaylistItem' is defined but never used.","'i' is defined but never used.",["925","926"],["927","928"],"'result' is defined but never used.","'navigate' is assigned a value but never used.","'response' is defined but never used.","'PlayCoSocketIOHandler' is defined but never used.","'key' is defined but never used.","'reason' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'FrostError' is defined but never used.","'PHFormText' is defined but never used.","'PHSpinnerButton' is defined but never used.","'PlaylistConfig' is defined but never used.","'PlayCoAPI' is defined but never used.","'parsedResult' is assigned a value but never used.","'useLocation' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'ListRow' is defined but never used.","'dispatch' is assigned a value but never used.","'parse_host' is defined but never used.","'isEmail' is defined but never used.","'AccountInfo' is defined but never used.","'Dispatch' is defined but never used.","Argument 'dispatch' should be typed.","Argument 'getState' should be typed.","Argument 'idOrEmail' should be typed.","Argument 'password' should be typed.","Argument 'id' should be typed.","Argument 'email' should be typed.","Argument 'nick' should be typed.","'Button' is defined but never used.",["929","930"],{"messageId":"931","fix":"932","desc":"933"},{"messageId":"934","fix":"935","desc":"936"},{"messageId":"931","fix":"937","desc":"933"},{"messageId":"934","fix":"938","desc":"936"},{"messageId":"931","fix":"939","desc":"933"},{"messageId":"934","fix":"940","desc":"936"},{"messageId":"931","fix":"941","desc":"933"},{"messageId":"934","fix":"942","desc":"936"},"suggestUnknown",{"range":"943","text":"944"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"943","text":"945"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"946","text":"944"},{"range":"946","text":"945"},{"range":"947","text":"944"},{"range":"947","text":"945"},{"range":"948","text":"944"},{"range":"948","text":"945"},[569,572],"unknown","never",[1178,1181],[2901,2904],[569,572]]