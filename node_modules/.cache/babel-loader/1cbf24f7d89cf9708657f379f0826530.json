{"ast":null,"code":"import { Manager } from 'socket.io-client';\nimport { FrostError } from 'src/common/error';\nimport FrostAPI from 'src/network/api';\nconst SIO_RESP_UNMOUNT_TIMEOUT = 15;\nconst SIO_DESCRIPTION = '재생목록의 실시간 정보를 받아오기 위한 연결';\nconst COMMON_ERR_MSG_ADD_MAP = {\n  retryAfter5Min: '\\n5분 후에 다시 시도해주세요.',\n  retryAfter10Min: '\\n10분 후에 다시 시도해주세요.',\n  retryFullReload: '\\n키보드에서 \\'F5\\' 버튼을 눌러서 새로고침을 해 주세요.',\n  retryAfterSignIn: '\\n로그인 후 이용해주세요.'\n};\nconst COMMON_ERR_MSG_MAP = {\n  safeDisconnected: SIO_DESCRIPTION + '이 종료됐어요.',\n  unknownErrorRetry5Min: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfter5Min,\n  unknownErrorRetryFullReload: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  signInRequired: '이 기능은 로그인 후 사용할 수 있어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfterSignIn,\n  signInfoCheckFailed: '로그인 정보를 확인하는 중 문제가 발생했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  connectFailed: SIO_DESCRIPTION + '을 만들지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  unknownDisconnected: SIO_DESCRIPTION + '이\\n알 수 없는 이유로 종료됐어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  authFailed: SIO_DESCRIPTION + '을 인증하지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  authResponseFailed: SIO_DESCRIPTION + '의 인증 정보를 받지 못했어요.' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\n  unknownAuthFailed: SIO_DESCRIPTION + '을 인증하는 중\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload\n};\n\n// Generate random safe string, borrowed from FrostAPI implementation\nconst generateRandomSecureToken = bytes => {\n  const randArray = new Uint32Array(bytes);\n  window.crypto.getRandomValues(randArray);\n  return buf2hex(randArray);\n}; // From https://stackoverflow.com/a/40031979\n// Buffer to hex, also borrowed from FrostAPI implementation\n\n\nconst buf2hex = buffer => {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n};\n\nlet playCoSocketIOHandlerInstance;\nexport class PlayCoSocketIOHandler {\n  // UTIL METHOD\n  get connected() {\n    return this.socketIo.connected;\n  } // UTIL METHOD\n\n\n  getAuthBody(additionalBody) {\n    return Object.assign({\n      sid: this.sessionId,\n      sio_token: this.sioToken,\n      sio_csrf_token: this.csrfToken\n    }, additionalBody !== null && additionalBody !== void 0 ? additionalBody : {});\n  } // UTIL METHOD\n\n\n  setSIOStatMsg(newMsg) {\n    this.socketIoStatusMessage = newMsg;\n\n    try {\n      if (this.onSocketIOStatusChanged) this.onSocketIOStatusChanged(newMsg);\n    } catch (e) {\n      console.log(e);\n    }\n  } // UTIL METHOD\n\n\n  defaultErrorHandler(classObj, reason, shouldDisconnect = true, alternativeShowMsg) {\n    const self = this !== null && this !== void 0 ? this : playCoSocketIOHandlerInstance;\n    console.log(reason.message);\n    console.log(reason.debugMessage);\n    console.log(reason.apiResponse); // Set error message\n\n    try {\n      self.setSIOStatMsg(alternativeShowMsg !== null && alternativeShowMsg !== void 0 ? alternativeShowMsg : reason.message);\n    } catch (e1) {\n      console.log(alternativeShowMsg !== null && alternativeShowMsg !== void 0 ? alternativeShowMsg : reason.message);\n      console.log(e1);\n    } // Disconnect from SocketIO.\n\n\n    if (shouldDisconnect) self.disconnect(false);\n    return false;\n  } // UTIL METHOD\n\n\n  unsubscribeAllHooks() {\n    this.onPlayCoConnected = undefined;\n    this.onPlaylistModified = undefined;\n    this.onUserStatusChanged = undefined;\n    this.onSocketIOStatusChanged = undefined;\n  } // EVENT HANDLER\n\n\n  constructor() {\n    this.socketIoMgr = void 0;\n    this.socketIo = void 0;\n    this.sioToken = void 0;\n    this.sioTokenExpiresAt = void 0;\n    this.csrfToken = void 0;\n    this.sessionId = void 0;\n    this.socketIoStatusMessage = void 0;\n    this.onPlayCoConnected = void 0;\n    this.onPlaylistModified = void 0;\n    this.onUserStatusChanged = void 0;\n    this.onSocketIOStatusChanged = void 0;\n    this.socketIoEventHandler = {\n      connect: () => {\n        this.sessionId = this.socketIo.id; // Get SIO Token and register session\n\n        this.refreshSIOToken(undefined, true, true);\n      },\n      reconnect: () => {\n        // Same as connect\n        this.sessionId = this.socketIo.id; // Get SIO Token and register session\n\n        this.refreshSIOToken(undefined, true, true);\n      },\n      disconnect: reason => {\n        this.unsubscribeAllHooks();\n        this.sessionId = '';\n        this.sioToken = '';\n        this.sioTokenExpiresAt = new Date();\n        this.csrfToken = generateRandomSecureToken(32);\n      },\n      REQUEST_RESPONSE_0: data => {\n        console.log('Unknown response received! Received data >>> ---------------');\n        console.log(data);\n        console.log('------------------------------------------------------------');\n      },\n      PLAYLIST_USER_ENTERED: data => {\n        // When some user entered to this room\n        const roomStatus = data.data.room;\n\n        try {\n          if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus);\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      PLAYLIST_USER_EXITED: data => {\n        // When some user exited from this room\n        const roomStatus = data.data.room;\n\n        try {\n          if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus);\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      PLAYLIST_MODIFIED: data => {\n        var _data$data$room$db_mo;\n\n        const roomStatus = data.data.room;\n        const shouldRoomRefreshed = (_data$data$room$db_mo = data.data.room.db_modified) !== null && _data$data$room$db_mo !== void 0 ? _data$data$room$db_mo : false;\n\n        try {\n          if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus);\n        } catch (e) {\n          console.log(e);\n        }\n\n        try {\n          if (shouldRoomRefreshed && this.onPlaylistModified) this.onPlaylistModified();\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      OFFICIAL_ANNOUNCEMENT: data => {\n        // RESERVED\n        console.log('OFFICIAL_ANNOUNCEMENT event received! Received data >>> ----');\n        console.log(data);\n        console.log('------------------------------------------------------------');\n      }\n    };\n    if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\n    this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\n      reconnectionDelayMax: 5000,\n      path: '/api/dev/ws',\n      transports: ['websocket'],\n      upgrade: false,\n      forceNew: false,\n      autoConnect: false,\n      closeOnBeforeunload: false\n    });\n    this.socketIo = this.socketIoMgr.socket('/playco_ws');\n\n    for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\n      this.socketIo.on(key, value);\n    }\n\n    playCoSocketIOHandlerInstance = this;\n  } // EVENT MAKER\n\n\n  emitEvent(event, data, onSuccess, onFailure, isRetry) {\n    const requestId = generateRandomSecureToken(16);\n\n    if (data) {\n      data.request_id = requestId;\n    } else {\n      data = {\n        request_id: requestId\n      };\n    }\n\n    const eventName = `REQUEST_RESPONSE_${requestId}`; // Unregister request response handler after {SIO_RESP_UNMOUNT_TIMEOUT}sec.\n\n    const eventHandlerTimeoutID = setTimeout(() => {\n      console.log(`WARNING: ${eventName} didn't handled in ${SIO_RESP_UNMOUNT_TIMEOUT}sec, and handler is unmounted.`);\n      this.socketIo.removeAllListeners(eventName);\n    }, SIO_RESP_UNMOUNT_TIMEOUT * 1000);\n\n    const eventHandler = response => {\n      clearTimeout(eventHandlerTimeoutID); // This will clear eventHandlerTimeout.\n\n      try {\n        if (response === null || response === void 0 ? void 0 : response.success) {\n          if (onSuccess) onSuccess(response);\n        } else {\n          // Response contains (success == false)\n          let dbgMsg = 'sio:emitEvent error\\n';\n          dbgMsg += `(event=${event})=>\\n`;\n\n          if (response) {\n            for (const [key, value] of Object.entries(response !== null && response !== void 0 ? response : {})) {\n              if (key !== 'data') {\n                dbgMsg += `response?.${key} = ${value}\\n`;\n              } else {\n                dbgMsg += `response?.${key} = ${JSON.stringify(value)}\\n`;\n              }\n            }\n          } else {\n            dbgMsg += `response = ${response}\\n`;\n          }\n\n          if (event === 'playco_connect') {\n            var _response$message;\n\n            this.defaultErrorHandler(new FrostError((_response$message = response === null || response === void 0 ? void 0 : response.message) !== null && _response$message !== void 0 ? _response$message : COMMON_ERR_MSG_MAP.unknownAuthFailed, dbgMsg, response === null || response === void 0 ? void 0 : response.code, false), true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\n            return;\n          } else if (isRetry) {\n            var _response$message2;\n\n            this.defaultErrorHandler(new FrostError((_response$message2 = response === null || response === void 0 ? void 0 : response.message) !== null && _response$message2 !== void 0 ? _response$message2 : COMMON_ERR_MSG_MAP.unknownAuthFailed, dbgMsg, response === null || response === void 0 ? void 0 : response.code, false), true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\n            return;\n          } else if (response === null || response === void 0 ? void 0 : response.subCode.startsWith('SIO_TOKEN_')) {\n            // Refresh SIO Token and retry emitEvent.\n            this.refreshSIOToken(() => this.emitEvent(event, data, onSuccess, onFailure, true), false, true);\n            return;\n          } else {\n            this.defaultErrorHandler(new FrostError((response === null || response === void 0 ? void 0 : response.message) || COMMON_ERR_MSG_MAP.unknownErrorRetry5Min, dbgMsg, response === null || response === void 0 ? void 0 : response.code, false), false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\n            return;\n          }\n        }\n      } catch (e) {\n        if (onFailure) {\n          try {\n            onFailure(e, response);\n          } catch (e1) {\n            console.log(e);\n            console.log(e1);\n            this.defaultErrorHandler(e, false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\n          }\n        }\n      }\n    };\n\n    this.socketIo.once(eventName, eventHandler);\n    this.socketIo.emit(event, data);\n  } // EVENT MAKER\n\n\n  refreshSIOToken(callback = () => {\n    /* */\n  }, isOnConnect = false, forceRefresh = false) {\n    if (!forceRefresh && this.sioToken && this.sioTokenExpiresAt > new Date()) {\n      // We assumes that token is alive.\n      // If the callback is emitEvent and server returns SIO_TOKEN_EXPIRED or SIO_TOKEN_INVALID,\n      // then emitEvent method will handle it properly.\n      callback();\n    }\n\n    const frostAPI = new FrostAPI();\n    frostAPI.isSignedIn(true).then(isSignedIn => {\n      if (!isSignedIn) {\n        // Check if Frost is signed in.\n        throw new FrostError(COMMON_ERR_MSG_MAP.signInRequired, 'on refreshSIOToken, isSignedIn == false', -1, false);\n      } else if (!this.socketIo.connected || !this.sessionId) {\n        // Check if Socket.IO is connected, and every statement is fulfilled.\n        throw new FrostError(COMMON_ERR_MSG_MAP.connectFailed, `this.socketIo.connected = ${this.socketIo.connected}, !this.sessionId = ${this.sessionId}`, -1, false);\n      } // We need to get a new SIO Token by request.\n\n\n      this.csrfToken = generateRandomSecureToken(32);\n      return frostAPI.post('playco/socketio/auth', this.getAuthBody(), true).then(result => {\n        if (!result.success) {\n          throw new FrostError(COMMON_ERR_MSG_MAP.authResponseFailed, '/playco/socketio/auth returns response.success == false', result.code, false, result);\n        } // Get SIO token from response\n\n\n        const sioTokenData = result.data.sio_token;\n        this.sioToken = sioTokenData.token;\n        this.sioTokenExpiresAt = new Date(sioTokenData.exp); // Register session if this function is called on SocketIO onConnect event.\n\n        if (isOnConnect) {\n          this.emitEvent('playco_connect', this.getAuthBody(), response => this.onPlayCoConnected ? this.onPlayCoConnected() : () => {\n            /* */\n          }, // Session creation failed\n          (reason, response) => this.defaultErrorHandler(reason, true, COMMON_ERR_MSG_MAP.authFailed));\n          return;\n        } else {\n          callback();\n          return;\n        }\n      }, reason => {\n        // Failed to get SIO token\n        reason.message = COMMON_ERR_MSG_MAP.authFailed;\n        throw reason;\n      });\n    }, reason => {\n      reason.message = COMMON_ERR_MSG_MAP.signInfoCheckFailed;\n      throw reason;\n    }).catch(this.defaultErrorHandler);\n  } // EVENT MAKER\n\n\n  connect() {\n    if (!this.socketIo.connected) // Connect SocketIO if it's not connected.\n      // This will fire this.socketIoEventHandler.connect if the connection is successfully established.\n      this.socketIo.connect();\n  } // EVENT MAKER\n\n\n  disconnect(isSafeDisconnect = true) {\n    if (this.socketIo.connected) {\n      this.socketIo.disconnect();\n      if (isSafeDisconnect) this.setSIOStatMsg(COMMON_ERR_MSG_MAP.safeDisconnected);\n    }\n  } // EVENT MAKER\n\n\n  enterPlaylist(playlistId) {\n    this.refreshSIOToken(() => this.emitEvent('playlist_enter', this.getAuthBody({\n      playlist_id: playlistId\n    }), response => {\n      /* */\n    }, (reason, response) => {\n      /* */\n    }));\n  } // EVENT MAKER\n\n\n  leavePlaylist(playlistId) {\n    this.refreshSIOToken(() => this.emitEvent('playlist_leave', this.getAuthBody({\n      playlist_id: playlistId\n    }), response => {\n      /* */\n    }, (reason, response) => {\n      /* */\n    }));\n  } // EVENT MAKER\n\n\n  setSessionCurrentPlaying(playlistId, currentPlaying) {\n    this.refreshSIOToken(() => this.emitEvent('playlist_set_status', this.getAuthBody({\n      playlist_id: playlistId,\n      currently_playing: currentPlaying\n    }), response => {\n      /* */\n    }, (reason, response) => {\n      /* */\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/playco/sio.ts"],"names":["Manager","FrostError","FrostAPI","SIO_RESP_UNMOUNT_TIMEOUT","SIO_DESCRIPTION","COMMON_ERR_MSG_ADD_MAP","retryAfter5Min","retryAfter10Min","retryFullReload","retryAfterSignIn","COMMON_ERR_MSG_MAP","safeDisconnected","unknownErrorRetry5Min","unknownErrorRetryFullReload","signInRequired","signInfoCheckFailed","connectFailed","unknownDisconnected","authFailed","authResponseFailed","unknownAuthFailed","generateRandomSecureToken","bytes","randArray","Uint32Array","window","crypto","getRandomValues","buf2hex","buffer","Uint8Array","map","x","toString","padStart","join","playCoSocketIOHandlerInstance","PlayCoSocketIOHandler","connected","socketIo","getAuthBody","additionalBody","Object","assign","sid","sessionId","sio_token","sioToken","sio_csrf_token","csrfToken","setSIOStatMsg","newMsg","socketIoStatusMessage","onSocketIOStatusChanged","e","console","log","defaultErrorHandler","classObj","reason","shouldDisconnect","alternativeShowMsg","self","message","debugMessage","apiResponse","e1","disconnect","unsubscribeAllHooks","onPlayCoConnected","undefined","onPlaylistModified","onUserStatusChanged","constructor","socketIoMgr","sioTokenExpiresAt","socketIoEventHandler","connect","id","refreshSIOToken","reconnect","Date","REQUEST_RESPONSE_0","data","PLAYLIST_USER_ENTERED","roomStatus","room","PLAYLIST_USER_EXITED","PLAYLIST_MODIFIED","shouldRoomRefreshed","db_modified","OFFICIAL_ANNOUNCEMENT","reconnectionDelayMax","path","transports","upgrade","forceNew","autoConnect","closeOnBeforeunload","socket","key","value","entries","on","emitEvent","event","onSuccess","onFailure","isRetry","requestId","request_id","eventName","eventHandlerTimeoutID","setTimeout","removeAllListeners","eventHandler","response","clearTimeout","success","dbgMsg","JSON","stringify","code","subCode","startsWith","once","emit","callback","isOnConnect","forceRefresh","frostAPI","isSignedIn","then","post","result","sioTokenData","token","exp","catch","isSafeDisconnect","enterPlaylist","playlistId","playlist_id","leavePlaylist","setSessionCurrentPlaying","currentPlaying","currently_playing"],"mappings":"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","sourcesContent":["import { io, Manager } from 'socket.io-client';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from 'src/network/api';\r\n\r\nconst SIO_RESP_UNMOUNT_TIMEOUT = 15;\r\nconst SIO_DESCRIPTION = '재생목록의 실시간 정보를 받아오기 위한 연결';\r\nconst COMMON_ERR_MSG_ADD_MAP = {\r\n    retryAfter5Min: '\\n5분 후에 다시 시도해주세요.',\r\n    retryAfter10Min: '\\n10분 후에 다시 시도해주세요.',\r\n    retryFullReload: '\\n키보드에서 \\'F5\\' 버튼을 눌러서 새로고침을 해 주세요.',\r\n    retryAfterSignIn: '\\n로그인 후 이용해주세요.',\r\n}\r\nconst COMMON_ERR_MSG_MAP = {\r\n    safeDisconnected: SIO_DESCRIPTION + '이 종료됐어요.',\r\n\r\n    unknownErrorRetry5Min: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfter5Min,\r\n    unknownErrorRetryFullReload: SIO_DESCRIPTION + '에서\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    signInRequired: '이 기능은 로그인 후 사용할 수 있어요,' + COMMON_ERR_MSG_ADD_MAP.retryAfterSignIn,\r\n    signInfoCheckFailed: '로그인 정보를 확인하는 중 문제가 발생했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    connectFailed: SIO_DESCRIPTION + '을 만들지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownDisconnected: SIO_DESCRIPTION + '이\\n알 수 없는 이유로 종료됐어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authFailed: SIO_DESCRIPTION + '을 인증하지 못했어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    authResponseFailed: SIO_DESCRIPTION + '의 인증 정보를 받지 못했어요.' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n    unknownAuthFailed: SIO_DESCRIPTION + '을 인증하는 중\\n알 수 없는 문제가 생겼어요,' + COMMON_ERR_MSG_ADD_MAP.retryFullReload,\r\n}\r\n\r\ninterface PlayCoSocketIOResponseType {\r\n    code: number;\r\n    subCode: string;\r\n    success: boolean;\r\n    message: string;\r\n    data?: Record<string, unknown>;\r\n}\r\n\r\nexport interface PlayCoRoomType {\r\n    playlist_id: number;\r\n    playlist_hash: string;\r\n    participants: {\r\n        [nickname: string]: {\r\n            nickname: string;\r\n            data: Record<string, unknown>;\r\n            status: {\r\n                currently_playing: number;\r\n            };\r\n        }\r\n    };\r\n    current_play_target?: string; // NOT_USED\r\n    db_modified?: boolean;\r\n}\r\n\r\n// Generate random safe string, borrowed from FrostAPI implementation\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n    const randArray = new Uint32Array(bytes);\r\n    window.crypto.getRandomValues(randArray);\r\n    return buf2hex(randArray);\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\n// Buffer to hex, also borrowed from FrostAPI implementation\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n    return [...new Uint8Array(buffer)]\r\n        .map(x => x.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\nlet playCoSocketIOHandlerInstance: PlayCoSocketIOHandler;\r\nexport class PlayCoSocketIOHandler {\r\n    private socketIoMgr: io.Manager;\r\n    private socketIo: io;\r\n\r\n    private sioToken: string;\r\n    private sioTokenExpiresAt: Date;\r\n    private csrfToken: string;\r\n    private sessionId: string;\r\n\r\n    socketIoStatusMessage: string;\r\n\r\n    onPlayCoConnected?: () => void;\r\n    onPlaylistModified?: () => void;\r\n    onUserStatusChanged?: (PlayCoRoomType) => void;\r\n    onSocketIOStatusChanged?: (string) => void;\r\n\r\n    // UTIL METHOD\r\n    get connected() {\r\n        return this.socketIo.connected;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    private getAuthBody(additionalBody?: Record<string, unknown>) {\r\n        return Object.assign(\r\n            {\r\n                sid: this.sessionId,\r\n                sio_token: this.sioToken,\r\n                sio_csrf_token: this.csrfToken,\r\n            },\r\n            additionalBody ?? {}\r\n        )\r\n    }\r\n\r\n    // UTIL METHOD\r\n    setSIOStatMsg(newMsg: string) {\r\n        this.socketIoStatusMessage = newMsg;\r\n        try { if (this.onSocketIOStatusChanged) this.onSocketIOStatusChanged(newMsg); } catch (e) { console.log(e); }\r\n    }\r\n\r\n    // UTIL METHOD\r\n    defaultErrorHandler(classObj: PlayCoSocketIOHandler, reason: FrostError, shouldDisconnect = true, alternativeShowMsg?: string) {\r\n        const self = this ?? playCoSocketIOHandlerInstance;\r\n\r\n        console.log(reason.message);\r\n        console.log(reason.debugMessage);\r\n        console.log(reason.apiResponse);\r\n\r\n        // Set error message\r\n        try {\r\n            self.setSIOStatMsg(alternativeShowMsg ?? reason.message);\r\n        } catch (e1) {\r\n            console.log(alternativeShowMsg ?? reason.message);\r\n            console.log(e1);\r\n        }\r\n\r\n        // Disconnect from SocketIO.\r\n        if (shouldDisconnect) self.disconnect(false);\r\n\r\n        return false;\r\n    }\r\n\r\n    // UTIL METHOD\r\n    unsubscribeAllHooks() {\r\n        this.onPlayCoConnected = undefined;\r\n        this.onPlaylistModified = undefined;\r\n        this.onUserStatusChanged = undefined;\r\n        this.onSocketIOStatusChanged = undefined;\r\n    }\r\n\r\n    // EVENT HANDLER\r\n    private socketIoEventHandler: Record<string, () => void> = {\r\n        connect: () => {\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        reconnect: () => {\r\n            // Same as connect\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token and register session\r\n            this.refreshSIOToken(undefined, true, true);\r\n        },\r\n        disconnect: (reason) => {\r\n            this.unsubscribeAllHooks();\r\n\r\n            this.sessionId = '';\r\n            this.sioToken = '';\r\n            this.sioTokenExpiresAt = new Date();\r\n            this.csrfToken = generateRandomSecureToken(32);\r\n        },\r\n        REQUEST_RESPONSE_0: (data?: PlayCoSocketIOResponseType) => {\r\n            console.log('Unknown response received! Received data >>> ---------------');\r\n            console.log(data);\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n        PLAYLIST_USER_ENTERED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user entered to this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_USER_EXITED: (data: PlayCoSocketIOResponseType) => {\r\n            // When some user exited from this room\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n        },\r\n        PLAYLIST_MODIFIED: (data: PlayCoSocketIOResponseType) => {\r\n            const roomStatus: PlayCoRoomType = data.data.room;\r\n            const shouldRoomRefreshed: boolean = data.data.room.db_modified ?? false;\r\n            try { if (this.onUserStatusChanged) this.onUserStatusChanged(roomStatus); } catch (e) { console.log(e); }\r\n            try { if (shouldRoomRefreshed && this.onPlaylistModified) this.onPlaylistModified(); } catch (e) { console.log(e); }\r\n        },\r\n        OFFICIAL_ANNOUNCEMENT: (data?: PlayCoSocketIOResponseType) => {\r\n            // RESERVED\r\n            console.log('OFFICIAL_ANNOUNCEMENT event received! Received data >>> ----');\r\n            console.log(data)\r\n            console.log('------------------------------------------------------------');\r\n        },\r\n    };\r\n\r\n    constructor() {\r\n        if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\r\n\r\n        this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\r\n            reconnectionDelayMax: 5000,\r\n            path: '/api/dev/ws',\r\n            transports: ['websocket',],\r\n            upgrade: false,\r\n\r\n            forceNew: false,\r\n            autoConnect: false,\r\n\r\n            closeOnBeforeunload: false,\r\n        });\r\n\r\n        this.socketIo = this.socketIoMgr.socket('/playco_ws');\r\n        for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\r\n            this.socketIo.on(key, value);\r\n        }\r\n\r\n        playCoSocketIOHandlerInstance = this;\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private emitEvent(\r\n        event: string,\r\n        data?: Record<string, unknown>,\r\n        onSuccess?: (response: PlayCoSocketIOResponseType) => void,\r\n        onFailure?: (reason: FrostError, response?: PlayCoSocketIOResponseType) => void,\r\n        isRetry?: boolean) {\r\n\r\n        const requestId = generateRandomSecureToken(16);\r\n        if (data) {\r\n            data.request_id = requestId;\r\n        } else {\r\n            data = { request_id: requestId };\r\n        }\r\n\r\n        const eventName = `REQUEST_RESPONSE_${requestId}`;\r\n\r\n        // Unregister request response handler after {SIO_RESP_UNMOUNT_TIMEOUT}sec.\r\n        const eventHandlerTimeoutID = setTimeout(() => {\r\n            console.log(`WARNING: ${eventName} didn't handled in ${SIO_RESP_UNMOUNT_TIMEOUT}sec, and handler is unmounted.`);\r\n            this.socketIo.removeAllListeners(eventName);\r\n        }, SIO_RESP_UNMOUNT_TIMEOUT * 1000);\r\n\r\n        const eventHandler = (response?: PlayCoSocketIOResponseType) => {\r\n            clearTimeout(eventHandlerTimeoutID); // This will clear eventHandlerTimeout.\r\n\r\n            try {\r\n                if (response?.success) {\r\n                    if (onSuccess) onSuccess(response);\r\n                } else {\r\n                    // Response contains (success == false)\r\n                    let dbgMsg = 'sio:emitEvent error\\n';\r\n                    dbgMsg += `(event=${event})=>\\n`\r\n                    if (response) {\r\n                        for (const [key, value] of Object.entries(response ?? {})) {\r\n                            if (key !== 'data') {\r\n                                dbgMsg += `response?.${key} = ${value}\\n`\r\n                            } else {\r\n                                dbgMsg += `response?.${key} = ${JSON.stringify(value)}\\n`\r\n                            }\r\n                        }\r\n                    } else { dbgMsg += `response = ${response}\\n`; }\r\n\r\n                    if (event === 'playco_connect') {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (isRetry) {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message ?? COMMON_ERR_MSG_MAP.unknownAuthFailed,\r\n                                dbgMsg, response?.code, false),\r\n                            true, COMMON_ERR_MSG_MAP.unknownAuthFailed);\r\n                        return;\r\n                    } else if (response?.subCode.startsWith('SIO_TOKEN_')) {\r\n                        // Refresh SIO Token and retry emitEvent.\r\n                        this.refreshSIOToken(() => this.emitEvent(event, data, onSuccess, onFailure, true), false, true);\r\n                        return;\r\n                    } else {\r\n                        this.defaultErrorHandler(\r\n                            new FrostError(\r\n                                response?.message || COMMON_ERR_MSG_MAP.unknownErrorRetry5Min,\r\n                                dbgMsg, response?.code, false),\r\n                            false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                        return;\r\n                    }\r\n                }\r\n            } catch (e: FrostError) {\r\n                if (onFailure) {\r\n                    try {\r\n                        onFailure(e, response);\r\n                    } catch (e1) {\r\n                        console.log(e);\r\n                        console.log(e1);\r\n\r\n                        this.defaultErrorHandler(e, false, COMMON_ERR_MSG_MAP.unknownErrorRetry5Min);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.socketIo.once(eventName, eventHandler);\r\n        this.socketIo.emit(event, data);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    private refreshSIOToken(callback: (() => void) = (() => { /* */ }), isOnConnect = false, forceRefresh = false) {\r\n        if (!forceRefresh && this.sioToken && this.sioTokenExpiresAt > new Date()) {\r\n            // We assumes that token is alive.\r\n            // If the callback is emitEvent and server returns SIO_TOKEN_EXPIRED or SIO_TOKEN_INVALID,\r\n            // then emitEvent method will handle it properly.\r\n            callback();\r\n        }\r\n\r\n        const frostAPI = new FrostAPI();\r\n        frostAPI\r\n            .isSignedIn(true)\r\n            .then(\r\n                (isSignedIn) => {\r\n                    if (!isSignedIn) { // Check if Frost is signed in.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.signInRequired,\r\n                            'on refreshSIOToken, isSignedIn == false', -1, false);\r\n                    } else if (!this.socketIo.connected || !this.sessionId) { // Check if Socket.IO is connected, and every statement is fulfilled.\r\n                        throw new FrostError(\r\n                            COMMON_ERR_MSG_MAP.connectFailed,\r\n                            `this.socketIo.connected = ${this.socketIo.connected}, !this.sessionId = ${this.sessionId}`, -1, false);\r\n                    }\r\n\r\n                    // We need to get a new SIO Token by request.\r\n                    this.csrfToken = generateRandomSecureToken(32);\r\n                    return frostAPI\r\n                        .post('playco/socketio/auth', this.getAuthBody(), true)\r\n                        .then(\r\n                            (result) => {\r\n                                if (!result.success) {\r\n                                    throw new FrostError(\r\n                                        COMMON_ERR_MSG_MAP.authResponseFailed,\r\n                                        '/playco/socketio/auth returns response.success == false',\r\n                                        result.code, false, result);\r\n                                }\r\n\r\n                                // Get SIO token from response\r\n                                const sioTokenData: { 'exp': string, 'token': string } = result.data.sio_token;\r\n                                this.sioToken = sioTokenData.token;\r\n                                this.sioTokenExpiresAt = new Date(sioTokenData.exp);\r\n\r\n                                // Register session if this function is called on SocketIO onConnect event.\r\n                                if (isOnConnect) {\r\n                                    this.emitEvent(\r\n                                        'playco_connect', this.getAuthBody(),\r\n                                        (response) => ((this.onPlayCoConnected) ? this.onPlayCoConnected() : () => {/* */ }),\r\n                                        // Session creation failed\r\n                                        (reason, response) => this.defaultErrorHandler(reason, true, COMMON_ERR_MSG_MAP.authFailed)\r\n                                    );\r\n                                    return;\r\n                                } else {\r\n                                    callback();\r\n                                    return;\r\n                                }\r\n                            },\r\n                            (reason: FrostError) => { // Failed to get SIO token\r\n                                reason.message = COMMON_ERR_MSG_MAP.authFailed;\r\n                                throw reason;\r\n                            },\r\n                        );\r\n                },\r\n                (reason: FrostError) => {\r\n                    reason.message = COMMON_ERR_MSG_MAP.signInfoCheckFailed;\r\n                    throw reason;\r\n                }\r\n            ).catch(this.defaultErrorHandler);\r\n    }\r\n\r\n    // EVENT MAKER\r\n    connect() {\r\n        if (!this.socketIo.connected) // Connect SocketIO if it's not connected.\r\n            // This will fire this.socketIoEventHandler.connect if the connection is successfully established.\r\n            this.socketIo.connect();\r\n    }\r\n\r\n    // EVENT MAKER\r\n    disconnect(isSafeDisconnect = true) {\r\n        if (this.socketIo.connected) {\r\n            this.socketIo.disconnect();\r\n\r\n            if (isSafeDisconnect)\r\n                this.setSIOStatMsg(COMMON_ERR_MSG_MAP.safeDisconnected);\r\n        }\r\n    }\r\n\r\n    // EVENT MAKER\r\n    enterPlaylist(playlistId: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_enter',\r\n                this.getAuthBody(({ playlist_id: playlistId })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    leavePlaylist(playlistId: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_leave',\r\n                this.getAuthBody(({ playlist_id: playlistId })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n\r\n    // EVENT MAKER\r\n    setSessionCurrentPlaying(playlistId: number, currentPlaying: number) {\r\n        this.refreshSIOToken(\r\n            () => this.emitEvent(\r\n                'playlist_set_status',\r\n                this.getAuthBody(({ playlist_id: playlistId, currently_playing: currentPlaying })),\r\n                (response) => { /* */ },\r\n                (reason, response) => { /* */ },\r\n            )\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}