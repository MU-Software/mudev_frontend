{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import FrostAPI from'../../../network/api';import{ACCOUNT_FETCHING,SIGNED_IN,SIGNED_OUT,FORCE_SET_ACCOUNTINFO}from'./action';import{AccountInfo}from'./model';export var removeFrostErrorFromStateActionCreator=function removeFrostErrorFromStateActionCreator(){return function(dispatch,getState){dispatch({type:FORCE_SET_ACCOUNTINFO,accountInfo:new AccountInfo(_objectSpread(_objectSpread({},getState().accountReducer||{}),{},{frostErrorObj:undefined}))});};};export var signInActionCreatorAsync=function signInActionCreatorAsync(idOrEmail,password){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ACCOUNT_FETCHING});return _context.abrupt(\"return\",new FrostAPI().signIn(idOrEmail,password).then(function(result){return dispatch({type:SIGNED_IN,accountInfo:new AccountInfo({isSignedIn:true,uuid:result.userData.uuid,id:result.userData.id,nick:result.userData.nickname,email:result.userData.email,emailVerified:result.userData.email_verified,profileImageUrl:result.userData.profile_image})});},function(reason){return dispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedIn:false,frostErrorObj:reason})});}));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var signUpActionCreatorAsync=function signUpActionCreatorAsync(id,email,nick,password){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:ACCOUNT_FETCHING});new FrostAPI().signUp(id,email,password,nick).then(function(api){if(api.isSignedInWithoutAsync()){dispatch({type:SIGNED_IN,accountInfo:new AccountInfo({isSignedIn:true,isSignedUp:true,uuid:api.userData.uuid,id:api.userData.id,nick:api.userData.nickname,email:api.userData.email,emailVerified:api.userData.email_verified,profileImageUrl:api.userData.profile_image})});}else{// User successfully signed up, but needs email verification.\ndispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedUp:true})});}},function(reason){return dispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedIn:false,frostErrorObj:reason})});});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var signOutActionCreatorAsync=function signOutActionCreatorAsync(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch({type:ACCOUNT_FETCHING});new FrostAPI().signOut().finally(function(){return dispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedIn:false})});});case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var refreshAccessTokenActionCreatorAsync=function refreshAccessTokenActionCreatorAsync(){var forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch({type:ACCOUNT_FETCHING});new FrostAPI().refreshAuthentications(forceRefresh).then(function(result){return dispatch({type:SIGNED_IN,accountInfo:new AccountInfo({isSignedIn:true,uuid:result.userData.uuid,id:result.userData.id,nick:result.userData.nickname,email:result.userData.email,emailVerified:result.userData.email_verified,profileImageUrl:result.userData.profile_image})});}).catch(function(reason){return dispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedIn:false,frostErrorObj:reason})});});case 2:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var accountDeactivateActionCreatorAsync=function accountDeactivateActionCreatorAsync(email,pw){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch,getState){var prevState;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:// Save previous state before dispatching something.\nprevState=getState().accountReducer;dispatch({type:ACCOUNT_FETCHING});new FrostAPI().deactivate(email,pw).then(function(){return dispatch({type:SIGNED_OUT,accountInfo:new AccountInfo({isSignedIn:false})});}).catch(function(reason){return dispatch({// Guessing out what was the last action using previous account state.\ntype:prevState.isSignedIn?SIGNED_IN:SIGNED_OUT,accountInfo:new AccountInfo(_objectSpread(_objectSpread({},prevState),{},{frostErrorObj:reason}))});});case 3:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5,_x6){return _ref5.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/redux/modules/account/action_creator.ts"],"names":["FrostAPI","ACCOUNT_FETCHING","SIGNED_IN","SIGNED_OUT","FORCE_SET_ACCOUNTINFO","AccountInfo","removeFrostErrorFromStateActionCreator","dispatch","getState","type","accountInfo","accountReducer","frostErrorObj","undefined","signInActionCreatorAsync","idOrEmail","password","signIn","then","result","isSignedIn","uuid","userData","id","nick","nickname","email","emailVerified","email_verified","profileImageUrl","profile_image","reason","signUpActionCreatorAsync","signUp","api","isSignedInWithoutAsync","isSignedUp","signOutActionCreatorAsync","signOut","finally","refreshAccessTokenActionCreatorAsync","forceRefresh","refreshAuthentications","catch","accountDeactivateActionCreatorAsync","pw","prevState","deactivate"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from '../../../network/api';\r\n\r\nimport {\r\n    ACCOUNT_FETCHING,\r\n    SIGNED_IN,\r\n    SIGNED_OUT,\r\n    FORCE_SET_ACCOUNTINFO,\r\n} from './action';\r\nimport { AccountInfo } from './model';\r\n\r\nexport const removeFrostErrorFromStateActionCreator = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FORCE_SET_ACCOUNTINFO,\r\n        accountInfo: new AccountInfo({\r\n            ...(getState().accountReducer || {}),\r\n            frostErrorObj: undefined,\r\n        }),\r\n    });\r\n};\r\n\r\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    return (new FrostAPI())\r\n        .signIn(idOrEmail, password)\r\n        .then(\r\n            (result: FrostAPI) => dispatch({\r\n                type: SIGNED_IN,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: true,\r\n                    uuid: result.userData.uuid,\r\n                    id: result.userData.id,\r\n                    nick: result.userData.nickname,\r\n                    email: result.userData.email,\r\n                    emailVerified: result.userData.email_verified,\r\n                    profileImageUrl: result.userData.profile_image,\r\n                }),\r\n            }),\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signUp(id, email, password, nick)\r\n        .then(\r\n            (api: FrostAPI) => {\r\n                if (api.isSignedInWithoutAsync()) {\r\n                    dispatch({\r\n                        type: SIGNED_IN,\r\n                        accountInfo: new AccountInfo({\r\n                            isSignedIn: true,\r\n                            isSignedUp: true,\r\n\r\n                            uuid: api.userData.uuid,\r\n                            id: api.userData.id,\r\n                            nick: api.userData.nickname,\r\n                            email: api.userData.email,\r\n                            emailVerified: api.userData.email_verified,\r\n                            profileImageUrl: api.userData.profile_image,\r\n                        }),\r\n                    });\r\n                } else {\r\n                    // User successfully signed up, but needs email verification.\r\n                    dispatch({\r\n                        type: SIGNED_OUT,\r\n                        accountInfo: new AccountInfo({\r\n                            isSignedUp: true,\r\n                        }),\r\n                    });\r\n                }\r\n            },\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const signOutActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signOut()\r\n        .finally(\r\n            () => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({ isSignedIn: false }),\r\n            })\r\n        );\r\n};\r\n\r\nexport const refreshAccessTokenActionCreatorAsync = (forceRefresh = false) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .refreshAuthentications(forceRefresh)\r\n        .then((result: FrostAPI) => dispatch({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n                emailVerified: result.userData.email_verified,\r\n                profileImageUrl: result.userData.profile_image,\r\n            }),\r\n        }))\r\n        .catch((reason: FrostError) => dispatch({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        }));\r\n};\r\n\r\nexport const accountDeactivateActionCreatorAsync = (email: string, pw: string) => async (dispatch, getState) => {\r\n    // Save previous state before dispatching something.\r\n    const prevState: AccountInfo = getState().accountReducer;\r\n\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .deactivate(email, pw)\r\n        .then(() => dispatch({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({ isSignedIn: false }),\r\n        }))\r\n        .catch((reason: FrostError) => dispatch({\r\n            // Guessing out what was the last action using previous account state.\r\n            type: prevState.isSignedIn ? SIGNED_IN : SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                // Rollback to previous state, and save FrostError obj.\r\n                ...prevState,\r\n                frostErrorObj: reason,\r\n            }),\r\n        }));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}