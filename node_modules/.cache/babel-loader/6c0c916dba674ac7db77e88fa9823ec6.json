{"ast":null,"code":"import _objectSpread from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/createClass\";import{FrostError}from\"src/common/error\";import FrostAPI from\"src/network/api\";import{Playlist}from\"./model\";export var PlayCoAPI=/*#__PURE__*/function(){function PlayCoAPI(){_classCallCheck(this,PlayCoAPI);}_createClass(PlayCoAPI,null,[{key:\"url\",value:function url(playlistId){return\"playco/playlists/\".concat(playlistId!==null&&playlistId!==void 0?playlistId:'');}},{key:\"itemUrl\",value:function itemUrl(playlistId,itemIndex){if(!playlistId)throw new FrostError('예상하지 못한 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.','itemUrl is undefined or null',-1,false);return\"playco/playlists/\".concat(playlistId,\"/items/\").concat(itemIndex!==null&&itemIndex!==void 0?itemIndex:'');}},{key:\"getAllPlaylists\",value:function getAllPlaylists(){return new FrostAPI().get(PlayCoAPI.url(),true).then(function(result){// Possible response\n// - multiple_resources_found(200)\n// - resource_not_found(404)\nif(result.code===200&&result.subCode==='resource.multiple_result'){return result.data.playco_playlists.map(function(v,i,a){return new Playlist(v);});}else if(result.code===404&&result.subCode==='resource.not_found'){return[];}else{throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getAllPlaylists\"),result.code,false,result,undefined,PlayCoAPI.url());}});}// get playlistHashAsync(playlistId: number) {\n//     return (new FrostAPI())\n//         .head\n// }\n},{key:\"getPlaylistInfo\",value:function getPlaylistInfo(playlistId){return new FrostAPI().get(PlayCoAPI.itemUrl(playlistId),true).then(function(result){// Possible response\n// - resource_found(200)\n// - resource_forbidden(403)\n// - resource_not_found(404)\nif(result.code===200&&result.subCode==='resource.result'){var playlistObj=new Playlist(_objectSpread(_objectSpread({},result.data.playco_playlist),{},{hash:result.header.get('etag')}));return playlistObj;}else if(result.code===403&&result.subCode==='resource.forbidden'){throw new FrostError('해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.itemUrl(playlistId));}else if(result.code===404&&result.subCode==='resource.not_found'){throw new FrostError('해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.itemUrl(playlistId));}else{throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.itemUrl(playlistId));}});}},{key:\"createPlaylist\",value:function createPlaylist(payload){return new FrostAPI().post(PlayCoAPI.url(),payload,true).then(function(result){if(!result.success){if(result.subCode==='resource.unique_failed'){throw new FrostError('계정 당 재생목록을 5개까지만 만드실 수 있어요,\\n기존의 재생목록을 지워주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.createPlaylist\"),result.code,false,result,undefined,PlayCoAPI.url());}else{throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.createPlaylist\"),result.code,false,result,undefined,PlayCoAPI.url());}}return result;},function(reason){throw reason;});}},{key:\"modifyPlaylist\",value:function modifyPlaylist(playlistId,data,hash){return new FrostAPI().patch(PlayCoAPI.url(playlistId),data,true,{'If-Match':hash}).then(function(result){// Possible response\n// - resource_modified(201)\n// - resource_forbidden(403)\n// - resource_not_found(404)\nif(200<=result.code&&result.code<=399){return result;}else if(result.subCode==='resource.forbidden'){throw new FrostError('해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.url(playlistId));}else if(result.subCode==='resource.not_found'){throw new FrostError('해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.url(playlistId));}else if(result.subCode==='resource.prediction_failed'){throw new FrostError('재생목록이 다른 곳에서 수정됐어요,\\n\"재생목록 새로고침\" 버튼을 누르신 후 다시 시도해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.url(playlistId));}else{throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"\".concat(result.code,\" - \").concat(result.subCode,\" raised on PlayCoAPI.getPlaylistInfo\"),result.code,false,result,undefined,PlayCoAPI.url(playlistId));}});}},{key:\"deletePlaylist\",value:function deletePlaylist(playlistId){return new FrostAPI().delete(PlayCoAPI.url(playlistId),true);}},{key:\"getPlaylistItems\",value:function getPlaylistItems(playlistId){return new FrostAPI().get(PlayCoAPI.itemUrl(playlistId),true);}},{key:\"insertPlaylistItem\",value:function insertPlaylistItem(playlistId,itemUrl,hash){return new FrostAPI().post(PlayCoAPI.itemUrl(playlistId),{link:itemUrl},true,{'If-Match':hash});}},{key:\"movePlaylistItem\",value:function movePlaylistItem(playlistId,link,newIndex,hash){return new FrostAPI().patch(PlayCoAPI.itemUrl(playlistId,newIndex),{link:link},true,{'If-Match':hash});}},{key:\"deletePlaylistItem\",value:function deletePlaylistItem(playlistId,itemIndex,hash){return new FrostAPI().delete(PlayCoAPI.itemUrl(playlistId,itemIndex),true,{'If-Match':hash});}}]);return PlayCoAPI;}();","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/playco/api.ts"],"names":["FrostError","FrostAPI","Playlist","PlayCoAPI","playlistId","itemIndex","get","url","then","result","code","subCode","data","playco_playlists","map","v","i","a","undefined","itemUrl","playlistObj","playco_playlist","hash","header","payload","post","success","reason","patch","delete","link","newIndex"],"mappings":"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","sourcesContent":["import { FrostError } from \"src/common/error\";\r\nimport FrostAPI from \"src/network/api\";\r\n\r\nimport {\r\n    PlaylistListener,\r\n    PlaylistItem,\r\n    Playlist,\r\n    PlaylistConfig,\r\n} from \"./model\";\r\n\r\nexport class PlayCoAPI {\r\n    static url(playlistId?: number) { return `playco/playlists/${playlistId ?? ''}`; }\r\n    static itemUrl(playlistId: number, itemIndex?: number) {\r\n        if (!playlistId)\r\n            throw new FrostError(\r\n                '예상하지 못한 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                'itemUrl is undefined or null',\r\n                -1, false);\r\n        return `playco/playlists/${playlistId}/items/${itemIndex ?? ''}`;\r\n    }\r\n\r\n    static getAllPlaylists() {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.url(), true)\r\n            .then((result) => {\r\n                // Possible response\r\n                // - multiple_resources_found(200)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.multiple_result') {\r\n                    return result.data.playco_playlists.map((v, i, a) => new Playlist(v));\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    return [];\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getAllPlaylists`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url());\r\n                }\r\n            });\r\n    }\r\n\r\n    // get playlistHashAsync(playlistId: number) {\r\n    //     return (new FrostAPI())\r\n    //         .head\r\n    // }\r\n\r\n    static getPlaylistInfo(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.itemUrl(playlistId), true)\r\n            .then((result) => {\r\n                // Possible response\r\n                // - resource_found(200)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.result') {\r\n                    const playlistObj = new Playlist({ ...result.data.playco_playlist, hash: result.header.get('etag') });\r\n                    return playlistObj;\r\n                } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.itemUrl(playlistId));\r\n                }\r\n            });\r\n    }\r\n\r\n    static createPlaylist(payload: PlaylistConfig) {\r\n        return (new FrostAPI())\r\n            .post(PlayCoAPI.url(), payload, true)\r\n            .then(\r\n                (result) => {\r\n                    if (!result.success) {\r\n                        if (result.subCode === 'resource.unique_failed') {\r\n                            throw new FrostError(\r\n                                '계정 당 재생목록을 5개까지만 만드실 수 있어요,\\n기존의 재생목록을 지워주세요.',\r\n                                `${result.code} - ${result.subCode} raised on PlayCoAPI.createPlaylist`,\r\n                                result.code, false, result, undefined, PlayCoAPI.url());\r\n                        } else {\r\n                            throw new FrostError(\r\n                                '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                                `${result.code} - ${result.subCode} raised on PlayCoAPI.createPlaylist`,\r\n                                result.code, false, result, undefined, PlayCoAPI.url());\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                (reason: FrostError) => {\r\n                    throw reason;\r\n                }\r\n            );\r\n    }\r\n\r\n    static modifyPlaylist(playlistId: number, data: PlaylistConfig, hash: string) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.url(playlistId), data, true, { 'If-Match': hash })\r\n            .then((result) => {\r\n                // Possible response\r\n                // - resource_modified(201)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (200 <= result.code && result.code <= 399) {\r\n                    return result;\r\n                } else if (result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else if (result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else if (result.subCode === 'resource.prediction_failed') {\r\n                    throw new FrostError(\r\n                        '재생목록이 다른 곳에서 수정됐어요,\\n\"재생목록 새로고침\" 버튼을 누르신 후 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result, undefined, PlayCoAPI.url(playlistId));\r\n                }\r\n            });\r\n    }\r\n\r\n    static deletePlaylist(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.url(playlistId), true)\r\n    }\r\n\r\n    static getPlaylistItems(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.itemUrl(playlistId), true)\r\n    }\r\n\r\n    static insertPlaylistItem(playlistId: number, itemUrl: string, hash: string) {\r\n        return (new FrostAPI())\r\n            .post(PlayCoAPI.itemUrl(playlistId), { link: itemUrl }, true, { 'If-Match': hash })\r\n    }\r\n\r\n    static movePlaylistItem(playlistId: number, link: string, newIndex: number, hash: string) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.itemUrl(playlistId, newIndex), {link: link}, true, { 'If-Match': hash })\r\n    }\r\n\r\n    static deletePlaylistItem(playlistId: number, itemIndex: number, hash: string) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.itemUrl(playlistId, itemIndex), true, { 'If-Match': hash })\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}