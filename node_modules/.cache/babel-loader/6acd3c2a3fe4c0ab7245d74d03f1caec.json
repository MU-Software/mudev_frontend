{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export var YoutubeThumbnail=function YoutubeThumbnail(props){var _props$youtubeId;return/*#__PURE__*/_jsx(\"img\",{style:props.style,src:\"https://i3.ytimg.com/vi/\".concat((_props$youtubeId=props.youtubeId)!==null&&_props$youtubeId!==void 0?_props$youtubeId:'',\"/maxresdefault.jpg\"),alt:\"YouTube thumbnail image\",onLoad:function onLoad(event){// Prevent endless loop when fallback image also fails\nevent.currentTarget.onLoad=null;event.currentTarget.onload=null;if(!props.youtubeId||event.currentTarget.src.endsWith('/sddefault.jpg'))// This component is used as placeholder, or we already tried with low res image,\n// and we couldn't get a thumbnail image.\nreturn;// Youtube sends fallback image when there's no file,\n// img's onError won't triggered as there's a fallback image on a response even though it's 404,\n// so we need to detect if the received image is a fallback image.\nif(event.currentTarget.naturalHeight<=90){var _props$youtubeId2;event.currentTarget.src=\"https://i3.ytimg.com/vi/\".concat((_props$youtubeId2=props.youtubeId)!==null&&_props$youtubeId2!==void 0?_props$youtubeId2:'',\"/sddefault.jpg\");}}});};","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/common/element/util/youtubeThumbnail.tsx"],"names":["React","YoutubeThumbnail","props","style","youtubeId","event","currentTarget","onLoad","onload","src","endsWith","naturalHeight"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,2CAEA,MAAO,IAAMC,CAAAA,gBAA0B,CAAG,QAA7BA,CAAAA,gBAA6B,CAACC,KAAD,0CAGpC,YACF,KAAK,CAAEA,KAAK,CAACC,KADX,CAEF,GAAG,qDAA6BD,KAAK,CAACE,SAAnC,qDAAgD,EAAhD,sBAFD,CAGF,GAAG,CAAC,yBAHF,CAIF,MAAM,CAAE,gBAACC,KAAD,CAAW,CACjB;AACAA,KAAK,CAACC,aAAN,CAAoBC,MAApB,CAA6B,IAA7B,CACAF,KAAK,CAACC,aAAN,CAAoBE,MAApB,CAA6B,IAA7B,CACA,GAAI,CAACN,KAAK,CAACE,SAAP,EAAoBC,KAAK,CAACC,aAAN,CAAoBG,GAApB,CAAwBC,QAAxB,CAAiC,gBAAjC,CAAxB,CACE;AACA;AACA,OAEF;AACA;AACA;AACA,GAAIL,KAAK,CAACC,aAAN,CAAoBK,aAApB,EAAqC,EAAzC,CAA6C,uBAC3CN,KAAK,CAACC,aAAN,CAAoBG,GAApB,sDAAqDP,KAAK,CAACE,SAA3D,uDAAwE,EAAxE,mBACD,CACF,CAnBC,EAHoC,EAAnC","sourcesContent":["import React from 'react';\r\n\r\nexport const YoutubeThumbnail: React.FC = (props: {\r\n  youtubeId: string;\r\n  style?: React.CSSProperties;\r\n}) => <img\r\n    style={props.style}\r\n    src={`https://i3.ytimg.com/vi/${props.youtubeId ?? ''}/maxresdefault.jpg`}\r\n    alt='YouTube thumbnail image'\r\n    onLoad={(event) => {\r\n      // Prevent endless loop when fallback image also fails\r\n      event.currentTarget.onLoad = null;\r\n      event.currentTarget.onload = null;\r\n      if (!props.youtubeId || event.currentTarget.src.endsWith('/sddefault.jpg'))\r\n        // This component is used as placeholder, or we already tried with low res image,\r\n        // and we couldn't get a thumbnail image.\r\n        return;\r\n\r\n      // Youtube sends fallback image when there's no file,\r\n      // img's onError won't triggered as there's a fallback image on a response even though it's 404,\r\n      // so we need to detect if the received image is a fallback image.\r\n      if (event.currentTarget.naturalHeight <= 90) {\r\n        event.currentTarget.src = `https://i3.ytimg.com/vi/${props.youtubeId ?? ''}/sddefault.jpg`;\r\n      }\r\n    }}\r\n  />;\r\n"]},"metadata":{},"sourceType":"module"}