{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muButton.tsx\";\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\nimport './muButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nexport const PHButton = props => {\n  var _ref;\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: props.onClick,\n    style: props.smaller || props.size === 'extra-sm' ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {})\n    } : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {})\n    },\n    variant: props.variant || 'outline-primary',\n    disabled: props.disabled || false,\n    type: props.type || 'button',\n    size: (_ref = props.size === 'extra-sm' ? 'sm' : props.size) !== null && _ref !== void 0 ? _ref : 'sm',\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n_c = PHButton;\nexport const PHSpinnerButton = props => {\n  let tmpBtnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(tmpBtnChildElement) > 1) throw Error('PHSpinnerButton accepts only one element for the children.'); // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n\n  if (!(typeof tmpBtnChildElement == 'object' && tmpBtnChildElement.$$typeof === REACT_ELEMENT_TYPE)) tmpBtnChildElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tmpBtnChildElement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 26\n  }, this);\n  const btnChildElement = /*#__PURE__*/React.cloneElement(tmpBtnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      opacity: props.showSpinner ? '50%' : '100%'\n    }\n  }); // visually-hidden comes from Bootstrap.\n\n  const spinnerElement = /*#__PURE__*/React.cloneElement(props.spinner || /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 62\n  }, this), {\n    style: {\n      visibility: props.showSpinner ? 'visible' : 'hidden'\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(PHButton, {\n    disabled: props.showSpinner || false,\n    variant: props.showSpinner && props.setGrayWhenDisabled ? (props.variant || '').startsWith('outline-') ? 'outline-secondary' : 'secondary' : props.variant,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PHSpinnerButtonChildrenContainer\",\n      children: [btnChildElement, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PHSpinnerButtonSpinnerContainer\",\n        children: spinnerElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n_c2 = PHSpinnerButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PHButton\");\n$RefreshReg$(_c2, \"PHSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muButton.tsx"],"names":["React","Spinner","Button","REACT_ELEMENT_TYPE","Symbol","for","PHButton","props","onClick","style","smaller","size","margin","width","height","padding","fontSize","variant","disabled","type","children","PHSpinnerButton","tmpBtnChildElement","Children","count","Error","$$typeof","btnChildElement","cloneElement","opacity","showSpinner","spinnerElement","spinner","visibility","setGrayWhenDisabled","startsWith"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,gBAAP;;AAEA,MAAMC,kBAAkB,GAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,IAA8CD,MAAM,CAACC,GAAP,CAAW,eAAX,CAA/C,IAA+E,MAA1G;AAyBA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAA8B;AAAA;;AACpD,sBAAO,QAAC,MAAD;AACLC,IAAAA,OAAO,EAAED,KAAK,CAACC,OADV;AAELC,IAAAA,KAAK,EAAGF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACI,IAAN,KAAe,UAAjC,GACH;AACAC,MAAAA,MAAM,EAAE,OAAO,KADf;AAEAC,MAAAA,KAAK,EAAEN,KAAK,CAACM,KAFb;AAGAC,MAAAA,MAAM,EAAEP,KAAK,CAACO,MAHd;AAIAC,MAAAA,OAAO,EAAE,cAJT;AAKAC,MAAAA,QAAQ,EAAE,OAAO,KALjB;AAMA,UAAIT,KAAK,CAACE,KAAN,IAAe,EAAnB;AANA,KADG,GAQD;AACFG,MAAAA,MAAM,EAAE,OAAO,KADb;AAEFC,MAAAA,KAAK,EAAEN,KAAK,CAACM,KAFX;AAGFC,MAAAA,MAAM,EAAEP,KAAK,CAACO,MAHZ;AAIF,UAAIP,KAAK,CAACE,KAAN,IAAe,EAAnB;AAJE,KAVD;AAgBLQ,IAAAA,OAAO,EAAEV,KAAK,CAACU,OAAN,IAAiB,iBAhBrB;AAiBLC,IAAAA,QAAQ,EAAEX,KAAK,CAACW,QAAN,IAAkB,KAjBvB;AAkBLC,IAAAA,IAAI,EAAEZ,KAAK,CAACY,IAAN,IAAc,QAlBf;AAmBLR,IAAAA,IAAI,UAAGJ,KAAK,CAACI,IAAN,KAAe,UAAf,GAA4B,IAA5B,GAAmCJ,KAAK,CAACI,IAA5C,uCAAqD,IAnBpD;AAAA,cAqBJJ,KAAK,CAACa;AArBF;AAAA;AAAA;AAAA;AAAA,UAAP;AAuBD,CAxBM;KAAMd,Q;AA0Bb,OAAO,MAAMe,eAAe,GAAId,KAAD,IAAqC;AAClE,MAAIe,kBAAkB,GAAGf,KAAK,CAACa,QAAN,IAAkB,QAA3C;AACA,MAAIpB,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBF,kBAArB,IAA2C,CAA/C,EACE,MAAMG,KAAK,CAAC,4DAAD,CAAX,CAHgE,CAKlE;;AACA,MAAI,EAAE,OAAQH,kBAAR,IAA+B,QAA/B,IAA4CA,kBAAkB,CAACI,QAAnB,KAAgCvB,kBAA9E,CAAJ,EACEmB,kBAAkB,gBAAG;AAAA,cAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,UAArB;AAEF,QAAMK,eAAe,gBAAG3B,KAAK,CAAC4B,YAAN,CAAmBN,kBAAnB,EAAuC;AAC7Db,IAAAA,KAAK,EAAE;AACLI,MAAAA,KAAK,EAAE,aADF;AAELC,MAAAA,MAAM,EAAE,aAFH;AAGLe,MAAAA,OAAO,EAAEtB,KAAK,CAACuB,WAAN,GAAoB,KAApB,GAA4B;AAHhC;AADsD,GAAvC,CAAxB,CATkE,CAgBlE;;AACA,QAAMC,cAAc,gBAAG/B,KAAK,CAAC4B,YAAN,CAAmBrB,KAAK,CAACyB,OAAN,iBAAiB,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAAA,2BACzD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADyD;AAAA;AAAA;AAAA;AAAA,UAApC,EAEX;AAAEvB,IAAAA,KAAK,EAAE;AAAEwB,MAAAA,UAAU,EAAE1B,KAAK,CAACuB,WAAN,GAAoB,SAApB,GAAgC;AAA9C;AAAT,GAFW,CAAvB;AAIA,sBAAO,QAAC,QAAD;AACLZ,IAAAA,QAAQ,EAAEX,KAAK,CAACuB,WAAN,IAAqB,KAD1B;AAELb,IAAAA,OAAO,EAAGV,KAAK,CAACuB,WAAN,IAAqBvB,KAAK,CAAC2B,mBAA5B,GACL,CAAC3B,KAAK,CAACU,OAAN,IAAiB,EAAlB,EAAsBkB,UAAtB,CAAiC,UAAjC,IACE,mBADF,GAEE,WAHG,GAIL5B,KAAK,CAACU,OANL;AAAA,2BAQL;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA,iBACGU,eADH,eAEE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA,kBACGI;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AARK;AAAA;AAAA;AAAA;AAAA,UAAP;AAeD,CApCM;MAAMV,e","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\ninterface PHButtonPropTypes {\n  // Some props from PropTypes\n  width?: number | string,\n  height?: number | string,\n  style?: React.CSSProperties,\n  onClick?: React.MouseEventHandler<HTMLInputElement>,\n  children: React.ReactNode,\n\n  // PHButton props\n  variant?: string;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n  size?: 'sm' | 'lg';\n  smaller?: boolean;\n}\n\ninterface PHSpinnerButtonPropTypes extends PHButtonPropTypes {\n  children: React.ReactNode;\n  showSpinner?: boolean;\n  spinner?: React.ReactNode;\n  setGrayWhenDisabled?: boolean;\n}\n\nexport const PHButton = (props: PHButtonPropTypes) => {\n  return <Button {...{\n    onClick: props.onClick,\n    style: (props.smaller || props.size === 'extra-sm')\n      ? {\n        margin: 0.25 + 'rem',\n        width: props.width,\n        height: props.height,\n        padding: '0rem 0.25rem',\n        fontSize: 0.75 + 'rem',\n        ...(props.style || {}),\n      } : {\n        margin: 0.25 + 'rem',\n        width: props.width,\n        height: props.height,\n        ...(props.style || {}),\n      },\n    variant: props.variant || 'outline-primary',\n    disabled: props.disabled || false,\n    type: props.type || 'button',\n    size: (props.size === 'extra-sm' ? 'sm' : props.size) ?? 'sm',\n  }}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton = (props: PHSpinnerButtonPropTypes) => {\n  let tmpBtnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(tmpBtnChildElement) > 1)\n    throw Error('PHSpinnerButton accepts only one element for the children.');\n\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n  if (!(typeof (tmpBtnChildElement) == 'object' && (tmpBtnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n    tmpBtnChildElement = <div>{tmpBtnChildElement}</div>;\n\n  const btnChildElement = React.cloneElement(tmpBtnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      opacity: props.showSpinner ? '50%' : '100%',\n    }\n  });\n  // visually-hidden comes from Bootstrap.\n  const spinnerElement = React.cloneElement(props.spinner || <Spinner animation=\"border\" role=\"status\">\n    <span className=\"visually-hidden\">Loading...</span>\n  </Spinner>, { style: { visibility: props.showSpinner ? 'visible' : 'hidden', } });\n\n  return <PHButton {...{\n    disabled: props.showSpinner || false,\n    variant: (props.showSpinner && props.setGrayWhenDisabled)\n      ? (props.variant || '').startsWith('outline-')\n        ? 'outline-secondary'\n        : 'secondary'\n      : props.variant,\n  }}>\n    <div className='PHSpinnerButtonChildrenContainer'>\n      {btnChildElement}\n      <div className='PHSpinnerButtonSpinnerContainer'>\n        {spinnerElement}\n      </div>\n    </div>\n  </PHButton>\n}\n"]},"metadata":{},"sourceType":"module"}