{"ast":null,"code":"import { Dispatch } from 'redux';\nimport { FrostError } from 'src/common/error';\nimport FrostAPI from '../../../network/api';\nimport { ACCOUNT_FETCHING, SIGNED_IN, SIGNED_OUT, FORCE_SET_ACCOUNTINFO } from './action';\nimport { AccountInfo } from './model';\nexport const removeFrostErrorFromStateActionCreator = () => (dispatch, getState) => {\n  console.log('removeFrostErrorFromStateActionCreator');\n  console.log(getState());\n  dispatch({\n    type: FORCE_SET_ACCOUNTINFO,\n    accountInfo: new AccountInfo({ ...(getState().accountReducer || {}),\n      frostErrorObj: undefined\n    })\n  });\n};\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  return new FrostAPI().signIn(idOrEmail, password).then(result => dispatch({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  }), reason => dispatch({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  }));\n};\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().signUp(id, email, password, nick).then(result => dispatch({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  }), reason => dispatch({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  }));\n};\nexport const signOutActionCreatorAsync = () => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().signOut().finally(() => dispatch({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false\n    })\n  }));\n};\nexport const refreshAccessTokenActionCreatorAsync = () => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().refreshAuthentications().then(result => dispatch({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  })).catch(reason => dispatch({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  }));\n};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/redux/modules/account/action_creator.js"],"names":["Dispatch","FrostError","FrostAPI","ACCOUNT_FETCHING","SIGNED_IN","SIGNED_OUT","FORCE_SET_ACCOUNTINFO","AccountInfo","removeFrostErrorFromStateActionCreator","dispatch","getState","console","log","type","accountInfo","accountReducer","frostErrorObj","undefined","signInActionCreatorAsync","idOrEmail","password","signIn","then","result","isSignedIn","uuid","userData","id","nick","nickname","email","reason","signUpActionCreatorAsync","signUp","signOutActionCreatorAsync","signOut","finally","refreshAccessTokenActionCreatorAsync","refreshAuthentications","catch"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SACIC,gBADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIC,qBAJJ,QAKO,UALP;AAMA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,MAAMC,sCAAsC,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChFC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,EAApB;AACAD,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEP,qBADD;AAELQ,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB,EACzB,IAAIG,QAAQ,GAAGK,cAAX,IAA6B,EAAjC,CADyB;AAEzBC,MAAAA,aAAa,EAAEC;AAFU,KAAhB;AAFR,GAAD,CAAR;AAOH,CAVM;AAYP,OAAO,MAAMC,wBAAwB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB,MAAMX,QAAN,IAAkB;AAC/EA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACA,SAAQ,IAAID,QAAJ,EAAD,CACFmB,MADE,CACKF,SADL,EACgBC,QADhB,EAEFE,IAFE,CAGEC,MAAD,IAAsBd,QAAQ,CAAC;AAC3BI,IAAAA,IAAI,EAAET,SADqB;AAE3BU,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,IADa;AAEzBC,MAAAA,IAAI,EAAEF,MAAM,CAACG,QAAP,CAAgBD,IAFG;AAGzBE,MAAAA,EAAE,EAAEJ,MAAM,CAACG,QAAP,CAAgBC,EAHK;AAIzBC,MAAAA,IAAI,EAAEL,MAAM,CAACG,QAAP,CAAgBG,QAJG;AAKzBC,MAAAA,KAAK,EAAEP,MAAM,CAACG,QAAP,CAAgBI;AALE,KAAhB;AAFc,GAAD,CAH/B,EAaEC,MAAD,IAAwBtB,QAAQ,CAAC;AAC7BI,IAAAA,IAAI,EAAER,UADuB;AAE7BS,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,KADa;AAEzBR,MAAAA,aAAa,EAAEe;AAFU,KAAhB;AAFgB,GAAD,CAbjC,CAAP;AAqBH,CAvBM;AAyBP,OAAO,MAAMC,wBAAwB,GAAG,CAACL,EAAD,EAAKG,KAAL,EAAYF,IAAZ,EAAkBR,QAAlB,KAA+B,MAAMX,QAAN,IAAkB;AACrFA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACC,MAAID,QAAJ,EAAD,CACK+B,MADL,CACYN,EADZ,EACgBG,KADhB,EACuBV,QADvB,EACiCQ,IADjC,EAEKN,IAFL,CAGSC,MAAD,IAAsBd,QAAQ,CAAC;AAC3BI,IAAAA,IAAI,EAAET,SADqB;AAE3BU,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,IADa;AAEzBC,MAAAA,IAAI,EAAEF,MAAM,CAACG,QAAP,CAAgBD,IAFG;AAGzBE,MAAAA,EAAE,EAAEJ,MAAM,CAACG,QAAP,CAAgBC,EAHK;AAIzBC,MAAAA,IAAI,EAAEL,MAAM,CAACG,QAAP,CAAgBG,QAJG;AAKzBC,MAAAA,KAAK,EAAEP,MAAM,CAACG,QAAP,CAAgBI;AALE,KAAhB;AAFc,GAAD,CAHtC,EAaSC,MAAD,IAAwBtB,QAAQ,CAAC;AAC7BI,IAAAA,IAAI,EAAER,UADuB;AAE7BS,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,KADa;AAEzBR,MAAAA,aAAa,EAAEe;AAFU,KAAhB;AAFgB,GAAD,CAbxC;AAqBH,CAvBM;AAyBP,OAAO,MAAMG,yBAAyB,GAAG,MAAM,MAAMzB,QAAN,IAAkB;AAC7DA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACC,MAAID,QAAJ,EAAD,CACKiC,OADL,GAEKC,OAFL,CAGQ,MAAM3B,QAAQ,CAAC;AACXI,IAAAA,IAAI,EAAER,UADK;AAEXS,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AAAEiB,MAAAA,UAAU,EAAE;AAAd,KAAhB;AAFF,GAAD,CAHtB;AAQH,CAVM;AAYP,OAAO,MAAMa,oCAAoC,GAAG,MAAM,MAAM5B,QAAN,IAAkB;AACxEA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACC,MAAID,QAAJ,EAAD,CACKoC,sBADL,GAEKhB,IAFL,CAEWC,MAAD,IAAsBd,QAAQ,CAAC;AACjCI,IAAAA,IAAI,EAAET,SAD2B;AAEjCU,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,IADa;AAEzBC,MAAAA,IAAI,EAAEF,MAAM,CAACG,QAAP,CAAgBD,IAFG;AAGzBE,MAAAA,EAAE,EAAEJ,MAAM,CAACG,QAAP,CAAgBC,EAHK;AAIzBC,MAAAA,IAAI,EAAEL,MAAM,CAACG,QAAP,CAAgBG,QAJG;AAKzBC,MAAAA,KAAK,EAAEP,MAAM,CAACG,QAAP,CAAgBI;AALE,KAAhB;AAFoB,GAAD,CAFxC,EAYKS,KAZL,CAYYR,MAAD,IAAwBtB,QAAQ,CAAC;AACpCI,IAAAA,IAAI,EAAER,UAD8B;AAEpCS,IAAAA,WAAW,EAAE,IAAIP,WAAJ,CAAgB;AACzBiB,MAAAA,UAAU,EAAE,KADa;AAEzBR,MAAAA,aAAa,EAAEe;AAFU,KAAhB;AAFuB,GAAD,CAZ3C;AAmBH,CArBM","sourcesContent":["import { Dispatch } from 'redux';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from '../../../network/api';\r\n\r\nimport {\r\n    ACCOUNT_FETCHING,\r\n    SIGNED_IN,\r\n    SIGNED_OUT,\r\n    FORCE_SET_ACCOUNTINFO,\r\n} from './action';\r\nimport { AccountInfo } from './model';\r\n\r\nexport const removeFrostErrorFromStateActionCreator = () => (dispatch, getState) => {\r\n    console.log('removeFrostErrorFromStateActionCreator');\r\n    console.log(getState());\r\n    dispatch({\r\n        type: FORCE_SET_ACCOUNTINFO,\r\n        accountInfo: new AccountInfo({\r\n            ...(getState().accountReducer || {}),\r\n            frostErrorObj: undefined,\r\n        }),\r\n    });\r\n}\r\n\r\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    return (new FrostAPI())\r\n        .signIn(idOrEmail, password)\r\n        .then(\r\n            (result: FrostAPI) => dispatch({\r\n                type: SIGNED_IN,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: true,\r\n                    uuid: result.userData.uuid,\r\n                    id: result.userData.id,\r\n                    nick: result.userData.nickname,\r\n                    email: result.userData.email,\r\n                }),\r\n            }),\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n}\r\n\r\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signUp(id, email, password, nick)\r\n        .then(\r\n            (result: FrostAPI) => dispatch({\r\n                type: SIGNED_IN,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: true,\r\n                    uuid: result.userData.uuid,\r\n                    id: result.userData.id,\r\n                    nick: result.userData.nickname,\r\n                    email: result.userData.email,\r\n                }),\r\n            }),\r\n            (reason: FrostError) => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({\r\n                    isSignedIn: false,\r\n                    frostErrorObj: reason,\r\n                }),\r\n            })\r\n        );\r\n}\r\n\r\nexport const signOutActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .signOut()\r\n        .finally(\r\n            () => dispatch({\r\n                type: SIGNED_OUT,\r\n                accountInfo: new AccountInfo({ isSignedIn: false }),\r\n            })\r\n        );\r\n}\r\n\r\nexport const refreshAccessTokenActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI())\r\n        .refreshAuthentications()\r\n        .then((result: FrostAPI) => dispatch({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n            }),\r\n        }))\r\n        .catch((reason: FrostError) => dispatch({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}