{"ast":null,"code":"// (c) MUsoftware 2022\n'use strict';import _classCallCheck from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import{FrostError}from\"../common/error\";export var APIResult=function APIResult(response){var _response$body$succes,_response$body$code,_response$body,_response$body$sub_co,_response$body2,_response$body$messag,_response$body3,_response$body$data,_response$body4,_response$header;_classCallCheck(this,APIResult);this.success=false;this.code=-1;this.subCode='';this.message='';this.header={};this.data={};if(!response)throw new FrostError('서버에서 받은 응답을 이해하지 못했어요,\\n잠시 후에 다시 시도해주세요.','서버에서 받은 데이터를 파싱하지 못했습니다.',-1);this.success=(_response$body$succes=response.body.success)!==null&&_response$body$succes!==void 0?_response$body$succes:false;this.code=parseInt((_response$body$code=response===null||response===void 0?void 0:(_response$body=response.body)===null||_response$body===void 0?void 0:_response$body.code)!==null&&_response$body$code!==void 0?_response$body$code:-1,10);this.subCode=(_response$body$sub_co=response===null||response===void 0?void 0:(_response$body2=response.body)===null||_response$body2===void 0?void 0:_response$body2.sub_code)!==null&&_response$body$sub_co!==void 0?_response$body$sub_co:'';this.message=(_response$body$messag=response===null||response===void 0?void 0:(_response$body3=response.body)===null||_response$body3===void 0?void 0:_response$body3.message)!==null&&_response$body$messag!==void 0?_response$body$messag:'';this.data=(_response$body$data=response===null||response===void 0?void 0:(_response$body4=response.body)===null||_response$body4===void 0?void 0:_response$body4.data)!==null&&_response$body$data!==void 0?_response$body$data:{};this.header=(_response$header=response===null||response===void 0?void 0:response.header)!==null&&_response$header!==void 0?_response$header:{};if(!this.success){if(this.subCode=='request.body.invalid'||this.subCode=='request.body.empty'){throw new FrostError('알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.','클라이언트가 요청할 데이터를 제대로 보내지 않았어요.',this.code);}else if(this.subCode.startsWith('request.header')){throw new FrostError('알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.','클라이언트가 요청의 말머리를 제대로 보내지 않았어요.',this.code);}else if(this.subCode.startsWith('backend')){throw new FrostError('서버에 알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.','서버가 영 좋지 않은 상황이에요.',this.code);}else if(this.subCode.startsWith('http')){throw new FrostError('서버에서 무엇을 할지 모르는 요청이에요...',this.subCode,this.code);}else if(this.subCode.startsWith('refresh_token')){throw new FrostError('로그인 정보가 올바르지 않아요,\\n죄송하지만 다시 로그인 해주세요.',\"\\uC11C\\uBC84\\uAC00 \".concat(this.subCode,\"\\uB97C \\uBC18\\uD658\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),this.code);}else if(this.subCode.startsWith('access_token')){// Maybe access token's time is not expired, but it's revoked?\n// We need to retry this request after force token refresh.\nthrow new FrostError('로그인 정보가 올바르지 않아요,\\n죄송하지만 다시 로그인 해주세요.',\"AccessToken\\uC774 \\uC62C\\uBC14\\uB974\\uC9C0 \\uC54A\\uACE0, \\uC11C\\uBC84\\uAC00 \".concat(this.subCode,\"\\uB97C \\uBC18\\uD658\\uD588\\uC2B5\\uB2C8\\uB2E4.\"),this.code,true);}else if(this.subCode==='user.not_signed_in'){throw new FrostError('로그인이 되어 있지 않아요,\\n로그인 해주세요.','서버가 \"user.not_signed_in\"를 반환했습니다.',this.code);}else{return this;// throw new FrostError(\n//   '서버와의 통신에서 문제가 발생했어요,\\n잠시 후 다시 시도해주세요.',\n//   `서버가 \"${this.subCode === '' ? \"sub_code 없음\" : this.subCode}\"를 반환했습니다.`, this.code);\n}}};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/network/api_response.ts"],"names":["FrostError","APIResult","response","success","code","subCode","message","header","data","body","parseInt","sub_code","startsWith"],"mappings":"AAAA;AACA,a,4MAEA,OAASA,UAAT,KAA2B,iBAA3B,CAEA,UAAaC,CAAAA,SAAb,CAQE,mBAAYC,QAAZ,CAA0F,oOAP1FC,OAO0F,CAPvE,KAOuE,MAN1FC,IAM0F,CAN3E,CAAC,CAM0E,MAL1FC,OAK0F,CALxE,EAKwE,MAJ1FC,OAI0F,CAJxE,EAIwE,MAH1FC,MAG0F,CAHxD,EAGwD,MAF1FC,IAE0F,CAF1D,EAE0D,CACxF,GAAI,CAACN,QAAL,CACE,KAAM,IAAIF,CAAAA,UAAJ,CACJ,0CADI,CAEJ,0BAFI,CAEwB,CAAC,CAFzB,CAAN,CAIF,KAAKG,OAAL,wBAAeD,QAAQ,CAACO,IAAT,CAAcN,OAA7B,+DAAwC,KAAxC,CACA,KAAKC,IAAL,CAAYM,QAAQ,sBAAER,QAAF,SAAEA,QAAF,iCAAEA,QAAQ,CAAEO,IAAZ,yCAAE,eAAgBL,IAAlB,2DAA0B,CAAC,CAA3B,CAA+B,EAA/B,CAApB,CACA,KAAKC,OAAL,wBAAeH,QAAf,SAAeA,QAAf,kCAAeA,QAAQ,CAAEO,IAAzB,0CAAe,gBAAgBE,QAA/B,+DAA2C,EAA3C,CACA,KAAKL,OAAL,wBAAeJ,QAAf,SAAeA,QAAf,kCAAeA,QAAQ,CAAEO,IAAzB,0CAAe,gBAAgBH,OAA/B,+DAA0C,EAA1C,CACA,KAAKE,IAAL,sBAAYN,QAAZ,SAAYA,QAAZ,kCAAYA,QAAQ,CAAEO,IAAtB,0CAAY,gBAAgBD,IAA5B,2DAAoC,EAApC,CACA,KAAKD,MAAL,mBAAcL,QAAd,SAAcA,QAAd,iBAAcA,QAAQ,CAAEK,MAAxB,qDAAkC,EAAlC,CAEA,GAAI,CAAC,KAAKJ,OAAV,CAAmB,CACjB,GAAI,KAAKE,OAAL,EAAgB,sBAAhB,EAA0C,KAAKA,OAAL,EAAgB,oBAA9D,CAAoF,CAClF,KAAM,IAAIL,CAAAA,UAAJ,CACJ,qCADI,CAEJ,+BAFI,CAE6B,KAAKI,IAFlC,CAAN,CAGD,CAJD,IAIO,IAAI,KAAKC,OAAL,CAAaO,UAAb,CAAwB,gBAAxB,CAAJ,CAA+C,CACpD,KAAM,IAAIZ,CAAAA,UAAJ,CACJ,qCADI,CAEJ,+BAFI,CAE6B,KAAKI,IAFlC,CAAN,CAGD,CAJM,IAIA,IAAI,KAAKC,OAAL,CAAaO,UAAb,CAAwB,SAAxB,CAAJ,CAAwC,CAC7C,KAAM,IAAIZ,CAAAA,UAAJ,CACJ,yCADI,CAEJ,oBAFI,CAEkB,KAAKI,IAFvB,CAAN,CAGD,CAJM,IAIA,IAAI,KAAKC,OAAL,CAAaO,UAAb,CAAwB,MAAxB,CAAJ,CAAqC,CAC1C,KAAM,IAAIZ,CAAAA,UAAJ,CACJ,0BADI,CAEJ,KAAKK,OAFD,CAEU,KAAKD,IAFf,CAAN,CAGD,CAJM,IAIA,IAAI,KAAKC,OAAL,CAAaO,UAAb,CAAwB,eAAxB,CAAJ,CAA8C,CACnD,KAAM,IAAIZ,CAAAA,UAAJ,CACJ,uCADI,8BAEG,KAAKK,OAFR,iDAE4B,KAAKD,IAFjC,CAAN,CAGD,CAJM,IAIA,IAAI,KAAKC,OAAL,CAAaO,UAAb,CAAwB,cAAxB,CAAJ,CAA6C,CAClD;AACA;AACA,KAAM,IAAIZ,CAAAA,UAAJ,CACJ,uCADI,uFAEyB,KAAKK,OAF9B,iDAGJ,KAAKD,IAHD,CAGO,IAHP,CAAN,CAID,CAPM,IAOA,IAAI,KAAKC,OAAL,GAAiB,oBAArB,CAA2C,CAChD,KAAM,IAAIL,CAAAA,UAAJ,CACJ,4BADI,CAEJ,mCAFI,CAEiC,KAAKI,IAFtC,CAAN,CAGD,CAJM,IAIA,CACL,MAAO,KAAP,CACA;AACA;AACA;AACD,CACF,CACF,CA5DH","sourcesContent":["// (c) MUsoftware 2022\r\n'use strict';\r\n\r\nimport { FrostError } from \"../common/error\";\r\n\r\nexport class APIResult {\r\n  success: boolean = false;\r\n  code: number = -1;\r\n  subCode: string = '';\r\n  message: string = '';\r\n  header: Record<string, unknown> = {};\r\n  data: Record<string, unknown> = {};\r\n\r\n  constructor(response: { header: Record<string, unknown>, body: Record<string, unknown> }) {\r\n    if (!response)\r\n      throw new FrostError(\r\n        '서버에서 받은 응답을 이해하지 못했어요,\\n잠시 후에 다시 시도해주세요.',\r\n        '서버에서 받은 데이터를 파싱하지 못했습니다.', -1);\r\n\r\n    this.success = response.body.success ?? false;\r\n    this.code = parseInt((response?.body?.code ?? -1), 10);\r\n    this.subCode = response?.body?.sub_code ?? '';\r\n    this.message = response?.body?.message ?? '';\r\n    this.data = response?.body?.data ?? {};\r\n    this.header = response?.header ?? {};\r\n\r\n    if (!this.success) {\r\n      if (this.subCode == 'request.body.invalid' || this.subCode == 'request.body.empty') {\r\n        throw new FrostError(\r\n          '알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.',\r\n          '클라이언트가 요청할 데이터를 제대로 보내지 않았어요.', this.code);\r\n      } else if (this.subCode.startsWith('request.header')) {\r\n        throw new FrostError(\r\n          '알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.',\r\n          '클라이언트가 요청의 말머리를 제대로 보내지 않았어요.', this.code);\r\n      } else if (this.subCode.startsWith('backend')) {\r\n        throw new FrostError(\r\n          '서버에 알 수 없는 문제가 발생했어요,\\n잠시 후에 다시 시도해주세요.',\r\n          '서버가 영 좋지 않은 상황이에요.', this.code);\r\n      } else if (this.subCode.startsWith('http')) {\r\n        throw new FrostError(\r\n          '서버에서 무엇을 할지 모르는 요청이에요...',\r\n          this.subCode, this.code);\r\n      } else if (this.subCode.startsWith('refresh_token')) {\r\n        throw new FrostError(\r\n          '로그인 정보가 올바르지 않아요,\\n죄송하지만 다시 로그인 해주세요.',\r\n          `서버가 ${this.subCode}를 반환했습니다.`, this.code);\r\n      } else if (this.subCode.startsWith('access_token')) {\r\n        // Maybe access token's time is not expired, but it's revoked?\r\n        // We need to retry this request after force token refresh.\r\n        throw new FrostError(\r\n          '로그인 정보가 올바르지 않아요,\\n죄송하지만 다시 로그인 해주세요.',\r\n          `AccessToken이 올바르지 않고, 서버가 ${this.subCode}를 반환했습니다.`,\r\n          this.code, true);\r\n      } else if (this.subCode === 'user.not_signed_in') {\r\n        throw new FrostError(\r\n          '로그인이 되어 있지 않아요,\\n로그인 해주세요.',\r\n          '서버가 \"user.not_signed_in\"를 반환했습니다.', this.code);\r\n      } else {\r\n        return this;\r\n        // throw new FrostError(\r\n        //   '서버와의 통신에서 문제가 발생했어요,\\n잠시 후 다시 시도해주세요.',\r\n        //   `서버가 \"${this.subCode === '' ? \"sub_code 없음\" : this.subCode}\"를 반환했습니다.`, this.code);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}