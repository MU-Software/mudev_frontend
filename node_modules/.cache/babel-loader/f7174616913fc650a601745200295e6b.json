{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\element\\\\CustomSpinnerButton.jsx\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { PHButton } from 'src/ui/common/element/muButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CustomSpinnerButton = inProps => {\n  // TODO: MAYBE WE SHOULD NOT COPY PROPS LIKE THIS.\n  let props = Object.assign({}, inProps, {}); // When props.showSpinner is true, we disable button and show spinner\n\n  let shouldSpinnerShow = props.showSpinner || false;\n  let btnChildren = props.children || '\\u00A0';\n  if (React.Children.count(btnChildren) > 1) throw Error('CustomSpinnerButton accepts only one element for the children.');\n  console.log(typeof btnChildren);\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n\n    if (props.setGrayWhenDisabled) {\n      props.variant = 'secondary';\n    }\n\n    btnChildren;\n  }\n\n  return /*#__PURE__*/_jsxDEV(PHButton, { ...props,\n    children: btnChildren\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_c = CustomSpinnerButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/element/CustomSpinnerButton.jsx"],"names":["React","Button","Spinner","PHButton","CustomSpinnerButton","inProps","props","Object","assign","shouldSpinnerShow","showSpinner","btnChildren","children","Children","count","Error","console","log","disabled","setGrayWhenDisabled","variant"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,SAASC,QAAT,QAAyB,gCAAzB;;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AAC9C;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,EAA2B,EAA3B,CAAZ,CAF8C,CAI9C;;AACA,MAAII,iBAAiB,GAAGH,KAAK,CAACI,WAAN,IAAqB,KAA7C;AAEA,MAAIC,WAAW,GAAGL,KAAK,CAACM,QAAN,IAAkB,QAApC;AACA,MAAIZ,KAAK,CAACa,QAAN,CAAeC,KAAf,CAAqBH,WAArB,IAAoC,CAAxC,EACE,MAAMI,KAAK,CAAC,gEAAD,CAAX;AACFC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAQN,WAApB;;AAGA,MAAIF,iBAAJ,EAAuB;AACrBH,IAAAA,KAAK,CAACY,QAAN,GAAiB,IAAjB;;AACA,QAAIZ,KAAK,CAACa,mBAAV,EAA+B;AAAEb,MAAAA,KAAK,CAACc,OAAN,GAAgB,WAAhB;AAA8B;;AAE/DT,IAAAA,WAAW;AACZ;;AAGD,sBAAO,QAAC,QAAD,OAAcL,KAAd;AAAA,cACJK;AADI;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD,CAxBM;KAAMP,mB","sourcesContent":["import React from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { PHButton } from 'src/ui/common/element/muButton';\r\n\r\nexport const CustomSpinnerButton = (inProps) => {\r\n  // TODO: MAYBE WE SHOULD NOT COPY PROPS LIKE THIS.\r\n  let props = Object.assign({}, inProps, {});\r\n\r\n  // When props.showSpinner is true, we disable button and show spinner\r\n  let shouldSpinnerShow = props.showSpinner || false;\r\n\r\n  let btnChildren = props.children || '\\u00A0';\r\n  if (React.Children.count(btnChildren) > 1)\r\n    throw Error('CustomSpinnerButton accepts only one element for the children.');\r\n  console.log(typeof (btnChildren));\r\n\r\n\r\n  if (shouldSpinnerShow) {\r\n    props.disabled = true;\r\n    if (props.setGrayWhenDisabled) { props.variant = 'secondary'; }\r\n\r\n    btnChildren;\r\n  }\r\n\r\n\r\n  return <PHButton {...props}>\r\n    {btnChildren}\r\n  </PHButton>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}