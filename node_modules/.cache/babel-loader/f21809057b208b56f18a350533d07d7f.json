{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\playco\\\\element\\\\playlistCreateModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal } from \"react-bootstrap\";\nimport Form from 'react-bootstrap/Form';\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton'; // import {\n//   ListRowLongTextType,\n//   L,\n//   ListRowInputType,\n//   ListRowButtonType,\n//   ListRow\n// } from 'src/ui/common/element/muListRow';\n\nimport { ListRowLongTextType, L, ListRowInputType, ListRowButtonType, ListRow } from 'src/ui/common/element/muListRowTs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaylistCreateModal = props => {\n  _s();\n\n  const [playlistCreateModalState, setPlaylistCreateModalState] = useState({\n    isProcessing: false,\n    nameTextFieldValue: '',\n    nameNotUsableReason: '',\n    playlistCreationFailedReason: ''\n  });\n\n  const closeModalFunc = () => props.setModalShowState(false);\n\n  const onInputChange = valueName => e => {\n    if (e.target.type === 'reset') {// TODO: RESET ALL FORM DATA\n    }\n\n    if (valueName) {\n      setDemoData({ ...playlistCreateModalState,\n        [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    keyboard: false,\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC758 \\uC774\\uB984\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC0C8\\uB85C \\uB9CC\\uB4DC\\uC2E4 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC758 \\uC774\\uB984\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694\",\n            disabled: playlistCreateModalState.isProcessing,\n            value: playlistCreateModalState.nameTextFieldValue,\n            onChange: event => setPlaylistCreateModalState({ ...playlistCreateModalState,\n              nameTextFieldValue: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: playlistCreateModalState.nameNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ListRow, {\n          label: \"\\uC131\\uD568\",\n          children: ListRowInputType.n({\n            name: 'postSender',\n            type: 'text',\n            onChange: onInputChange,\n            state: demoData,\n            min: 5,\n            max: 15,\n            step: 2\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: playlistCreateModalState.playlistCreationFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"secondary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: closeModalFunc,\n        showSpinner: playlistCreateModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        } // onClick={onPlaylistCreateFunc}\n        ,\n        showSpinner: playlistCreateModalState.isProcessing,\n        children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PlaylistCreateModal, \"ImOtbwIaSGv88Q6fMvw3KXd9lFY=\");\n\n_c = PlaylistCreateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistCreateModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/element/playlistCreateModal.jsx"],"names":["React","useState","Modal","Form","PHFormText","PHSpinnerButton","ListRowLongTextType","L","ListRowInputType","ListRowButtonType","ListRow","PlaylistCreateModal","props","playlistCreateModalState","setPlaylistCreateModalState","isProcessing","nameTextFieldValue","nameNotUsableReason","playlistCreationFailedReason","closeModalFunc","setModalShowState","onInputChange","valueName","e","target","type","setDemoData","checked","value","modalShowState","margin","event","n","name","onChange","state","demoData","min","max","step","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACEC,mBADF,EAEEC,CAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAKEC,OALF,QAMO,mCANP;;AAcA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAyC;AAAA;;AAC1E,QAAM,CAACC,wBAAD,EAA2BC,2BAA3B,IAA0Db,QAAQ,CAAC;AACvEc,IAAAA,YAAY,EAAE,KADyD;AAGvEC,IAAAA,kBAAkB,EAAE,EAHmD;AAIvEC,IAAAA,mBAAmB,EAAE,EAJkD;AAMvEC,IAAAA,4BAA4B,EAAE;AANyC,GAAD,CAAxE;;AAQA,QAAMC,cAAc,GAAG,MAAMP,KAAK,CAACQ,iBAAN,CAAwB,KAAxB,CAA7B;;AACA,QAAMC,aAAa,GAAIC,SAAD,IAAgBC,CAAD,IAAO;AAC1C,QAAIA,CAAC,CAACC,MAAF,CAASC,IAAT,KAAkB,OAAtB,EAA+B,CAC7B;AACD;;AAAC,QAAIH,SAAJ,EAAe;AACfI,MAAAA,WAAW,CAAC,EACV,GAAGb,wBADO;AAEV,SAACS,SAAD,GAAcC,CAAC,CAACC,MAAF,CAASC,IAAT,KAAkB,UAAnB,GAAiCF,CAAC,CAACC,MAAF,CAASG,OAA1C,GAAoDJ,CAAC,CAACC,MAAF,CAASI;AAFhE,OAAD,CAAX;AAID;AACF,GATD;;AAWA,sBAAO,QAAC,KAAD;AACL,IAAA,IAAI,EAAEhB,KAAK,CAACiB,cADP;AAEL,IAAA,MAAM,EAAEV,cAFH;AAGL,IAAA,QAAQ,EAAC,QAHJ;AAIL,IAAA,QAAQ,EAAE,KAJL;AAKL,uBAAgB,+BALX;AAML,IAAA,QAAQ,MANH;AAAA,4BAOL,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA,6BACE,QAAC,KAAD,CAAO,KAAP;AAAA,+BAAa;AAAI,UAAA,KAAK,EAAE;AAAEW,YAAAA,MAAM,EAAE;AAAV,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPK,eAUL,QAAC,KAAD,CAAO,IAAP;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,kHAFd;AAGE,YAAA,QAAQ,EAAEjB,wBAAwB,CAACE,YAHrC;AAIE,YAAA,KAAK,EAAEF,wBAAwB,CAACG,kBAJlC;AAKE,YAAA,QAAQ,EACLe,KAAD,IAAWjB,2BAA2B,CAAC,EACrC,GAAGD,wBADkC;AAErCG,cAAAA,kBAAkB,EAAEe,KAAK,CAACP,MAAN,CAAaI;AAFI,aAAD;AAN1C;AAAA;AAAA;AAAA;AAAA,kBAFF,eAaE,QAAC,UAAD;AAAA,sBAAaf,wBAAwB,CAACI;AAAtC;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE,QAAC,OAAD;AAAS,UAAA,KAAK,EAAC,cAAf;AAAA,oBACGT,gBAAgB,CAACwB,CAAjB,CAAmB;AAAEC,YAAAA,IAAI,EAAE,YAAR;AAAsBR,YAAAA,IAAI,EAAE,MAA5B;AAAoCS,YAAAA,QAAQ,EAAEb,aAA9C;AAA6Dc,YAAAA,KAAK,EAAEC,QAApE;AAA8EC,YAAAA,GAAG,EAAE,CAAnF;AAAsFC,YAAAA,GAAG,EAAE,EAA3F;AAA+FC,YAAAA,IAAI,EAAE;AAArG,WAAnB;AADH;AAAA;AAAA;AAAA;AAAA,gBAhBF,eAqBE,QAAC,UAAD;AAAA,oBAAa1B,wBAAwB,CAACK;AAAtC;AAAA;AAAA;AAAA;AAAA,gBArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVK,eAoCL,QAAC,KAAD,CAAO,MAAP;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,IAAI,EAAE,KAFR;AAGE,QAAA,KAAK,EAAE;AAAEY,UAAAA,MAAM,EAAEU;AAAV,SAHT;AAIE,QAAA,OAAO,EAAErB,cAJX;AAKE,QAAA,WAAW,EAAEN,wBAAwB,CAACE,YALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,eAAD;AACE,QAAA,OAAO,EAAC,SADV;AAEE,QAAA,IAAI,EAAE,KAFR;AAGE,QAAA,KAAK,EAAE;AAAEe,UAAAA,MAAM,EAAEU;AAAV,SAHT,CAIE;AAJF;AAKE,QAAA,WAAW,EAAE3B,wBAAwB,CAACE,YALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YApCK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAwDD,CA7EM;;GAAMJ,mB;;KAAAA,mB","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal } from \"react-bootstrap\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\n// import {\r\n//   ListRowLongTextType,\r\n//   L,\r\n//   ListRowInputType,\r\n//   ListRowButtonType,\r\n//   ListRow\r\n// } from 'src/ui/common/element/muListRow';\r\nimport {\r\n  ListRowLongTextType,\r\n  L,\r\n  ListRowInputType,\r\n  ListRowButtonType,\r\n  ListRow\r\n} from 'src/ui/common/element/muListRowTs';\r\n\r\n\r\ninterface PlaylistCreateModalPropTypes {\r\n  modalShowState: boolean;\r\n  setModalShowState: (boolean) => void;\r\n}\r\n\r\nexport const PlaylistCreateModal = (props: PlaylistCreateModalPropTypes) => {\r\n  const [playlistCreateModalState, setPlaylistCreateModalState] = useState({\r\n    isProcessing: false,\r\n\r\n    nameTextFieldValue: '',\r\n    nameNotUsableReason: '',\r\n\r\n    playlistCreationFailedReason: '',\r\n  });\r\n  const closeModalFunc = () => props.setModalShowState(false);\r\n  const onInputChange = (valueName) => (e) => {\r\n    if (e.target.type === 'reset') {\r\n      // TODO: RESET ALL FORM DATA\r\n    } if (valueName) {\r\n      setDemoData({\r\n        ...playlistCreateModalState,\r\n        [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  return <Modal\r\n    show={props.modalShowState}\r\n    onHide={closeModalFunc}\r\n    backdrop='static'\r\n    keyboard={false}\r\n    aria-labelledby='contained-modal-title-vcenter'\r\n    centered >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title><h5 style={{ margin: 0, }}>재생목록 만들기</h5></Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>새 재생목록의 이름</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='새로 만드실 재생목록의 이름을 적어주세요'\r\n            disabled={playlistCreateModalState.isProcessing}\r\n            value={playlistCreateModalState.nameTextFieldValue}\r\n            onChange={\r\n              (event) => setPlaylistCreateModalState({\r\n                ...playlistCreateModalState,\r\n                nameTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{playlistCreateModalState.nameNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n        <ListRow label='성함'>\r\n          {ListRowInputType.n({ name: 'postSender', type: 'text', onChange: onInputChange, state: demoData, min: 5, max: 15, step: 2, })}\r\n        </ListRow>\r\n\r\n\r\n        <PHFormText>{playlistCreateModalState.playlistCreationFailedReason}</PHFormText>\r\n      </Form>\r\n\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <PHSpinnerButton\r\n        variant='secondary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        onClick={closeModalFunc}\r\n        showSpinner={playlistCreateModalState.isProcessing}>\r\n        취소\r\n      </PHSpinnerButton>\r\n\r\n      <PHSpinnerButton\r\n        variant='primary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        // onClick={onPlaylistCreateFunc}\r\n        showSpinner={playlistCreateModalState.isProcessing}>\r\n        재생목록 만들기\r\n      </PHSpinnerButton>\r\n    </Modal.Footer>\r\n  </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}