{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\playco\\\\element\\\\playlistControlModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { PlaylistConfig } from '../playco/model';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaylistControlModal = props => {\n  _s();\n\n  var _props$initialModalSt, _props$initialModalSt2, _props$initialModalSt3, _props$initialModalSt4;\n\n  const navigate = useNavigate();\n  const [playlistControlModalState, setPlaylistControlModalState] = useState({\n    isProcessing: false,\n    nameTextFieldValue: ((_props$initialModalSt = props.initialModalState) === null || _props$initialModalSt === void 0 ? void 0 : _props$initialModalSt.name) || '',\n    nameNotUsableReason: '',\n    isPublicAccessable: ((_props$initialModalSt2 = props.initialModalState) === null || _props$initialModalSt2 === void 0 ? void 0 : _props$initialModalSt2.public_accessable) || false,\n    isPublicItemAppendable: ((_props$initialModalSt3 = props.initialModalState) === null || _props$initialModalSt3 === void 0 ? void 0 : _props$initialModalSt3.public_item_appendable) || false,\n    isPublicItemDeletable: ((_props$initialModalSt4 = props.initialModalState) === null || _props$initialModalSt4 === void 0 ? void 0 : _props$initialModalSt4.public_item_deletable) || false,\n    playlistCreationFailedReason: ''\n  });\n\n  const closeModalFunc = () => {\n    if (!playlistControlModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const handleInputChange = valueName => e => {\n    let newPlaylistControlModalState = { ...playlistControlModalState,\n      [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    if (valueName === 'nameTextFieldValue') newPlaylistControlModalState.nameNotUsableReason = '';\n    setPlaylistControlModalState(newPlaylistControlModalState);\n  };\n\n  const tryPlaylistCreate = () => {\n    let isRequestable = true;\n    let newPlaylistControlModalState = { ...playlistControlModalState,\n      isProcessing: true\n    }; // trim all strings in states\n\n    for (var key in newPlaylistControlModalState) if (typeof newPlaylistControlModalState[key] === 'string') newPlaylistControlModalState[key] = newPlaylistControlModalState[key].trim();\n\n    if (!newPlaylistControlModalState.nameTextFieldValue) {\n      newPlaylistControlModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\n      isRequestable = false;\n    }\n\n    setPlaylistControlModalState(newPlaylistControlModalState);\n\n    if (isRequestable) {//\n    }\n\n    console.log(playlistControlModalState);\n    setTimeout(() => {\n      newPlaylistControlModalState = { ...newPlaylistControlModalState,\n        isProcessing: false\n      };\n      setPlaylistControlModalState(newPlaylistControlModalState);\n    }, 5000);\n  };\n\n  const tryPlaylistModify = () => {\n    console.log('qwe');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    keyboard: false,\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: props.createMode ? '재생목록 만들기' : '재생목록 수정'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uC774\\uB984\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: props.createMode ? '여기에 새로 만드실 재생목록의 이름을 적어주세요' : '여기에 이 재생목록의 새 이름을 적어주세요',\n            disabled: playlistControlModalState.isProcessing,\n            value: playlistControlModalState.nameTextFieldValue,\n            onChange: handleInputChange('nameTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: playlistControlModalState.nameNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicAccessable'),\n            value: playlistControlModalState.isPublicAccessable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicAccessableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC744 \\uBCFC \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemAppendable'),\n            value: playlistControlModalState.isPublicItemAppendable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicItemAppendableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC5D0 \\uC601\\uC0C1\\uC744 \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemDeletable'),\n            value: playlistControlModalState.isPublicItemDeletable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicItemDeletableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC5D0\\uC11C \\uC601\\uC0C1\\uC744 \\uC0AD\\uC81C\\uD560 \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: playlistControlModalState.playlistCreationFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: playlistControlModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: props.createMode ? tryPlaylistCreate : tryPlaylistModify,\n        showSpinner: playlistControlModalState.isProcessing,\n        children: props.createMode ? '재생목록 만들기' : '재생목록 수정'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PlaylistControlModal, \"au0i+OpgC4FhqLI4l1wcT9ZAiZU=\", false, function () {\n  return [useNavigate];\n});\n\n_c = PlaylistControlModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistControlModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/element/playlistControlModal.jsx"],"names":["React","useState","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","PlaylistConfig","PlaylistControlModal","props","navigate","playlistControlModalState","setPlaylistControlModalState","isProcessing","nameTextFieldValue","initialModalState","name","nameNotUsableReason","isPublicAccessable","public_accessable","isPublicItemAppendable","public_item_appendable","isPublicItemDeletable","public_item_deletable","playlistCreationFailedReason","closeModalFunc","setModalShowState","handleInputChange","valueName","e","newPlaylistControlModalState","target","type","checked","value","tryPlaylistCreate","isRequestable","key","trim","console","log","setTimeout","tryPlaylistModify","modalShowState","margin","createMode","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PlaylistConfig } from '../playco/model';\r\n\r\nexport const PlaylistControlModal: React.FC = (props: {\r\n  modalShowState: boolean;\r\n  setModalShowState: (boolean) => void;\r\n  createMode?: boolean;\r\n  initialModalState?: PlaylistConfig;\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [playlistControlModalState, setPlaylistControlModalState] = useState({\r\n    isProcessing: false,\r\n\r\n    nameTextFieldValue: props.initialModalState?.name || '',\r\n    nameNotUsableReason: '',\r\n    isPublicAccessable: props.initialModalState?.public_accessable || false,\r\n    isPublicItemAppendable: props.initialModalState?.public_item_appendable || false,\r\n    isPublicItemDeletable: props.initialModalState?.public_item_deletable || false,\r\n    playlistCreationFailedReason: '',\r\n  });\r\n  const closeModalFunc = () => {\r\n    if (!playlistControlModalState.isProcessing)\r\n      props.setModalShowState(false);\r\n  };\r\n  const handleInputChange = (valueName) => (e) => {\r\n    let newPlaylistControlModalState = {\r\n      ...playlistControlModalState,\r\n      [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n    };\r\n    if (valueName === 'nameTextFieldValue')\r\n      newPlaylistControlModalState.nameNotUsableReason = '';\r\n    setPlaylistControlModalState(newPlaylistControlModalState);\r\n  }\r\n  const tryPlaylistCreate = () => {\r\n    let isRequestable = true;\r\n    let newPlaylistControlModalState = {\r\n      ...playlistControlModalState,\r\n      isProcessing: true,\r\n    };\r\n\r\n    // trim all strings in states\r\n    for (var key in newPlaylistControlModalState)\r\n      if (typeof (newPlaylistControlModalState[key]) === 'string')\r\n        newPlaylistControlModalState[key] = newPlaylistControlModalState[key].trim();\r\n\r\n    if (!newPlaylistControlModalState.nameTextFieldValue) {\r\n      newPlaylistControlModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\r\n      isRequestable = false;\r\n    }\r\n    setPlaylistControlModalState(newPlaylistControlModalState);\r\n\r\n    if (isRequestable) {\r\n      //\r\n    }\r\n    console.log(playlistControlModalState);\r\n\r\n    setTimeout(() => {\r\n      newPlaylistControlModalState = {\r\n        ...newPlaylistControlModalState,\r\n        isProcessing: false,\r\n      };\r\n      setPlaylistControlModalState(newPlaylistControlModalState);\r\n    }, 5000);\r\n  }\r\n  const tryPlaylistModify = () => {\r\n    console.log('qwe');\r\n  }\r\n\r\n  return <Modal\r\n    show={props.modalShowState}\r\n    onHide={closeModalFunc}\r\n    backdrop='static'\r\n    keyboard={false}\r\n    centered >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>\r\n        <h5 style={{ margin: 0, }}>\r\n          {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n        </h5>\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 이름</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder={\r\n              (props.createMode)\r\n                ? '여기에 새로 만드실 재생목록의 이름을 적어주세요'\r\n                : '여기에 이 재생목록의 새 이름을 적어주세요'\r\n            }\r\n            disabled={playlistControlModalState.isProcessing}\r\n            value={playlistControlModalState.nameTextFieldValue}\r\n            onChange={handleInputChange('nameTextFieldValue')} />\r\n          <PHFormText>{playlistControlModalState.nameNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 설정</Form.Label>\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicAccessable')}\r\n            value={playlistControlModalState.isPublicAccessable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicAccessableSwitch'\r\n            label='다른 사람이 재생목록을 볼 수 있어요.' />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemAppendable')}\r\n            value={playlistControlModalState.isPublicItemAppendable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemAppendableSwitch'\r\n            label='다른 사람이 재생목록에 영상을 추가할 수 있어요.' />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemDeletable')}\r\n            value={playlistControlModalState.isPublicItemDeletable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemDeletableSwitch'\r\n            label='다른 사람이 재생목록에서 영상을 삭제할 수 있어요.' />\r\n        </Form.Group>\r\n        <PHFormText>{playlistControlModalState.playlistCreationFailedReason}</PHFormText>\r\n      </Form>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button\r\n        variant='secondary'\r\n        onClick={closeModalFunc}\r\n        disabled={playlistControlModalState.isProcessing}>\r\n        취소\r\n      </Button>\r\n\r\n      <PHSpinnerButton\r\n        variant='primary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        onClick={(props.createMode) ? tryPlaylistCreate : tryPlaylistModify}\r\n        showSpinner={playlistControlModalState.isProcessing}>\r\n        {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n      </PHSpinnerButton>\r\n    </Modal.Footer>\r\n  </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}