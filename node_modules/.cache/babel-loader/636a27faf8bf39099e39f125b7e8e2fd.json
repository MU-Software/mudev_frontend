{"ast":null,"code":"import { Manager } from 'socket.io-client';\nimport FrostAPI from 'src/network/api'; // Generate random safe string, borrowed from FrostAPI implementation\n\nconst generateRandomSecureToken = bytes => {\n  const randArray = new Uint32Array(bytes);\n  window.crypto.getRandomValues(randArray);\n  return buf2hex(randArray);\n}; // From https://stackoverflow.com/a/40031979\n// Buffer to hex, also borrowed from FrostAPI implementation\n\n\nconst buf2hex = buffer => {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n};\n\nlet playCoSocketIOHandlerInstance;\nexport class PlayCoSocketIOHandler {\n  constructor() {\n    this.socketIoMgr = void 0;\n    this.socketIo = void 0;\n    this.socketIoAuthToken = void 0;\n    this.sioToken = void 0;\n    this.sioTokenExpiresAt = void 0;\n    this.csrfToken = void 0;\n    this.sessionId = void 0;\n    this.socketIoEventHandler = {\n      connect: () => {\n        console.log('connected!');\n        this.sessionId = this.socketIo.id; // Get SIO Token\n\n        this.refreshSIOToken();\n      },\n      disconnect: reason => {\n        console.log('disconnected!');\n        console.log(reason);\n        this.sessionId = '';\n      },\n      playlistUpdate: () => {//\n      }\n    };\n    if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\n    this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\n      reconnectionDelayMax: 5000,\n      path: '/api/dev/ws',\n      // transports: ['websocket',],\n      // upgrade: false,\n      forceNew: false,\n      autoConnect: false,\n      closeOnBeforeunload: false\n    });\n    this.socketIo = this.socketIoMgr.socket('/playco_ws');\n\n    for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\n      this.socketIo.on(key, value);\n    }\n\n    playCoSocketIOHandlerInstance = this;\n  }\n\n  refreshSIOToken() {\n    // We need to get a new SIO Token by request.\n    this.csrfToken = generateRandomSecureToken(32);\n    new FrostAPI().post('playco/socketio/auth', {\n      'sid': this.sessionId,\n      'sio_csrf_token': this.csrfToken\n    }, true).then(result => {\n      //\n      const sioTokenData = result.data.sio_token;\n      this.sioToken = sioTokenData;\n      this.sioTokenExpiresAt = new Date(sioTokenData.exp);\n    }, reason => {\n      //\n      console.log(reason);\n      console.log(reason.debugMessage);\n    });\n  }\n\n  connect() {\n    // Connect SocketIO if it's not connected\n    if (!this.socketIo.connected) {\n      this.socketIo.connect();\n    }\n  }\n\n  disconnect() {\n    if (!this.socketIo.connected) return;\n    this.socketIo.disconnect();\n  }\n\n  enterPlaylist(playlistId, hook) {\n    const reqData = {\n      eventName: 'onPlaylistEnter',\n      data: {\n        playlist_id: 0\n      }\n    };\n  }\n\n  leavePlaylist(playlistId) {//\n  }\n\n}","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/playco/sio.ts"],"names":["Manager","FrostAPI","generateRandomSecureToken","bytes","randArray","Uint32Array","window","crypto","getRandomValues","buf2hex","buffer","Uint8Array","map","x","toString","padStart","join","playCoSocketIOHandlerInstance","PlayCoSocketIOHandler","constructor","socketIoMgr","socketIo","socketIoAuthToken","sioToken","sioTokenExpiresAt","csrfToken","sessionId","socketIoEventHandler","connect","console","log","id","refreshSIOToken","disconnect","reason","playlistUpdate","reconnectionDelayMax","path","forceNew","autoConnect","closeOnBeforeunload","socket","key","value","Object","entries","on","post","then","result","sioTokenData","data","sio_token","Date","exp","debugMessage","connected","enterPlaylist","playlistId","hook","reqData","eventName","playlist_id","leavePlaylist"],"mappings":"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","sourcesContent":["import { io, Manager } from 'socket.io-client';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from 'src/network/api';\r\n\r\n// Generate random safe string, borrowed from FrostAPI implementation\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n    const randArray = new Uint32Array(bytes);\r\n    window.crypto.getRandomValues(randArray);\r\n    return buf2hex(randArray);\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\n// Buffer to hex, also borrowed from FrostAPI implementation\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n    return [...new Uint8Array(buffer)]\r\n        .map(x => x.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\nlet playCoSocketIOHandlerInstance: PlayCoSocketIOHandler;\r\nexport class PlayCoSocketIOHandler {\r\n    private socketIoMgr: io.Manager;\r\n    private socketIo: io;\r\n    private socketIoAuthToken: { exp: Date, token: string };\r\n\r\n    private sioToken: string;\r\n    private sioTokenExpiresAt: Date;\r\n    private csrfToken: string;\r\n    private sessionId: string;\r\n\r\n    socketIoEventHandler: Record<string, () => void> = {\r\n        connect: () => {\r\n            console.log('connected!');\r\n            this.sessionId = this.socketIo.id;\r\n\r\n            // Get SIO Token\r\n            this.refreshSIOToken();\r\n        },\r\n        disconnect: (reason) => {\r\n            console.log('disconnected!');\r\n            console.log(reason);\r\n            this.sessionId = '';\r\n        },\r\n        playlistUpdate: () => {\r\n            //\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\r\n\r\n        this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\r\n            reconnectionDelayMax: 5000,\r\n            path: '/api/dev/ws',\r\n            // transports: ['websocket',],\r\n            // upgrade: false,\r\n\r\n            forceNew: false,\r\n            autoConnect: false,\r\n            closeOnBeforeunload: false,\r\n        });\r\n        this.socketIo = this.socketIoMgr.socket('/playco_ws');\r\n        for (const [key, value] of Object.entries(this.socketIoEventHandler)) {\r\n            this.socketIo.on(key, value);\r\n        }\r\n\r\n        playCoSocketIOHandlerInstance = this;\r\n    }\r\n\r\n    private refreshSIOToken() {\r\n        // We need to get a new SIO Token by request.\r\n        this.csrfToken = generateRandomSecureToken(32);\r\n        (new FrostAPI())\r\n            .post('playco/socketio/auth', { 'sid': this.sessionId, 'sio_csrf_token': this.csrfToken, }, true)\r\n            .then(\r\n                (result) => {\r\n                    //\r\n                    const sioTokenData: {'exp': string, 'token': string} = result.data.sio_token;\r\n                    this.sioToken = sioTokenData;\r\n                    this.sioTokenExpiresAt = new Date(sioTokenData.exp);\r\n                },\r\n                (reason: FrostError) => {\r\n                    //\r\n                    console.log(reason);\r\n                    console.log(reason.debugMessage);\r\n                },\r\n            )\r\n    }\r\n\r\n    connect() {\r\n        // Connect SocketIO if it's not connected\r\n        if (!this.socketIo.connected) {\r\n            this.socketIo.connect();\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        if (!this.socketIo.connected)\r\n            return;\r\n\r\n        this.socketIo.disconnect();\r\n    }\r\n\r\n    enterPlaylist(playlistId: number, hook: (unknown) => void) {\r\n        const reqData = {\r\n            eventName: 'onPlaylistEnter',\r\n            data: {\r\n                playlist_id: 0,\r\n            },\r\n        };\r\n    }\r\n\r\n    leavePlaylist(playlistId: number) {\r\n        //\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}