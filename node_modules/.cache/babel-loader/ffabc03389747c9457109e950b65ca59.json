{"ast":null,"code":"import _objectSpread from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// FIXME: MOVE THIS TO TSX\n/* eslint-disable react/prop-types */ /* eslint-disable react/jsx-key */import React from'react';import{Button,Spinner}from\"react-bootstrap\";import'./muButton.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var REACT_ELEMENT_TYPE=typeof Symbol==='function'&&Symbol.for&&Symbol.for('react.element')||0xeac7;export var PHButton=function PHButton(props){var _ref;var variant=props.variant||'outline-primary';var buttonDisabled=props.disabled||false;var buttonType=props.type||'button';var buttonSize=(_ref=props.size==='extra-sm'?'sm':props.size)!==null&&_ref!==void 0?_ref:'sm';var buttonStyle=props.smaller||props.size==='extra-sm'?_objectSpread({margin:0.25+'rem',width:props.width,height:props.height,padding:'0rem 0.25rem',fontSize:0.75+'rem'},props.style||{}):_objectSpread({margin:0.25+'rem',width:props.width,height:props.height},props.style||{});var attrCollection={disabled:buttonDisabled,onClick:props.onClick,size:buttonSize,style:buttonStyle,type:buttonType,variant:variant};return/*#__PURE__*/_jsx(Button,_objectSpread(_objectSpread({},attrCollection),{},{children:props.children}));};export var PHSpinnerButton=function PHSpinnerButton(inProps){var props=Object.assign({},inProps,{});// When props.showSpinner is true, we disable button and show spinner\nvar shouldSpinnerShow=props.showSpinner||false;delete props.showSpinner;var spinnerElement=props.spinner||/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})});delete props.spinner;var btnChildElement=props.children||\"\\xA0\";if(React.Children.count(btnChildElement)>1)throw Error('PHSpinnerButton accepts only one element for the children.');delete props.children;// If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\nif(!(typeof btnChildElement=='object'&&btnChildElement.$$typeof===REACT_ELEMENT_TYPE))btnChildElement=/*#__PURE__*/_jsx(\"div\",{children:btnChildElement});if(shouldSpinnerShow){props.disabled=true;if(props.setGrayWhenDisabled){if((props.variant||'').startsWith('outline-'))props.variant='outline-secondary';else props.variant='secondary';}}btnChildElement=/*#__PURE__*/React.cloneElement(btnChildElement,{style:{width:'fit-content',height:'fit-content',// visibility: shouldSpinnerShow ? 'hidden' : 'visible',\nopacity:shouldSpinnerShow?'50%':'100%'}});spinnerElement=/*#__PURE__*/React.cloneElement(spinnerElement,{style:{visibility:shouldSpinnerShow?'visible':'hidden'}});return/*#__PURE__*/_jsx(PHButton,_objectSpread(_objectSpread({},props),{},{children:/*#__PURE__*/_jsxs(\"div\",{className:\"PHSpinnerButtonChildrenContainer\",children:[btnChildElement,/*#__PURE__*/_jsx(\"div\",{className:\"PHSpinnerButtonSpinnerContainer\",children:spinnerElement})]})}));};","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/common/element/muButton.jsx"],"names":["React","Button","Spinner","REACT_ELEMENT_TYPE","Symbol","for","PHButton","props","variant","buttonDisabled","disabled","buttonType","type","buttonSize","size","buttonStyle","smaller","margin","width","height","padding","fontSize","style","attrCollection","onClick","children","PHSpinnerButton","inProps","Object","assign","shouldSpinnerShow","showSpinner","spinnerElement","spinner","btnChildElement","Children","count","Error","$$typeof","setGrayWhenDisabled","startsWith","cloneElement","opacity","visibility"],"mappings":"qMAAA;AACA,qC,CACA,kCAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,OAAjB,KAAgC,iBAAhC,CAEA,MAAO,gBAAP,C,wFAEA,GAAMC,CAAAA,kBAAkB,CAAI,MAAOC,CAAAA,MAAP,GAAkB,UAAlB,EAAgCA,MAAM,CAACC,GAAvC,EAA8CD,MAAM,CAACC,GAAP,CAAW,eAAX,CAA/C,EAA+E,MAA1G,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,UACjC,GAAIC,CAAAA,OAAO,CAAGD,KAAK,CAACC,OAAN,EAAiB,iBAA/B,CACA,GAAIC,CAAAA,cAAc,CAAGF,KAAK,CAACG,QAAN,EAAkB,KAAvC,CACA,GAAIC,CAAAA,UAAU,CAAGJ,KAAK,CAACK,IAAN,EAAc,QAA/B,CACA,GAAIC,CAAAA,UAAU,OAAIN,KAAK,CAACO,IAAN,GAAe,UAAf,CAA4B,IAA5B,CAAmCP,KAAK,CAACO,IAA7C,6BAAsD,IAApE,CACA,GAAIC,CAAAA,WAAW,CAAIR,KAAK,CAACS,OAAN,EAAiBT,KAAK,CAACO,IAAN,GAAe,UAAjC,gBAEdG,MAAM,CAAE,KAAO,KAFD,CAGdC,KAAK,CAAEX,KAAK,CAACW,KAHC,CAIdC,MAAM,CAAEZ,KAAK,CAACY,MAJA,CAKdC,OAAO,CAAE,cALK,CAMdC,QAAQ,CAAE,KAAO,KANH,EAOVd,KAAK,CAACe,KAAN,EAAe,EAPL,iBAUdL,MAAM,CAAE,KAAO,KAVD,CAWdC,KAAK,CAAEX,KAAK,CAACW,KAXC,CAYdC,MAAM,CAAEZ,KAAK,CAACY,MAZA,EAaVZ,KAAK,CAACe,KAAN,EAAe,EAbL,CAAlB,CAgBA,GAAIC,CAAAA,cAAc,CAAG,CACnBb,QAAQ,CAAED,cADS,CAEnBe,OAAO,CAAEjB,KAAK,CAACiB,OAFI,CAGnBV,IAAI,CAAED,UAHa,CAInBS,KAAK,CAAEP,WAJY,CAKnBH,IAAI,CAAED,UALa,CAMnBH,OAAO,CAAEA,OANU,CAArB,CASA,mBAAO,KAAC,MAAD,gCAAYe,cAAZ,eACJhB,KAAK,CAACkB,QADF,GAAP,CAGD,CAjCM,CAmCP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,OAAD,CAAa,CAC1C,GAAIpB,CAAAA,KAAK,CAAGqB,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBF,OAAlB,CAA2B,EAA3B,CAAZ,CAEA;AACA,GAAIG,CAAAA,iBAAiB,CAAGvB,KAAK,CAACwB,WAAN,EAAqB,KAA7C,CACA,MAAQxB,CAAAA,KAAK,CAACwB,WAAd,CAEA,GAAIC,CAAAA,cAAc,CAAGzB,KAAK,CAAC0B,OAAN,eAAiB,KAAC,OAAD,EAAS,SAAS,CAAC,QAAnB,CAA4B,IAAI,CAAC,QAAjC,uBAEpC,aAAM,SAAS,CAAC,iBAAhB,wBAFoC,EAAtC,CAIA,MAAQ1B,CAAAA,KAAK,CAAC0B,OAAd,CAEA,GAAIC,CAAAA,eAAe,CAAG3B,KAAK,CAACkB,QAAN,EAAkB,MAAxC,CACA,GAAIzB,KAAK,CAACmC,QAAN,CAAeC,KAAf,CAAqBF,eAArB,EAAwC,CAA5C,CACE,KAAMG,CAAAA,KAAK,CAAC,4DAAD,CAAX,CACF,MAAQ9B,CAAAA,KAAK,CAACkB,QAAd,CAGA;AACA,GAAI,EAAE,MAAQS,CAAAA,eAAR,EAA4B,QAA5B,EAAyCA,eAAe,CAACI,QAAhB,GAA6BnC,kBAAxE,CAAJ,CACE+B,eAAe,cAAG,qBAAMA,eAAN,EAAlB,CAEF,GAAIJ,iBAAJ,CAAuB,CACrBvB,KAAK,CAACG,QAAN,CAAiB,IAAjB,CACA,GAAIH,KAAK,CAACgC,mBAAV,CAA+B,CAC7B,GAAI,CAAChC,KAAK,CAACC,OAAN,EAAiB,EAAlB,EAAsBgC,UAAtB,CAAiC,UAAjC,CAAJ,CACEjC,KAAK,CAACC,OAAN,CAAgB,mBAAhB,CADF,IAGED,CAAAA,KAAK,CAACC,OAAN,CAAgB,WAAhB,CACH,CACF,CAED0B,eAAe,cAAGlC,KAAK,CAACyC,YAAN,CAAmBP,eAAnB,CAAoC,CACpDZ,KAAK,CAAE,CACLJ,KAAK,CAAE,aADF,CAELC,MAAM,CAAE,aAFH,CAGL;AACAuB,OAAO,CAAEZ,iBAAiB,CAAG,KAAH,CAAW,MAJhC,CAD6C,CAApC,CAAlB,CAQAE,cAAc,cAAGhC,KAAK,CAACyC,YAAN,CAAmBT,cAAnB,CAAmC,CAClDV,KAAK,CAAE,CACLqB,UAAU,CAAEb,iBAAiB,CAAG,SAAH,CAAe,QADvC,CAD2C,CAAnC,CAAjB,CAMA,mBAAO,KAAC,QAAD,gCAAcvB,KAAd,4BACL,aAAK,SAAS,CAAC,kCAAf,WACG2B,eADH,cAEE,YAAK,SAAS,CAAC,iCAAf,UACGF,cADH,EAFF,GADK,GAAP,CAQD,CAvDM","sourcesContent":["// FIXME: MOVE THIS TO TSX\n/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-key */\n\nimport React from 'react';\nimport { Button, Spinner } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\nexport const PHButton = (props) => {\n  let variant = props.variant || 'outline-primary';\n  let buttonDisabled = props.disabled || false;\n  let buttonType = props.type || 'button'\n  let buttonSize = (props.size === 'extra-sm' ? 'sm' : props.size) ?? 'sm'\n  let buttonStyle = (props.smaller || props.size === 'extra-sm')\n    ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {}),\n    }\n    : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {}),\n    };\n\n  let attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: variant,\n  }\n\n  return <Button {...attrCollection}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton = (inProps) => {\n  let props = Object.assign({}, inProps, {});\n\n  // When props.showSpinner is true, we disable button and show spinner\n  let shouldSpinnerShow = props.showSpinner || false;\n  delete (props.showSpinner);\n\n  let spinnerElement = props.spinner || <Spinner animation=\"border\" role=\"status\">\n    {/* visually-hidden is Bootstrap's. */}\n    <span className=\"visually-hidden\">Loading...</span>\n  </Spinner>;\n  delete (props.spinner);\n\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1)\n    throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete (props.children);\n\n\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n  if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n    btnChildElement = <div>{btnChildElement}</div>;\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-'))\n        props.variant = 'outline-secondary';\n      else\n        props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%',\n    }\n  });\n  spinnerElement = React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n    }\n  });\n\n  return <PHButton {...props}>\n    <div className='PHSpinnerButtonChildrenContainer'>\n      {btnChildElement}\n      <div className='PHSpinnerButtonSpinnerContainer'>\n        {spinnerElement}\n      </div>\n    </div>\n  </PHButton>\n}\n"]},"metadata":{},"sourceType":"module"}