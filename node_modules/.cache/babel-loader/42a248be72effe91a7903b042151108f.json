{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muFormText.tsx\";\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport './muFormText.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PHFormText = ({\n  className,\n  defaultChildren,\n  children,\n  showOnlyNeeded\n}) => {\n  if (children instanceof String && children.includes('\\n')) {\n    console.log('qweqwe');\n    children = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children.split('\\n').map(value => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [value, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 67\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form.Text, {\n    className: (children ? 'text-danger ' : 'text-muted ') + 'PHFormGroupText ' + (className ? className : ''),\n    children: children || (defaultChildren || showOnlyNeeded ? '' : '\\u00A0')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n_c = PHFormText;\n\nvar _c;\n\n$RefreshReg$(_c, \"PHFormText\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muFormText.tsx"],"names":["React","Form","PHFormText","className","defaultChildren","children","showOnlyNeeded","String","includes","console","log","split","map","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,OAAO,kBAAP;;;AASA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,eAAb;AAA8BC,EAAAA,QAA9B;AAAwCC,EAAAA;AAAxC,CAAD,KAAmF;AAC3G,MAAID,QAAQ,YAAYE,MAApB,IAA8BF,QAAQ,CAACG,QAAT,CAAkB,IAAlB,CAAlC,EAA2D;AACzDC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAL,IAAAA,QAAQ,gBAAG;AAAA,gBAAMA,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBC,GAArB,CAA0BC,KAAD,iBAAW;AAAA,mBAAGA,KAAH,eAAS;AAAA;AAAA;AAAA;AAAA,gBAAT;AAAA,sBAApC;AAAN;AAAA;AAAA;AAAA;AAAA,YAAX;AACD;;AAED,sBAAO,QAAC,IAAD,CAAM,IAAN;AACL,IAAA,SAAS,EAAE,CAACR,QAAQ,GAAG,cAAH,GAAoB,aAA7B,IAA8C,kBAA9C,IAAoEF,SAAS,GAAGA,SAAH,GAAe,EAA5F,CADN;AAAA,cAEJE,QAAQ,KAAKD,eAAe,IAAIE,cAAnB,GAAoC,EAApC,GAAyC,QAA9C;AAFJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAID,CAVM;KAAMJ,U","sourcesContent":["import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport './muFormText.css';\r\n\r\ninterface PHFormTextPropTypes {\r\n  className?: string;\r\n  defaultChildren?: string;\r\n  children?: React.ReactNode;\r\n  showOnlyNeeded?: boolean;\r\n}\r\n\r\nexport const PHFormText = ({ className, defaultChildren, children, showOnlyNeeded }: PHFormTextPropTypes) => {\r\n  if (children instanceof String && children.includes('\\n')) {\r\n    console.log('qweqwe')\r\n    children = <div>{children.split('\\n').map((value) => <>{value}<br/></>)}</div>;\r\n  }\r\n\r\n  return <Form.Text\r\n    className={(children ? 'text-danger ' : 'text-muted ') + 'PHFormGroupText ' + (className ? className : '')}>\r\n    {children || (defaultChildren || showOnlyNeeded ? '' : '\\u00A0')}\r\n  </Form.Text>\r\n};\r\n"]},"metadata":{},"sourceType":"module"}