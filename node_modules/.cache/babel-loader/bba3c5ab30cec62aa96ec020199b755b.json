{"ast":null,"code":"// (c) MUsoftware 2022\n'use strict';\n\nclass FrostError extends Error {\n  constructor(message, debugMessage, httpRespCode, accessTokenInvalidation = false, apiResponse = null, ...params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    this.message = void 0;\n    this.debugMessage = void 0;\n    this.date = void 0;\n    this.httpRespCode = -1;\n    this.accessTokenInvalidation = false;\n    this.apiResponse = void 0;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FrostError);\n    } // Custom debugging information\n\n\n    this.message = message;\n    this.debugMessage = debugMessage;\n    this.httpRespCode = httpRespCode;\n    this.accessTokenInvalidation = accessTokenInvalidation;\n    this.apiResponse = apiResponse;\n    this.date = new Date();\n  }\n\n}\n\nexport { FrostError };","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/common/error.ts"],"names":["FrostError","Error","constructor","message","debugMessage","httpRespCode","accessTokenInvalidation","apiResponse","params","date","captureStackTrace","Date"],"mappings":"AAAA;AACA;;AAIA,MAAMA,UAAN,SAAyBC,KAAzB,CAA+B;AAQ7BC,EAAAA,WAAW,CACTC,OADS,EAETC,YAFS,EAGTC,YAHS,EAITC,uBAAuB,GAAG,KAJjB,EAKTC,WAA8B,GAAG,IALxB,EAMT,GAAGC,MANM,EAMS;AAClB;AACA,UAAM,GAAGA,MAAT,EAFkB,CAIlB;;AAJkB,SAbpBL,OAaoB;AAAA,SAZpBC,YAYoB;AAAA,SAXpBK,IAWoB;AAAA,SAVpBJ,YAUoB,GAVG,CAAC,CAUJ;AAAA,SATpBC,uBASoB,GATe,KASf;AAAA,SARpBC,WAQoB;;AAKlB,QAAIN,KAAK,CAACS,iBAAV,EAA6B;AAC3BT,MAAAA,KAAK,CAACS,iBAAN,CAAwB,IAAxB,EAA8BV,UAA9B;AACD,KAPiB,CASlB;;;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,IAAL,GAAY,IAAIE,IAAJ,EAAZ;AACD;;AA9B4B;;AAiC/B,SAASX,UAAT","sourcesContent":["// (c) MUsoftware 2022\r\n'use strict';\r\n\r\nimport { APIResult } from \"..//network/api_response\";\r\n\r\nclass FrostError extends Error {\r\n  message: string;\r\n  debugMessage: string;\r\n  date: Date;\r\n  httpRespCode: number = -1;\r\n  accessTokenInvalidation: boolean = false;\r\n  apiResponse?: APIResult | null;\r\n\r\n  constructor(\r\n    message: string,\r\n    debugMessage: string,\r\n    httpRespCode: number,\r\n    accessTokenInvalidation = false,\r\n    apiResponse?: APIResult | null = null,\r\n    ...params: any[]) {\r\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n    super(...params);\r\n\r\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, FrostError);\r\n    }\r\n\r\n    // Custom debugging information\r\n    this.message = message\r\n    this.debugMessage = debugMessage;\r\n    this.httpRespCode = httpRespCode;\r\n    this.accessTokenInvalidation = accessTokenInvalidation;\r\n    this.apiResponse = apiResponse;\r\n    this.date = new Date();\r\n  }\r\n}\r\n\r\nexport { FrostError };\r\n"]},"metadata":{},"sourceType":"module"}