{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\deactivate.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { accountDeactivateActionCreatorAsync } from 'src/redux/modules/account/action_creator';\nimport { Form, Button } from 'react-bootstrap';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport './account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountDeactivate = () => {\n  _s();\n\n  const InputChecker = {\n    pw: str => {\n      if (!str) {\n        return {\n          success: false,\n          pwNotUsableReason: '비밀번호를 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    }\n  };\n  const accountInfo = useSelector(state => state.accountReducer);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [accountDeactivateFormData, setAccountDeactivateFormData] = useState({\n    isInitialized: false,\n    isProcessing: false,\n    triedDeactivate: false,\n    pwTextFieldValue: '',\n    pwNotUsableReason: '',\n    accountDeactivateFailedReason: ''\n  });\n  useEffect(() => {\n    if (!accountDeactivateFormData.isInitialized && !accountInfo.isFetching) {\n      setAccountDeactivateFormData(prevState => ({ ...prevState,\n        isInitialized: true\n      }));\n    }\n\n    if (accountDeactivateFormData.isInitialized) {\n      if (!accountDeactivateFormData.triedDeactivate && !accountInfo.isSignedIn) {\n        // User got this page without signing out.\n        alert('로그인 후에 사용하실 수 있어요.');\n        navigate('/');\n      } else if (accountDeactivateFormData.triedDeactivate && !accountInfo.isSignedIn) {\n        // User successfully deactivated.\n        alert('계정이 정상적으로 비활성화됐어요,\\n이용해주셔서 감사합니다!');\n        setAccountDeactivateFormData(prevState => ({ ...prevState,\n          isProcessing: false,\n          triedDeactivate: false\n        }));\n        navigate('/');\n      } else if (accountDeactivateFormData.triedDeactivate && accountInfo.frostErrorObj) {\n        // Error raised while deactivating account, parse error and show proper message.\n        setAccountDeactivateFormData(prevState => ({ ...prevState,\n          isProcessing: false,\n          triedDeactivate: false\n        }));\n      }\n    }\n  }, [accountInfo, accountDeactivateFormData.isInitialized]);\n\n  const getTrimmedState = modalState => {\n    const tempModalState = { ...(modalState !== null && modalState !== void 0 ? modalState : accountDeactivateFormData)\n    };\n\n    for (const key in tempModalState) if (typeof tempModalState[key] === 'string') tempModalState[key] = tempModalState[key].trim();\n\n    return tempModalState;\n  };\n\n  const handleInputChange = fieldName => e => {\n    const fieldStateKey = `${fieldName}TextFieldValue`;\n    const fieldValue = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    const checkerResult = InputChecker[fieldName](fieldValue.trim());\n    delete checkerResult.success;\n    setAccountDeactivateFormData(prevState => ({ ...prevState,\n      ...checkerResult,\n      [fieldStateKey]: fieldValue\n    }));\n  };\n\n  const shouldSubmitBtnDisabled = () => {\n    if (accountDeactivateFormData.isProcessing) return true;\n    const tempModalState = getTrimmedState();\n    let isFormCheckSuccess = true;\n    ['pw'].map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        // And also, we are in a map function, so we cannot return directly here,\n        // we need to store the result somewhere outside of the function.\n        isFormCheckSuccess = fieldCheckResult.success;\n    });\n    return !isFormCheckSuccess;\n  };\n\n  const tryAccountDeactivate = () => {\n    // Trim all strings in states\n    const tempModalState = getTrimmedState();\n    setAccountDeactivateFormData(prevState => ({ ...prevState,\n      ...tempModalState,\n      isProcessing: true\n    }));\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    ['pw'].map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        // And also, we are in a map function, so we cannot return directly here,\n        // we need to store the result somewhere outside of the function.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    setAccountDeactivateFormData(prevState => ({ ...prevState,\n      ...resultFormCheckData,\n      isProcessing: isFormCheckSuccess,\n      triedDeactivate: isFormCheckSuccess\n    }));\n    if (!isFormCheckSuccess) return;\n    dispatch(accountDeactivateActionCreatorAsync(accountInfo.email, tempModalState.pwTextFieldValue));\n  };\n\n  let accountDeactivateDescription = '계정을 비활성화 시 생성하신 PlayCo의 재생목록이 차단 상태로 되고,\\n';\n  accountDeactivateDescription += '이 이메일로 MUdev.cc에 다시 가입을 하실 수 없으며, 비활성화는 되돌릴 수 없어요!\\n';\n  accountDeactivateDescription += '계속 진행하시려면 아래에 현재 비밀번호를 입력 후\\n<비활성화하기> 버튼을 눌러주세요.\\n';\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"accountMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uACC4\\uC815 \\uBE44\\uD65C\\uC131\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"accountAside\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formBasicEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uACC4\\uC815\\uC744 \\uC815\\uB9D0 \\uBE44\\uD65C\\uC131\\uD654 \\uD558\\uC2E4\\uAC74\\uAC00\\uC694?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            defaultChildren: accountDeactivateDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"current-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uD604\\uC7AC \\uC0AC\\uC6A9 \\uC911\\uC774\\uC2E0 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: accountDeactivateFormData.isProcessing,\n            value: accountDeactivateFormData.pwTextFieldValue,\n            onChange: handleInputChange('pw')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: accountDeactivateFormData.pwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: accountDeactivateFormData.accountDeactivateFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accountSubmitBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"info\",\n            disabled: accountDeactivateFormData.isProcessing,\n            onClick: () => navigate(-1),\n            children: \"\\uCDE8\\uC18C\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n            variant: \"warning\",\n            type: \"submit\",\n            size: false,\n            style: {\n              margin: undefined\n            },\n            disabled: shouldSubmitBtnDisabled(),\n            onClick: tryAccountDeactivate,\n            showSpinner: accountDeactivateFormData.isProcessing,\n            children: \"\\uBE44\\uD65C\\uC131\\uD654\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountDeactivate, \"f1GICGFhOpuDMT62adVRybvcqzM=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = AccountDeactivate;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountDeactivate\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/deactivate.tsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","accountDeactivateActionCreatorAsync","Form","Button","PHSpinnerButton","PHFormText","AccountDeactivate","InputChecker","pw","str","success","pwNotUsableReason","accountInfo","state","accountReducer","dispatch","navigate","accountDeactivateFormData","setAccountDeactivateFormData","isInitialized","isProcessing","triedDeactivate","pwTextFieldValue","accountDeactivateFailedReason","isFetching","prevState","isSignedIn","alert","frostErrorObj","getTrimmedState","modalState","tempModalState","key","trim","handleInputChange","fieldName","e","fieldStateKey","fieldValue","target","type","checked","value","checkerResult","shouldSubmitBtnDisabled","isFormCheckSuccess","map","fieldCheckResult","tryAccountDeactivate","resultFormCheckData","email","accountDeactivateDescription","margin","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { accountDeactivateActionCreatorAsync } from 'src/redux/modules/account/action_creator';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\n\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport './account.css';\r\n\r\ninterface AccountDeactivateStateType {\r\n  isInitialized: boolean;\r\n  isProcessing: boolean;\r\n  triedDeactivate: boolean;\r\n\r\n  pwTextFieldValue: string;\r\n  pwNotUsableReason: string;\r\n  accountDeactivateFailedReason: string;\r\n}\r\n\r\nexport const AccountDeactivate = () => {\r\n  const InputChecker = {\r\n    pw: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호를 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return { success: true, pwNotUsableReason: null };\r\n    },\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [accountDeactivateFormData, setAccountDeactivateFormData] = useState({\r\n    isInitialized: false,\r\n    isProcessing: false,\r\n    triedDeactivate: false,\r\n\r\n    pwTextFieldValue: '',\r\n    pwNotUsableReason: '',\r\n    accountDeactivateFailedReason: '',\r\n  });\r\n  useEffect(() => {\r\n    if (!accountDeactivateFormData.isInitialized && !accountInfo.isFetching) {\r\n      setAccountDeactivateFormData(prevState => ({\r\n        ...prevState,\r\n        isInitialized: true,\r\n      }));\r\n    }\r\n\r\n    if (accountDeactivateFormData.isInitialized) {\r\n      if (!accountDeactivateFormData.triedDeactivate && !accountInfo.isSignedIn) {\r\n        // User got this page without signing out.\r\n        alert('로그인 후에 사용하실 수 있어요.');\r\n        navigate('/');\r\n      } else if (accountDeactivateFormData.triedDeactivate && !accountInfo.isSignedIn) {\r\n        // User successfully deactivated.\r\n        alert('계정이 정상적으로 비활성화됐어요,\\n이용해주셔서 감사합니다!');\r\n        setAccountDeactivateFormData(prevState => ({\r\n          ...prevState,\r\n          isProcessing: false,\r\n          triedDeactivate: false,\r\n        }));\r\n        navigate('/');\r\n      } else if (accountDeactivateFormData.triedDeactivate && accountInfo.frostErrorObj) {\r\n        // Error raised while deactivating account, parse error and show proper message.\r\n        setAccountDeactivateFormData(prevState => ({\r\n          ...prevState,\r\n          isProcessing: false,\r\n          triedDeactivate: false,\r\n        }));\r\n      }\r\n    }\r\n  }, [accountInfo, accountDeactivateFormData.isInitialized]);\r\n\r\n  const getTrimmedState = (modalState?: AccountDeactivateStateType) => {\r\n    const tempModalState: AccountDeactivateStateType = { ...(modalState ?? accountDeactivateFormData), };\r\n    for (const key in tempModalState)\r\n      if (typeof (tempModalState[key]) === 'string')\r\n        tempModalState[key] = tempModalState[key].trim();\r\n\r\n    return tempModalState;\r\n  };\r\n  const handleInputChange = (fieldName: string) => (e: Event) => {\r\n    const fieldStateKey = `${fieldName}TextFieldValue`;\r\n    const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n    const checkerResult = InputChecker[fieldName](fieldValue.trim());\r\n    delete (checkerResult.success);\r\n\r\n    setAccountDeactivateFormData((prevState) => ({\r\n      ...prevState,\r\n      ...checkerResult,\r\n      [fieldStateKey]: fieldValue,\r\n    }));\r\n  };\r\n\r\n  const shouldSubmitBtnDisabled = () => {\r\n    if (accountDeactivateFormData.isProcessing)\r\n      return true;\r\n\r\n    const tempModalState = getTrimmedState();\r\n    let isFormCheckSuccess = true;\r\n    ['pw',].map(fieldName => {\r\n      const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult: string = InputChecker[fieldName](fieldValue);\r\n\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        // And also, we are in a map function, so we cannot return directly here,\r\n        // we need to store the result somewhere outside of the function.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n    });\r\n\r\n    return !isFormCheckSuccess;\r\n  };\r\n\r\n  const tryAccountDeactivate = () => {\r\n    // Trim all strings in states\r\n    const tempModalState = getTrimmedState();\r\n    setAccountDeactivateFormData(prevState => ({\r\n      ...prevState,\r\n      ...tempModalState,\r\n      isProcessing: true,\r\n    }));\r\n\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    ['pw',].map(fieldName => {\r\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        // And also, we are in a map function, so we cannot return directly here,\r\n        // we need to store the result somewhere outside of the function.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    setAccountDeactivateFormData(prevState => ({\r\n      ...prevState,\r\n      ...resultFormCheckData,\r\n      isProcessing: isFormCheckSuccess,\r\n      triedDeactivate: isFormCheckSuccess,\r\n    }));\r\n\r\n    if (!isFormCheckSuccess)\r\n      return;\r\n\r\n    dispatch(accountDeactivateActionCreatorAsync(\r\n      accountInfo.email,\r\n      tempModalState.pwTextFieldValue,\r\n    ));\r\n  };\r\n\r\n  let accountDeactivateDescription = '계정을 비활성화 시 생성하신 PlayCo의 재생목록이 차단 상태로 되고,\\n';\r\n  accountDeactivateDescription += '이 이메일로 MUdev.cc에 다시 가입을 하실 수 없으며, 비활성화는 되돌릴 수 없어요!\\n';\r\n  accountDeactivateDescription += '계속 진행하시려면 아래에 현재 비밀번호를 입력 후\\n<비활성화하기> 버튼을 눌러주세요.\\n';\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 비활성화</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className=\"accountAsideFormGroup\" controlId=\"formBasicEmail\">\r\n          <Form.Label>계정을 정말 비활성화 하실건가요?</Form.Label>\r\n          <PHFormText defaultChildren={accountDeactivateDescription} />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            autoComplete='current-password'\r\n            placeholder='여기에 현재 사용 중이신 비밀번호를 적어주세요.'\r\n            disabled={accountDeactivateFormData.isProcessing}\r\n            value={accountDeactivateFormData.pwTextFieldValue}\r\n            onChange={handleInputChange('pw')} />\r\n          <PHFormText>{accountDeactivateFormData.pwNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText>{accountDeactivateFormData.accountDeactivateFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='info'\r\n            disabled={accountDeactivateFormData.isProcessing}\r\n            onClick={() => navigate(-1)}>\r\n            취소하기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='warning'\r\n            type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            disabled={shouldSubmitBtnDisabled()}\r\n            onClick={tryAccountDeactivate}\r\n            showSpinner={accountDeactivateFormData.isProcessing}>\r\n            비활성화하기\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}