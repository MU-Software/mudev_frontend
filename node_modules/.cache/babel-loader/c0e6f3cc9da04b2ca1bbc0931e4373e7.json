{"ast":null,"code":"import { FrostError } from \"src/common/error\";\nimport FrostAPI from \"src/network/api\";\nimport { Playlist } from \"./model\";\nexport class PlayCoAPI {\n  static url(playlistId) {\n    return `playco/playlists/${playlistId !== null && playlistId !== void 0 ? playlistId : ''}`;\n  }\n\n  static itemUrl(playlistId, itemIndex) {\n    return `playco/playlists/${playlistId}/items/${itemIndex !== null && itemIndex !== void 0 ? itemIndex : ''}`;\n  }\n\n  static getAllPlaylists() {\n    return new FrostAPI().get(PlayCoAPI.url(), true).then(result => {\n      // Possible response\n      // - multiple_resources_found(200)\n      // - resource_not_found(404)\n      if (result.code === 200 && result.subCode === 'resource.multiple_result') {\n        return result.data.playco_playlists.map((v, i, a) => new Playlist(v));\n      } else if (result.code === 404 && result.subCode === 'resource.not_found') {\n        return [];\n      } else {\n        throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getAllPlaylists`, result.code, false, result);\n      }\n    });\n  } // get playlistHashAsync(playlistId: number) {\n  //     return (new FrostAPI())\n  //         .head\n  // }\n\n\n  static getPlaylistInfo(playlistId) {\n    return new FrostAPI().get(PlayCoAPI.url(playlistId), true).then(result => {\n      console.log(result);\n      result.header; // Possible response\n      // - resource_found(200)\n      // - resource_forbidden(403)\n      // - resource_not_found(404)\n\n      if (result.code === 200 && result.subCode === 'resource.result') {\n        const playlistObj = new Playlist({ ...result.data.playco_playlist,\n          hash: result.header.get('etag')\n        });\n        return playlistObj;\n      } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\n        throw new FrostError('해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      } else if (result.code === 404 && result.subCode === 'resource.not_found') {\n        throw new FrostError('해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      } else {\n        throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      }\n    });\n  }\n\n  static createPlaylist(payload) {\n    return new FrostAPI().post(PlayCoAPI.url(), payload, true);\n  }\n\n  static modifyPlaylist(playlistId, data, hash) {\n    return new FrostAPI().patch(PlayCoAPI.url(playlistId), data, true, {\n      'If-Match': hash\n    }).then(result => {\n      // Possible response\n      // - resource_modified(201)\n      // - resource_forbidden(403)\n      // - resource_not_found(404)\n      if (result.code === 200 && result.subCode === 'resource.result') {\n        return [];\n      } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\n        throw new FrostError('해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      } else if (result.code === 404 && result.subCode === 'resource.not_found') {\n        throw new FrostError('해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      } else {\n        throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.', `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`, result.code, false, result);\n      }\n    });\n  }\n\n  static deletePlaylist(playlistId) {\n    return new FrostAPI().delete(PlayCoAPI.url(playlistId), true);\n  }\n\n  static getPlaylistItems(playlistId) {\n    return new FrostAPI().get(PlayCoAPI.itemUrl(playlistId), true);\n  }\n\n  static insertPlaylistItem(playlistId, itemUrl) {\n    return new FrostAPI().post(PlayCoAPI.itemUrl(playlistId), {\n      link: itemUrl\n    }, true);\n  }\n\n  static movePlaylistItem(playlistId, itemIndex) {\n    return new FrostAPI().patch(PlayCoAPI.itemUrl(playlistId, itemIndex), true);\n  }\n\n  static deletePlaylistItem(playlistId, itemIndex) {\n    return new FrostAPI().delete(PlayCoAPI.itemUrl(playlistId, itemIndex), true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/playco/api.ts"],"names":["FrostError","FrostAPI","Playlist","PlayCoAPI","url","playlistId","itemUrl","itemIndex","getAllPlaylists","get","then","result","code","subCode","data","playco_playlists","map","v","i","a","getPlaylistInfo","console","log","header","playlistObj","playco_playlist","hash","createPlaylist","payload","post","modifyPlaylist","patch","deletePlaylist","delete","getPlaylistItems","insertPlaylistItem","link","movePlaylistItem","deletePlaylistItem"],"mappings":"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","sourcesContent":["import { FrostError } from \"src/common/error\";\r\nimport FrostAPI from \"src/network/api\";\r\n\r\nimport {\r\n    PlaylistListener,\r\n    PlaylistItem,\r\n    Playlist,\r\n    PlaylistConfig,\r\n} from \"./model\";\r\n\r\nexport class PlayCoAPI {\r\n    static url(playlistId?: number) { return `playco/playlists/${playlistId ?? ''}`; }\r\n    static itemUrl(playlistId: number, itemIndex?: number) { return `playco/playlists/${playlistId}/items/${itemIndex ?? ''}`; }\r\n\r\n    static getAllPlaylists() {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.url(), true)\r\n            .then((result) => {\r\n                // Possible response\r\n                // - multiple_resources_found(200)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.multiple_result') {\r\n                    return result.data.playco_playlists.map((v, i, a) => new Playlist(v));\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    return [];\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getAllPlaylists`,\r\n                        result.code, false, result);\r\n                }\r\n            });\r\n    }\r\n\r\n    // get playlistHashAsync(playlistId: number) {\r\n    //     return (new FrostAPI())\r\n    //         .head\r\n    // }\r\n\r\n    static getPlaylistInfo(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.url(playlistId), true)\r\n            .then((result) => {\r\n                console.log(result);\r\n                result.header\r\n                // Possible response\r\n                // - resource_found(200)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.result') {\r\n                    const playlistObj = new Playlist({...result.data.playco_playlist, hash: result.header.get('etag')});\r\n\r\n                    return playlistObj;\r\n                } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                }\r\n            });\r\n    }\r\n\r\n    static createPlaylist(payload: PlaylistConfig) {\r\n        return (new FrostAPI()).post(PlayCoAPI.url(), payload, true)\r\n    }\r\n\r\n    static modifyPlaylist(playlistId: number, data: PlaylistConfig, hash: string) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.url(playlistId), data, true, {'If-Match': hash})\r\n            .then((result) => {\r\n                // Possible response\r\n                // - resource_modified(201)\r\n                // - resource_forbidden(403)\r\n                // - resource_not_found(404)\r\n                if (result.code === 200 && result.subCode === 'resource.result') {\r\n                    return [];\r\n                } else if (result.code === 403 && result.subCode === 'resource.forbidden') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 볼 권한이 없어요,\\n권한과 재생목록 ID를 확인 후 다시 접속해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                } else if (result.code === 404 && result.subCode === 'resource.not_found') {\r\n                    throw new FrostError(\r\n                        '해당 재생목록을 찾을 수 없어요,\\n재생목록 ID를 다시 확인해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                } else {\r\n                    throw new FrostError(\r\n                        '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n                        `${result.code} - ${result.subCode} raised on PlayCoAPI.getPlaylistInfo`,\r\n                        result.code, false, result);\r\n                }\r\n            })\r\n    }\r\n\r\n    static deletePlaylist(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.url(playlistId), true)\r\n    }\r\n\r\n    static getPlaylistItems(playlistId: number) {\r\n        return (new FrostAPI())\r\n            .get(PlayCoAPI.itemUrl(playlistId), true)\r\n    }\r\n\r\n    static insertPlaylistItem(playlistId: number, itemUrl: string) {\r\n        return (new FrostAPI())\r\n            .post(PlayCoAPI.itemUrl(playlistId), { link: itemUrl }, true)\r\n    }\r\n\r\n    static movePlaylistItem(playlistId: number, itemIndex: number) {\r\n        return (new FrostAPI())\r\n            .patch(PlayCoAPI.itemUrl(playlistId, itemIndex), true)\r\n    }\r\n\r\n    static deletePlaylistItem(playlistId: number, itemIndex: number) {\r\n        return (new FrostAPI())\r\n            .delete(PlayCoAPI.itemUrl(playlistId, itemIndex), true)\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}