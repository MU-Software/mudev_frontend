{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\modal\\\\passwordChangeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst calculateIncludedCharType = str => {\n  const strType = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const currentChar = str.charAt(i);\n\n    if (currentChar >= '0' && currentChar <= '9') {\n      strType.push('n'); // number\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\n      strType.push('l'); // lower\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\n      strType.push('u'); // upper\n    } else if (currentChar >= ' ' && currentChar <= '~') {\n      strType.push('s'); // special char\n    } else {\n      strType.push('e'); // error or unknown\n    }\n  }\n\n  return new Set(strType);\n};\n\nexport const AccountPasswordChangeModal = props => {\n  _s();\n\n  const InputChecker = {\n    currentPw: str => {\n      if (!str) {\n        return {\n          success: false,\n          currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        currentPwNotUsableReason: null\n      };\n    },\n    newPw: str => {\n      if (!str) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호를 입력해주세요,'\n        };\n      } else if (str.length < 8) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,'\n        };\n      } else if (1024 < str.length) {\n        return {\n          success: false,\n          newPwNotUsableReason: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [`새 비밀번호로 ${str.length}자는 너어어어무 길어요!`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 63\n            }, this), \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB294 1024\\uC790 \\uC774\\uD558\\uB85C \\uD574 \\uC8FC\\uC2DC\\uACE0,\"]\n          }, void 0, true)\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,'\n        };\n      } else if (strType.size < 2) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\n        };\n      }\n\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    },\n    newPwReType: (pwStr, pwReTypeStr) => {\n      if (!pwReTypeStr) {\n        return {\n          success: false,\n          newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.'\n        };\n      } else if (pwStr === pwReTypeStr) {\n        return {\n          success: true,\n          newPwReTypeNotUsableReason: null\n        };\n      }\n\n      return {\n        success: false,\n        newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.'\n      };\n    }\n  };\n  const navigate = useNavigate();\n  const [passwordChangeModalState, setPasswordChangeModalState] = useState({\n    isProcessing: false,\n    currentPwTextFieldValue: '',\n    currentPwNotUsableReason: '',\n    newPwTextFieldValue: '',\n    newPwNotUsableReason: '',\n    newPwReTypeTextFieldValue: '',\n    newPwReTypeNotUsableReason: '',\n    pwChangeFailedReason: ''\n  });\n\n  const closeModalFunc = () => {\n    if (!passwordChangeModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const handleInputChange = valueName => e => {\n    const newModalState = { ...passwordChangeModalState,\n      [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    if (valueName === 'currentPwTextFieldValue') newModalState.currentPwNotUsableReason = '';else if (valueName === 'newPwTextFieldValue') newModalState.newPwNotUsableReason = '';else if (valueName === 'newPwReTypeTextFieldValue') newModalState.newPwReTypeNotUsableReason = '';\n    setPasswordChangeModalState(newModalState);\n  };\n\n  const doSubmittableCheck = () => {\n    if (passwordChangeModalState.currentPwTextFieldValue && passwordChangeModalState.newPwTextFieldValue && passwordChangeModalState.newPwReTypeTextFieldValue && passwordChangeModalState.currentPwTextFieldValue !== passwordChangeModalState.newPwTextFieldValue && passwordChangeModalState.newPwTextFieldValue === passwordChangeModalState.newPwReTypeTextFieldValue) return true;\n    return false;\n  };\n\n  const resetToOriginal = () => {\n    setPasswordChangeModalState({ ...passwordChangeModalState,\n      currentPwTextFieldValue: '',\n      currentPwNotUsableReason: '',\n      newPwTextFieldValue: '',\n      newPwNotUsableReason: '',\n      newPwReTypeTextFieldValue: '',\n      newPwReTypeNotUsableReason: ''\n    });\n  };\n\n  const tryAccountPasswordChange = () => {\n    let isRequestable = true;\n    setPasswordChangeModalState(prevState => ({ ...prevState,\n      isProcessing: true\n    }));\n    const newModalState = { ...passwordChangeModalState,\n      isProcessing: true\n    }; // trim all strings in states\n\n    for (const key in newModalState) if (typeof newModalState[key] === 'string') newModalState[key] = newModalState[key].trim();\n\n    if (!newModalState.currentPwTextFieldValue) {\n      newModalState.currentPwNotUsableReason = '현재 사용 중인 비밀번호를 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    if (!newModalState.newPwTextFieldValue) {\n      newModalState.newPwNotUsableReason = '새 비밀번호를 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    } else if (newModalState.newPwTextFieldValue === newModalState.currentPwTextFieldValue) {\n      newModalState.newPwNotUsableReason = '입력하신 새 비밀번호가 현재 사용 중으로 적은 비밀번호와 같아요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    if (!newModalState.newPwReTypeTextFieldValue) {\n      newModalState.newPwReTypeNotUsableReason = '위에 적으신 새 비밀번호를 다시 한번 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    } else if (newModalState.newPwTextFieldValue !== newModalState.newPwReTypeTextFieldValue) {\n      newModalState.newPwReTypeNotUsableReason = '다시 적으신 비밀번호가 새 비밀번호와 일치하지 않아요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    setPasswordChangeModalState(newModalState);\n\n    if (isRequestable) {// DO SERVER THING ON HERE\n    }\n  };\n\n  const isSubmittable = doSubmittableCheck();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: evt => evt.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uD604\\uC7AC \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"current-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uD604\\uC7AC \\uC0AC\\uC6A9 \\uC911\\uC778 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.currentPwTextFieldValue,\n            onChange: handleInputChange('currentPwTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.currentPwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"new-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPwTextFieldValue,\n            onChange: handleInputChange('newPwTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.newPwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"new-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPwReTypeTextFieldValue,\n            onChange: handleInputChange('newPwReTypeTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.newPwReTypeNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: passwordChangeModalState.pwChangeFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: resetToOriginal,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uCD08\\uAE30\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: tryAccountPasswordChange,\n        disabled: !isSubmittable,\n        showSpinner: passwordChangeModalState.isProcessing,\n        children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AccountPasswordChangeModal, \"5ajSO6sW+IUTB6SDxCE7s5AX2tQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AccountPasswordChangeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPasswordChangeModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/modal/passwordChangeModal.tsx"],"names":["React","useState","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountPasswordChangeModal","props","InputChecker","currentPw","success","currentPwNotUsableReason","newPw","newPwNotUsableReason","has","size","pwNotUsableReason","newPwReType","pwStr","pwReTypeStr","newPwReTypeNotUsableReason","navigate","passwordChangeModalState","setPasswordChangeModalState","isProcessing","currentPwTextFieldValue","newPwTextFieldValue","newPwReTypeTextFieldValue","pwChangeFailedReason","closeModalFunc","setModalShowState","handleInputChange","valueName","e","newModalState","target","type","checked","value","doSubmittableCheck","resetToOriginal","tryAccountPasswordChange","isRequestable","prevState","key","trim","isSubmittable","modalShowState","margin","evt","preventDefault","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountPasswordChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        currentPw: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                currentPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPw: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호를 입력해주세요,',\r\n                };\r\n            } else if (str.length < 8) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,',\r\n                };\r\n            } else if (1024 < str.length) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: <>\r\n                        {`새 비밀번호로 ${str.length}자는 너어어어무 길어요!`}<br />\r\n                        새 비밀번호는 1024자 이하로 해 주시고,\r\n                    </>\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(str);\r\n            if (strType.has('e')) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,',\r\n                };\r\n            } else if (strType.size < 2) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                pwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPwReType: (pwStr: string, pwReTypeStr: string) => {\r\n            if (!pwReTypeStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.',\r\n                };\r\n            } else if (pwStr === pwReTypeStr) {\r\n                return {\r\n                    success: true,\r\n                    newPwReTypeNotUsableReason: null,\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.',\r\n            };\r\n        },\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n    const [passwordChangeModalState, setPasswordChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    });\r\n\r\n    const closeModalFunc = () => {\r\n        if (!passwordChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const handleInputChange = (valueName) => (e) => {\r\n        const newModalState = {\r\n            ...passwordChangeModalState,\r\n            [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n        };\r\n        if (valueName === 'currentPwTextFieldValue')\r\n            newModalState.currentPwNotUsableReason = '';\r\n        else if (valueName === 'newPwTextFieldValue')\r\n            newModalState.newPwNotUsableReason = '';\r\n        else if (valueName === 'newPwReTypeTextFieldValue')\r\n            newModalState.newPwReTypeNotUsableReason = '';\r\n        setPasswordChangeModalState(newModalState);\r\n    };\r\n    const doSubmittableCheck = () => {\r\n        if (passwordChangeModalState.currentPwTextFieldValue\r\n            && passwordChangeModalState.newPwTextFieldValue\r\n            && passwordChangeModalState.newPwReTypeTextFieldValue\r\n            && passwordChangeModalState.currentPwTextFieldValue !== passwordChangeModalState.newPwTextFieldValue\r\n            && passwordChangeModalState.newPwTextFieldValue === passwordChangeModalState.newPwReTypeTextFieldValue)\r\n            return true;\r\n        return false;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setPasswordChangeModalState({\r\n            ...passwordChangeModalState,\r\n\r\n            currentPwTextFieldValue: '',\r\n            currentPwNotUsableReason: '',\r\n            newPwTextFieldValue: '',\r\n            newPwNotUsableReason: '',\r\n            newPwReTypeTextFieldValue: '',\r\n            newPwReTypeNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountPasswordChange = () => {\r\n        let isRequestable = true;\r\n\r\n        setPasswordChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        const newModalState = {\r\n            ...passwordChangeModalState,\r\n            isProcessing: true,\r\n        };\r\n        // trim all strings in states\r\n        for (const key in newModalState)\r\n            if (typeof (newModalState[key]) === 'string')\r\n                newModalState[key] = newModalState[key].trim();\r\n\r\n        if (!newModalState.currentPwTextFieldValue) {\r\n            newModalState.currentPwNotUsableReason = '현재 사용 중인 비밀번호를 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        if (!newModalState.newPwTextFieldValue) {\r\n            newModalState.newPwNotUsableReason = '새 비밀번호를 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        } else if (newModalState.newPwTextFieldValue === newModalState.currentPwTextFieldValue) {\r\n            newModalState.newPwNotUsableReason = '입력하신 새 비밀번호가 현재 사용 중으로 적은 비밀번호와 같아요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        if (!newModalState.newPwReTypeTextFieldValue) {\r\n            newModalState.newPwReTypeNotUsableReason = '위에 적으신 새 비밀번호를 다시 한번 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        } else if (newModalState.newPwTextFieldValue !== newModalState.newPwReTypeTextFieldValue) {\r\n            newModalState.newPwReTypeNotUsableReason = '다시 적으신 비밀번호가 새 비밀번호와 일치하지 않아요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        setPasswordChangeModalState(newModalState);\r\n\r\n        if (isRequestable) {\r\n            // DO SERVER THING ON HERE\r\n        }\r\n    };\r\n\r\n    const isSubmittable = doSubmittableCheck();\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    비밀번호 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>현재 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='current-password'\r\n                        placeholder='여기에 현재 사용 중인 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.currentPwTextFieldValue}\r\n                        onChange={handleInputChange('currentPwTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.currentPwNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 새로 사용하실 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwTextFieldValue}\r\n                        onChange={handleInputChange('newPwTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.newPwNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호 확인</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 위에 입력하신 새 비밀번호를 다시 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwReTypeTextFieldValue}\r\n                        onChange={handleInputChange('newPwReTypeTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.newPwReTypeNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <PHFormText>{passwordChangeModalState.pwChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                초기화\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountPasswordChange}\r\n                disabled={!isSubmittable}\r\n                showSpinner={passwordChangeModalState.isProcessing}>\r\n                비밀번호 변경\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}