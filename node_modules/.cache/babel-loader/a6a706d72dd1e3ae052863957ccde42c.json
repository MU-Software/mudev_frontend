{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Documents\\\\GitHub\\\\mudev_frontend\\\\src\\\\ui\\\\page\\\\account\\\\modal\\\\passwordChangeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport FrostAPI from 'src/network/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst calculateIncludedCharType = str => {\n  const strType = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const currentChar = str.charAt(i);\n\n    if (currentChar >= '0' && currentChar <= '9') {\n      strType.push('n'); // number\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\n      strType.push('l'); // lower\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\n      strType.push('u'); // upper\n    } else if (currentChar >= ' ' && currentChar <= '~') {\n      strType.push('s'); // special char\n    } else {\n      strType.push('e'); // error or unknown\n    }\n  }\n\n  return new Set(strType);\n};\n\nexport const AccountPasswordChangeModal = props => {\n  _s();\n\n  const InputChecker = {\n    currentPw: str => {\n      if (!str) {\n        return {\n          success: false,\n          currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        currentPwNotUsableReason: null\n      };\n    },\n    newPw: (currentPwStr, newPwStr) => {\n      if (!newPwStr) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호를 입력해주세요,\\n'\n        };\n      } else if (!currentPwStr) {\n        return {\n          success: false,\n          newPwNotUsableReason: '현재 사용 중인 비밀번호를 먼저 입력해주세요,\\n'\n        };\n      } else if (currentPwStr === newPwStr) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새로운 비밀번호가 현재 사용 중으로 적으신 비밀번호와 같아요,\\n' + '다른 비밀번호를 적어주세요.\\n'\n        };\n      } else if (newPwStr.length < 8) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,\\n'\n        };\n      } else if (1024 < newPwStr.length) {\n        return {\n          success: false,\n          newPwNotUsableReason: `새 비밀번호로 ${newPwStr.length}자는 너어어어무 길어요!\\n` + '새 비밀번호는 1024자 이하로 해 주시고,\\n'\n        };\n      }\n\n      const strType = calculateIncludedCharType(newPwStr);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,'\n        };\n      } else if (strType.size < 2) {\n        return {\n          success: false,\n          newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\n        };\n      }\n\n      return {\n        success: true,\n        newPwNotUsableReason: null\n      };\n    },\n    newPwReType: (pwStr, pwReTypeStr) => {\n      if (!pwReTypeStr) {\n        return {\n          success: false,\n          newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.'\n        };\n      } else if (pwStr === pwReTypeStr) {\n        return {\n          success: true,\n          newPwReTypeNotUsableReason: null\n        };\n      }\n\n      return {\n        success: false,\n        newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.'\n      };\n    }\n  };\n\n  const FrostErrorToPasswordChangeError = err => {\n    if (!err) return {\n      signUpFailedReason: null\n    };\n    if (err.route !== 'account/change-password') return {\n      signUpFailedReason: null\n    }; // We need to set Frost's error message(showMsg)\n    // to proper (currentPw|newPw|newPwReType)NotUsableReason field or pwChangeFailedReason.\n\n    const errShowMsg = err.message;\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'pwChangeFailedReason';\n    return {\n      [errFieldName]: errShowMsg\n    };\n  };\n\n  const passwordRuleText = '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.';\n  const navigate = useNavigate();\n  const [passwordChangeModalState, setPasswordChangeModalState] = useState({\n    isProcessing: false,\n    currentPwTextFieldValue: '',\n    currentPwNotUsableReason: '',\n    newPwTextFieldValue: '',\n    newPwNotUsableReason: '',\n    newPwReTypeTextFieldValue: '',\n    newPwReTypeNotUsableReason: '',\n    pwChangeFailedReason: ''\n  });\n  useEffect(() => setPasswordChangeModalState({ ...passwordChangeModalState,\n    currentPwTextFieldValue: '',\n    currentPwNotUsableReason: '',\n    newPwTextFieldValue: '',\n    newPwNotUsableReason: '',\n    newPwReTypeTextFieldValue: '',\n    newPwReTypeNotUsableReason: '',\n    pwChangeFailedReason: ''\n  }), [props.modalShowState]);\n\n  const closeModalFunc = () => {\n    if (!passwordChangeModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const getTrimmedState = modalState => {\n    const tempModalState = { ...(modalState !== null && modalState !== void 0 ? modalState : passwordChangeModalState)\n    };\n\n    for (const key in tempModalState) if (typeof tempModalState[key] === 'string') tempModalState[key] = tempModalState[key].trim();\n\n    return tempModalState;\n  };\n\n  const handleInputChange = fieldName => e => {\n    const fieldStateKey = `${fieldName}TextFieldValue`;\n    const fieldValue = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    let fieldCheckResult = undefined;\n\n    switch (fieldName) {\n      case 'newPw':\n        fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\n        break;\n\n      case 'newPwReType':\n        fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\n        break;\n\n      case 'currentPw':\n      default:\n        fieldCheckResult = InputChecker[fieldName](fieldValue);\n        break;\n    }\n\n    delete fieldCheckResult.success;\n    setPasswordChangeModalState(prevState => ({ ...prevState,\n      ...fieldCheckResult,\n      [fieldStateKey]: fieldValue\n    }));\n  };\n\n  const shouldSubmitBtnDisabled = () => {\n    if (passwordChangeModalState.isProcessing) return true;\n    const tempModalState = getTrimmedState();\n    let isFormCheckSuccess = true;\n    ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      let fieldCheckResult = undefined;\n\n      switch (fieldName) {\n        case 'newPw':\n          fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\n          break;\n\n        case 'newPwReType':\n          fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\n          break;\n\n        case 'currentPw':\n        default:\n          fieldCheckResult = InputChecker[fieldName](fieldValue);\n          break;\n      }\n\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        // And also, we are in a map function, so we cannot return directly here,\n        // we need to store the result somewhere outside of the function.\n        isFormCheckSuccess = fieldCheckResult.success;\n    });\n    return !isFormCheckSuccess;\n  };\n\n  const resetToOriginal = () => {\n    setPasswordChangeModalState({ ...passwordChangeModalState,\n      currentPwTextFieldValue: '',\n      currentPwNotUsableReason: '',\n      newPwTextFieldValue: '',\n      newPwNotUsableReason: '',\n      newPwReTypeTextFieldValue: '',\n      newPwReTypeNotUsableReason: ''\n    });\n  };\n\n  const tryAccountPasswordChange = () => {\n    // Trim all strings in states\n    const tempModalState = getTrimmedState();\n    setPasswordChangeModalState(prevState => ({ ...prevState,\n      ...tempModalState,\n      isProcessing: true\n    }));\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\n      const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\n      let fieldCheckResult = undefined;\n\n      switch (fieldName) {\n        case 'newPw':\n          fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\n          break;\n\n        case 'newPwReType':\n          fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\n          break;\n\n        case 'currentPw':\n        default:\n          fieldCheckResult = InputChecker[fieldName](fieldValue);\n          break;\n      }\n\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        // And also, we are in a map function, so we cannot return directly here,\n        // we need to store the result somewhere outside of the function.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    setPasswordChangeModalState(prevState => ({ ...prevState,\n      ...resultFormCheckData,\n      isProcessing: isFormCheckSuccess\n    }));\n    if (!isFormCheckSuccess) return;\n    new FrostAPI().changePassword(tempModalState.currentPwTextFieldValue, tempModalState.newPwTextFieldValue, tempModalState.newPwReTypeTextFieldValue).then(() => {\n      setPasswordChangeModalState(prevState => ({ ...prevState,\n        isProcessing: false\n      }));\n      alert('비밀번호가 변경되었습니다!');\n      closeModalFunc();\n    }, reason => {\n      setPasswordChangeModalState(prevState => ({ ...prevState,\n        isProcessing: false,\n        ...FrostErrorToPasswordChangeError(reason)\n      }));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: evt => evt.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uD604\\uC7AC \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"current-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uD604\\uC7AC \\uC0AC\\uC6A9 \\uC911\\uC778 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.currentPwTextFieldValue,\n            onChange: handleInputChange('currentPw')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.currentPwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"new-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPwTextFieldValue,\n            onChange: handleInputChange('newPw')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            defaultChildren: passwordRuleText,\n            children: passwordChangeModalState.newPwNotUsableReason ? passwordChangeModalState.newPwNotUsableReason + passwordRuleText : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"new-password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPwReTypeTextFieldValue,\n            onChange: handleInputChange('newPwReType')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.newPwReTypeNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: passwordChangeModalState.pwChangeFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: resetToOriginal,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uCD08\\uAE30\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: tryAccountPasswordChange,\n        disabled: shouldSubmitBtnDisabled(),\n        showSpinner: passwordChangeModalState.isProcessing,\n        children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AccountPasswordChangeModal, \"UrmBu4hxU7+K59pMeVVyU765790=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AccountPasswordChangeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPasswordChangeModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/page/account/modal/passwordChangeModal.tsx"],"names":["React","useState","useEffect","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","FrostAPI","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountPasswordChangeModal","props","InputChecker","currentPw","success","currentPwNotUsableReason","newPw","currentPwStr","newPwStr","newPwNotUsableReason","has","size","newPwReType","pwStr","pwReTypeStr","newPwReTypeNotUsableReason","FrostErrorToPasswordChangeError","err","signUpFailedReason","route","errShowMsg","message","errFieldName","fieldName","passwordRuleText","navigate","passwordChangeModalState","setPasswordChangeModalState","isProcessing","currentPwTextFieldValue","newPwTextFieldValue","newPwReTypeTextFieldValue","pwChangeFailedReason","modalShowState","closeModalFunc","setModalShowState","getTrimmedState","modalState","tempModalState","key","trim","handleInputChange","e","fieldStateKey","fieldValue","target","type","checked","value","fieldCheckResult","undefined","prevState","shouldSubmitBtnDisabled","isFormCheckSuccess","map","resetToOriginal","tryAccountPasswordChange","resultFormCheckData","changePassword","then","alert","reason","margin","evt","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport FrostAPI from 'src/network/api';\r\n\r\ninterface AccountPasswordChangeModalStateType {\r\n    isProcessing: boolean;\r\n\r\n    currentPwTextFieldValue: string;\r\n    currentPwNotUsableReason: string;\r\n    newPwTextFieldValue: string;\r\n    newPwNotUsableReason: string;\r\n    newPwReTypeTextFieldValue: string;\r\n    newPwReTypeNotUsableReason: string;\r\n    pwChangeFailedReason: string;\r\n}\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n    const strType: string[] = [];\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const currentChar = str.charAt(i);\r\n        if (currentChar >= '0' && currentChar <= '9') {\r\n            strType.push('n'); // number\r\n        } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n            strType.push('l'); // lower\r\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n            strType.push('u'); // upper\r\n        } else if (currentChar >= ' ' && currentChar <= '~') {\r\n            strType.push('s'); // special char\r\n        } else {\r\n            strType.push('e'); // error or unknown\r\n        }\r\n    }\r\n    return new Set(strType);\r\n};\r\n\r\nexport const AccountPasswordChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const InputChecker = {\r\n        currentPw: (str: string) => {\r\n            if (!str) {\r\n                return {\r\n                    success: false,\r\n                    currentPwNotUsableReason: '현재 사용 중인 비밀번호를 입력해주세요.',\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                currentPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPw: (currentPwStr: string, newPwStr: string) => {\r\n            if (!newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호를 입력해주세요,\\n',\r\n                };\r\n            } else if (!currentPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '현재 사용 중인 비밀번호를 먼저 입력해주세요,\\n',\r\n                };\r\n            } else if (currentPwStr === newPwStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        '새로운 비밀번호가 현재 사용 중으로 적으신 비밀번호와 같아요,\\n'\r\n                        + '다른 비밀번호를 적어주세요.\\n',\r\n                };\r\n            } else if (newPwStr.length < 8) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호의 길이가 너무 짧아요,\\n',\r\n                };\r\n            } else if (1024 < newPwStr.length) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason:\r\n                        `새 비밀번호로 ${newPwStr.length}자는 너어어어무 길어요!\\n`\r\n                        + '새 비밀번호는 1024자 이하로 해 주시고,\\n',\r\n                };\r\n            }\r\n\r\n            const strType = calculateIncludedCharType(newPwStr);\r\n            if (strType.has('e')) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새로운 비밀번호에 사용할 수 없는 글자가 포함되어 있어요,',\r\n                };\r\n            } else if (strType.size < 2) {\r\n                return {\r\n                    success: false,\r\n                    newPwNotUsableReason: '새 비밀번호가 너무 단순해요,'\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                newPwNotUsableReason: null,\r\n            };\r\n        },\r\n        newPwReType: (pwStr: string, pwReTypeStr: string) => {\r\n            if (!pwReTypeStr) {\r\n                return {\r\n                    success: false,\r\n                    newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호를 한번 더 입력해주세요.',\r\n                };\r\n            } else if (pwStr === pwReTypeStr) {\r\n                return {\r\n                    success: true,\r\n                    newPwReTypeNotUsableReason: null,\r\n                };\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                newPwReTypeNotUsableReason: '위에 입력하신 새 비밀번호와 일치하지 않아요.',\r\n            };\r\n        },\r\n    };\r\n    const FrostErrorToPasswordChangeError = (err: FrostError) => {\r\n        if (!err)\r\n            return { signUpFailedReason: null };\r\n        if (err.route !== 'account/change-password')\r\n            return { signUpFailedReason: null };\r\n        // We need to set Frost's error message(showMsg)\r\n        // to proper (currentPw|newPw|newPwReType)NotUsableReason field or pwChangeFailedReason.\r\n        const errShowMsg = err.message;\r\n        const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'pwChangeFailedReason';\r\n\r\n        return { [errFieldName]: errShowMsg, };\r\n    };\r\n\r\n    const passwordRuleText = '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.';\r\n\r\n    const navigate = useNavigate();\r\n    const [passwordChangeModalState, setPasswordChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    });\r\n    useEffect(() => setPasswordChangeModalState({\r\n        ...passwordChangeModalState,\r\n\r\n        currentPwTextFieldValue: '',\r\n        currentPwNotUsableReason: '',\r\n        newPwTextFieldValue: '',\r\n        newPwNotUsableReason: '',\r\n        newPwReTypeTextFieldValue: '',\r\n        newPwReTypeNotUsableReason: '',\r\n        pwChangeFailedReason: '',\r\n    }), [props.modalShowState]);\r\n\r\n    const closeModalFunc = () => {\r\n        if (!passwordChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n\r\n    const getTrimmedState = (modalState?: AccountPasswordChangeModalStateType) => {\r\n        const tempModalState: AccountPasswordChangeModalStateType = { ...(modalState ?? passwordChangeModalState), };\r\n        for (const key in tempModalState)\r\n            if (typeof (tempModalState[key]) === 'string')\r\n                tempModalState[key] = tempModalState[key].trim();\r\n\r\n        return tempModalState;\r\n    };\r\n    const handleInputChange = (fieldName: string) => (e: Event) => {\r\n        const fieldStateKey = `${fieldName}TextFieldValue`;\r\n        const fieldValue = (e.target.type === 'checkbox') ? e.target.checked : e.target.value;\r\n\r\n        let fieldCheckResult = undefined;\r\n        switch (fieldName) {\r\n            case 'newPw':\r\n                fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'newPwReType':\r\n                fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                break;\r\n            case 'currentPw':\r\n            default:\r\n                fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                break;\r\n        }\r\n        delete (fieldCheckResult.success);\r\n\r\n        setPasswordChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            ...fieldCheckResult,\r\n            [fieldStateKey]: fieldValue,\r\n        }));\r\n    };\r\n\r\n    const shouldSubmitBtnDisabled = () => {\r\n        if (passwordChangeModalState.isProcessing)\r\n            return true;\r\n\r\n        const tempModalState = getTrimmedState();\r\n        let isFormCheckSuccess = true;\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue: string = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n        });\r\n\r\n        return !isFormCheckSuccess;\r\n    };\r\n\r\n    const resetToOriginal = () => {\r\n        setPasswordChangeModalState({\r\n            ...passwordChangeModalState,\r\n\r\n            currentPwTextFieldValue: '',\r\n            currentPwNotUsableReason: '',\r\n            newPwTextFieldValue: '',\r\n            newPwNotUsableReason: '',\r\n            newPwReTypeTextFieldValue: '',\r\n            newPwReTypeNotUsableReason: '',\r\n        });\r\n    };\r\n    const tryAccountPasswordChange = () => {\r\n        // Trim all strings in states\r\n        const tempModalState = getTrimmedState();\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...tempModalState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        let isFormCheckSuccess = true;\r\n        let resultFormCheckData = {};\r\n        ['currentPw', 'newPw', 'newPwReType'].map(fieldName => {\r\n            const fieldValue = tempModalState[`${fieldName}TextFieldValue`];\r\n            let fieldCheckResult = undefined;\r\n            switch (fieldName) {\r\n                case 'newPw':\r\n                    fieldCheckResult = InputChecker['newPw'](passwordChangeModalState.currentPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'newPwReType':\r\n                    fieldCheckResult = InputChecker['newPwReType'](passwordChangeModalState.newPwTextFieldValue.trim(), fieldValue);\r\n                    break;\r\n                case 'currentPw':\r\n                default:\r\n                    fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n                    break;\r\n            }\r\n\r\n            if (isFormCheckSuccess)\r\n                // It's OK to set true to false, but false to true must not be happened.\r\n                // And also, we are in a map function, so we cannot return directly here,\r\n                // we need to store the result somewhere outside of the function.\r\n                isFormCheckSuccess = fieldCheckResult.success;\r\n\r\n            resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n        });\r\n        delete (resultFormCheckData.success);\r\n\r\n        setPasswordChangeModalState(prevState => ({\r\n            ...prevState,\r\n            ...resultFormCheckData,\r\n            isProcessing: isFormCheckSuccess,\r\n        }));\r\n\r\n        if (!isFormCheckSuccess)\r\n            return;\r\n\r\n        (new FrostAPI()).changePassword(\r\n            tempModalState.currentPwTextFieldValue,\r\n            tempModalState.newPwTextFieldValue,\r\n            tempModalState.newPwReTypeTextFieldValue)\r\n            .then(\r\n                () => {\r\n                    setPasswordChangeModalState(prevState => ({ ...prevState, isProcessing: false, }));\r\n                    alert('비밀번호가 변경되었습니다!');\r\n                    closeModalFunc();\r\n                },\r\n                (reason: FrostError) => {\r\n                    setPasswordChangeModalState(prevState => ({\r\n                        ...prevState,\r\n                        isProcessing: false,\r\n                        ...FrostErrorToPasswordChangeError(reason),\r\n                    }));\r\n                }\r\n            );\r\n    };\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    비밀번호 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>현재 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='current-password'\r\n                        placeholder='여기에 현재 사용 중인 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.currentPwTextFieldValue}\r\n                        onChange={handleInputChange('currentPw')} />\r\n                    <PHFormText>{passwordChangeModalState.currentPwNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 새로 사용하실 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwTextFieldValue}\r\n                        onChange={handleInputChange('newPw')} />\r\n                    <PHFormText defaultChildren={passwordRuleText}>\r\n                        {passwordChangeModalState.newPwNotUsableReason\r\n                            ? passwordChangeModalState.newPwNotUsableReason + passwordRuleText : ''}\r\n                    </PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호 확인</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        autoComplete='new-password'\r\n                        placeholder='여기에 위에 입력하신 새 비밀번호를 다시 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPwReTypeTextFieldValue}\r\n                        onChange={handleInputChange('newPwReType')} />\r\n                    <PHFormText>{passwordChangeModalState.newPwReTypeNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <PHFormText>{passwordChangeModalState.pwChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                초기화\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountPasswordChange}\r\n                disabled={shouldSubmitBtnDisabled()}\r\n                showSpinner={passwordChangeModalState.isProcessing}>\r\n                비밀번호 변경\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}