{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muButton.tsx\";\nimport React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport './muButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nexport const PHButton = props => {\n  var _ref;\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    disabled: props.disabled || false,\n    onClick: props.onClick,\n    size: (_ref = props.size === 'extra-sm' ? 'sm' : props.size) !== null && _ref !== void 0 ? _ref : 'sm',\n    style: props.smaller || props.size === 'extra-sm' ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {})\n    } : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {})\n    },\n    type: props.type || 'button',\n    variant: props.variant || 'outline-primary',\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n_c = PHButton;\nexport const PHSpinnerButton = () => /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false); // export const PHSpinnerButton = (inProps: PHSpinnerButtonPropTypes & PropTypes) => {\n//   const attrCollection = {\n//   };\n//   const props: PHSpinnerButtonPropTypes = Object.assign({}, inProps, {});\n//   // When props.showSpinner is true, we disable button and show spinner\n//   const shouldSpinnerShow = props.showSpinner || false;\n//   let btnChildElement = props.children || '\\u00A0';\n//   if (React.Children.count(btnChildElement) > 1)\n//     throw Error('PHSpinnerButton accepts only one element for the children.');\n//   // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n//   if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n//     btnChildElement = <div>{btnChildElement}</div>;\n//   if (shouldSpinnerShow) {\n//     attrCollection.disabled = true;\n//     if (props.setGrayWhenDisabled) {\n//       if ((props.variant || '').startsWith('outline-'))\n//         attrCollection.variant = 'outline-secondary';\n//       else\n//         attrCollection.variant = 'secondary';\n//     }\n//   }\n//   btnChildElement = React.cloneElement(btnChildElement, {\n//     style: {\n//       width: 'fit-content',\n//       height: 'fit-content',\n//       // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n//       opacity: shouldSpinnerShow ? '50%' : '100%',\n//     }\n//   });\n//   const spinnerElement = React.cloneElement(props.spinner || <Spinner animation=\"border\" role=\"status\">\n//     {/* visually-hidden is Bootstrap's. */}\n//     <span className=\"visually-hidden\">Loading...</span>\n//   </Spinner>, {\n//     style: {\n//       visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n//     }\n//   });\n//   return <PHButton {...props}>\n//     <div className='PHSpinnerButtonChildrenContainer'>\n//       {btnChildElement}\n//       <div className='PHSpinnerButtonSpinnerContainer'>\n//         {spinnerElement}\n//       </div>\n//     </div>\n//   </PHButton>\n// }\n\n_c2 = PHSpinnerButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PHButton\");\n$RefreshReg$(_c2, \"PHSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muButton.tsx"],"names":["React","Button","REACT_ELEMENT_TYPE","Symbol","for","PHButton","props","disabled","onClick","size","style","smaller","margin","width","height","padding","fontSize","type","variant","children","PHSpinnerButton"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,gBAAP;;;AAEA,MAAMC,kBAAkB,GAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,IAA8CD,MAAM,CAACC,GAAP,CAAW,eAAX,CAA/C,IAA+E,MAA1G;AAmBA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAA8B;AAAA;;AACpD,sBAAO,QAAC,MAAD;AACLC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QAAN,IAAkB,KADvB;AAELC,IAAAA,OAAO,EAAEF,KAAK,CAACE,OAFV;AAGLC,IAAAA,IAAI,UAAGH,KAAK,CAACG,IAAN,KAAe,UAAf,GAA4B,IAA5B,GAAmCH,KAAK,CAACG,IAA5C,uCAAqD,IAHpD;AAILC,IAAAA,KAAK,EAAGJ,KAAK,CAACK,OAAN,IAAiBL,KAAK,CAACG,IAAN,KAAe,UAAjC,GACH;AACAG,MAAAA,MAAM,EAAE,OAAO,KADf;AAEAC,MAAAA,KAAK,EAAEP,KAAK,CAACO,KAFb;AAGAC,MAAAA,MAAM,EAAER,KAAK,CAACQ,MAHd;AAIAC,MAAAA,OAAO,EAAE,cAJT;AAKAC,MAAAA,QAAQ,EAAE,OAAO,KALjB;AAMA,UAAIV,KAAK,CAACI,KAAN,IAAe,EAAnB;AANA,KADG,GASH;AACAE,MAAAA,MAAM,EAAE,OAAO,KADf;AAEAC,MAAAA,KAAK,EAAEP,KAAK,CAACO,KAFb;AAGAC,MAAAA,MAAM,EAAER,KAAK,CAACQ,MAHd;AAIA,UAAIR,KAAK,CAACI,KAAN,IAAe,EAAnB;AAJA,KAbC;AAmBLO,IAAAA,IAAI,EAAEX,KAAK,CAACW,IAAN,IAAc,QAnBf;AAoBLC,IAAAA,OAAO,EAAEZ,KAAK,CAACY,OAAN,IAAiB,iBApBrB;AAAA,cAsBJZ,KAAK,CAACa;AAtBF;AAAA;AAAA;AAAA;AAAA,UAAP;AAwBD,CAzBM;KAAMd,Q;AA2Bb,OAAO,MAAMe,eAAe,GAAG,mBAAM,qCAA9B,C,CAEP;AACA;AAEA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MA9DaA,e","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\ninterface PHButtonPropTypes {\n  width?: React.CSSProperties.width,\n  onClick?: React.MouseEvent<HTMLInputElement>,\n\n  variant?: string;\n  disabled?: boolean;\n  type?: string;\n  size?: string;\n  smaller?: boolean;\n}\n\ninterface PHSpinnerButtonPropTypes extends PHButtonPropTypes {\n  showSpinner: boolean;\n  spinner?: React.ComponentType;\n  setGrayWhenDisabled?: boolean;\n}\n\nexport const PHButton = (props: PHButtonPropTypes) => {\n  return <Button {...{\n    disabled: props.disabled || false,\n    onClick: props.onClick,\n    size: (props.size === 'extra-sm' ? 'sm' : props.size) ?? 'sm',\n    style: (props.smaller || props.size === 'extra-sm')\n      ? {\n        margin: 0.25 + 'rem',\n        width: props.width,\n        height: props.height,\n        padding: '0rem 0.25rem',\n        fontSize: 0.75 + 'rem',\n        ...(props.style || {}),\n      }\n      : {\n        margin: 0.25 + 'rem',\n        width: props.width,\n        height: props.height,\n        ...(props.style || {}),\n      },\n    type: props.type || 'button',\n    variant: props.variant || 'outline-primary',\n  }}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton = () => <></>\n\n// export const PHSpinnerButton = (inProps: PHSpinnerButtonPropTypes & PropTypes) => {\n//   const attrCollection = {\n\n//   };\n\n\n\n\n\n\n\n\n//   const props: PHSpinnerButtonPropTypes = Object.assign({}, inProps, {});\n\n//   // When props.showSpinner is true, we disable button and show spinner\n//   const shouldSpinnerShow = props.showSpinner || false;\n\n//   let btnChildElement = props.children || '\\u00A0';\n//   if (React.Children.count(btnChildElement) > 1)\n//     throw Error('PHSpinnerButton accepts only one element for the children.');\n\n//   // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n//   if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n//     btnChildElement = <div>{btnChildElement}</div>;\n\n//   if (shouldSpinnerShow) {\n//     attrCollection.disabled = true;\n//     if (props.setGrayWhenDisabled) {\n//       if ((props.variant || '').startsWith('outline-'))\n//         attrCollection.variant = 'outline-secondary';\n//       else\n//         attrCollection.variant = 'secondary';\n//     }\n//   }\n\n//   btnChildElement = React.cloneElement(btnChildElement, {\n//     style: {\n//       width: 'fit-content',\n//       height: 'fit-content',\n//       // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n//       opacity: shouldSpinnerShow ? '50%' : '100%',\n//     }\n//   });\n//   const spinnerElement = React.cloneElement(props.spinner || <Spinner animation=\"border\" role=\"status\">\n//     {/* visually-hidden is Bootstrap's. */}\n//     <span className=\"visually-hidden\">Loading...</span>\n//   </Spinner>, {\n//     style: {\n//       visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n//     }\n//   });\n\n//   return <PHButton {...props}>\n//     <div className='PHSpinnerButtonChildrenContainer'>\n//       {btnChildElement}\n//       <div className='PHSpinnerButtonSpinnerContainer'>\n//         {spinnerElement}\n//       </div>\n//     </div>\n//   </PHButton>\n// }\n"]},"metadata":{},"sourceType":"module"}