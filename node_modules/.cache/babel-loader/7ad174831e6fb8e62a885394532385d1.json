{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\element\\\\CustomSpinnerButton.jsx\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { PHButton } from 'src/ui/common/element/muButton';\nimport './CustomSpinnerButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nexport const CustomSpinnerButton = inProps => {\n  // TODO: MAYBE WE SHOULD NOT COPY PROPS LIKE THIS.\n  let props = Object.assign({}, inProps, {}); // When props.showSpinner is true, we disable button and show spinner\n\n  let shouldSpinnerShow = props.showSpinner || false;\n  delete props.showSpinner;\n\n  let spinnerElement = props.spinner || /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 41\n  }, this);\n\n  delete props.spinner;\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1) throw Error('CustomSpinnerButton accepts only one element for the children.');\n  delete props.children; // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n\n  if (!(typeof btnChildElement == 'object' && btnChildElement.$$typeof === REACT_ELEMENT_TYPE)) btnChildElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: btnChildElement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 23\n  }, this);\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').endsWith('-outline')) props.variant = 'secondary-outline';else props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = /*#__PURE__*/React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%'\n    }\n  });\n  spinnerElement = /*#__PURE__*/React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden'\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(PHButton, { ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CustomSpinnerButtonChildrenContainer\",\n      children: [btnChildElement, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CustomSpinnerButtonSpinnerContainer\",\n        children: spinnerElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n_c = CustomSpinnerButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/element/CustomSpinnerButton.jsx"],"names":["React","Button","Spinner","PHButton","REACT_ELEMENT_TYPE","Symbol","for","CustomSpinnerButton","inProps","props","Object","assign","shouldSpinnerShow","showSpinner","spinnerElement","spinner","btnChildElement","children","Children","count","Error","$$typeof","disabled","setGrayWhenDisabled","variant","endsWith","cloneElement","style","width","height","opacity","visibility"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,SAASC,QAAT,QAAyB,gCAAzB;AACA,OAAO,2BAAP;;AAEA,MAAMC,kBAAkB,GAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,IAA8CD,MAAM,CAACC,GAAP,CAAW,eAAX,CAA/C,IAA+E,MAA1G;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AAC9C;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,EAA2B,EAA3B,CAAZ,CAF8C,CAI9C;;AACA,MAAII,iBAAiB,GAAGH,KAAK,CAACI,WAAN,IAAqB,KAA7C;AACA,SAAQJ,KAAK,CAACI,WAAd;;AAEA,MAAIC,cAAc,GAAGL,KAAK,CAACM,OAAN,iBAAiB,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAAA,2BAEpC;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFoC;AAAA;AAAA;AAAA;AAAA,UAAtC;;AAIA,SAAQN,KAAK,CAACM,OAAd;AAEA,MAAIC,eAAe,GAAGP,KAAK,CAACQ,QAAN,IAAkB,QAAxC;AACA,MAAIjB,KAAK,CAACkB,QAAN,CAAeC,KAAf,CAAqBH,eAArB,IAAwC,CAA5C,EACE,MAAMI,KAAK,CAAC,gEAAD,CAAX;AACF,SAAQX,KAAK,CAACQ,QAAd,CAjB8C,CAoB9C;;AACA,MAAI,EAAE,OAAQD,eAAR,IAA4B,QAA5B,IAAyCA,eAAe,CAACK,QAAhB,KAA6BjB,kBAAxE,CAAJ,EACEY,eAAe,gBAAG;AAAA,cAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,UAAlB;;AAEF,MAAIJ,iBAAJ,EAAuB;AACrBH,IAAAA,KAAK,CAACa,QAAN,GAAiB,IAAjB;;AACA,QAAIb,KAAK,CAACc,mBAAV,EAA+B;AAC7B,UAAI,CAACd,KAAK,CAACe,OAAN,IAAiB,EAAlB,EAAsBC,QAAtB,CAA+B,UAA/B,CAAJ,EACEhB,KAAK,CAACe,OAAN,GAAgB,mBAAhB,CADF,KAGEf,KAAK,CAACe,OAAN,GAAgB,WAAhB;AACH;AACF;;AAEDR,EAAAA,eAAe,gBAAGhB,KAAK,CAAC0B,YAAN,CAAmBV,eAAnB,EAAoC;AACpDW,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,aADF;AAELC,MAAAA,MAAM,EAAE,aAFH;AAGL;AACAC,MAAAA,OAAO,EAAElB,iBAAiB,GAAG,KAAH,GAAW;AAJhC;AAD6C,GAApC,CAAlB;AAQAE,EAAAA,cAAc,gBAAGd,KAAK,CAAC0B,YAAN,CAAmBZ,cAAnB,EAAmC;AAClDa,IAAAA,KAAK,EAAE;AACLI,MAAAA,UAAU,EAAEnB,iBAAiB,GAAG,SAAH,GAAe;AADvC;AAD2C,GAAnC,CAAjB;AAMA,sBAAO,QAAC,QAAD,OAAcH,KAAd;AAAA,2BACL;AAAK,MAAA,SAAS,EAAC,sCAAf;AAAA,iBACGO,eADH,eAEE;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA,kBACGF;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,UAAP;AAQD,CAxDM;KAAMP,mB","sourcesContent":["import React from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { PHButton } from 'src/ui/common/element/muButton';\r\nimport './CustomSpinnerButton.css';\r\n\r\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\r\n\r\nexport const CustomSpinnerButton = (inProps) => {\r\n  // TODO: MAYBE WE SHOULD NOT COPY PROPS LIKE THIS.\r\n  let props = Object.assign({}, inProps, {});\r\n\r\n  // When props.showSpinner is true, we disable button and show spinner\r\n  let shouldSpinnerShow = props.showSpinner || false;\r\n  delete (props.showSpinner);\r\n\r\n  let spinnerElement = props.spinner || <Spinner animation=\"border\" role=\"status\">\r\n    {/* visually-hidden is Bootstrap's. */}\r\n    <span className=\"visually-hidden\">Loading...</span>\r\n  </Spinner>;\r\n  delete (props.spinner);\r\n\r\n  let btnChildElement = props.children || '\\u00A0';\r\n  if (React.Children.count(btnChildElement) > 1)\r\n    throw Error('CustomSpinnerButton accepts only one element for the children.');\r\n  delete (props.children);\r\n\r\n\r\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\r\n  if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\r\n    btnChildElement = <div>{btnChildElement}</div>;\r\n\r\n  if (shouldSpinnerShow) {\r\n    props.disabled = true;\r\n    if (props.setGrayWhenDisabled) {\r\n      if ((props.variant || '').endsWith('-outline'))\r\n        props.variant = 'secondary-outline';\r\n      else\r\n        props.variant = 'secondary';\r\n    }\r\n  }\r\n\r\n  btnChildElement = React.cloneElement(btnChildElement, {\r\n    style: {\r\n      width: 'fit-content',\r\n      height: 'fit-content',\r\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\r\n      opacity: shouldSpinnerShow ? '50%' : '100%',\r\n    }\r\n  });\r\n  spinnerElement = React.cloneElement(spinnerElement, {\r\n    style: {\r\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden',\r\n    }\r\n  });\r\n\r\n  return <PHButton {...props}>\r\n    <div className='CustomSpinnerButtonChildrenContainer'>\r\n      {btnChildElement}\r\n      <div className='CustomSpinnerButtonSpinnerContainer'>\r\n        {spinnerElement}\r\n      </div>\r\n    </div>\r\n  </PHButton>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}