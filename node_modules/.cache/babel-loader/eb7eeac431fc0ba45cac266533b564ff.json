{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\signin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FrostError } from 'src/common/error';\nimport { signInActionCreatorAsync, setForceAccountInfoActionCreator, setForceSignOutActionCreator } from 'src/redux/modules/account/action_creator';\nimport { AccountInfo } from 'src/redux/modules/account/model';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { CustomFormText } from './element/CustomFormText';\nimport './account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccountSignIn = () => {\n  _s();\n\n  const InputChecker = {\n    id: str => {\n      if (!str) return {\n        success: false,\n        idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.'\n      };\n      return {\n        success: true,\n        idNotUsableReason: null\n      };\n    },\n    pw: str => {\n      if (!str) return {\n        success: false,\n        pwNotUsableReason: '비밀번호를 입력해주세요.'\n      };\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    }\n  };\n\n  const FrostErrorToSignInError = err => {\n    if (!err) return {}; // We need to set Frost's error message(showMsg)\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\n\n    const errShowMsg = err.message;\n    const errFieldName = `${err.fieldName}NotUsableReason` || 'signInFailedReason';\n    return {\n      [errFieldName]: errShowMsg\n    };\n  };\n\n  const accountInfo = useSelector(state => state.accountReducer);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [signInFormData, setSignInFormData] = useState({\n    idTextFieldValue: '',\n    pwTextFieldValue: '',\n    idNotUsableReason: null,\n    pwNotUsableReason: null,\n    signInFailedReason: null,\n    isProcessing: false,\n    ...FrostErrorToSignInError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj)\n  });\n  useEffect(() => {\n    setSignInFormData({ ...signInFormData,\n      ...FrostErrorToSignInError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj)\n    });\n  }, [accountInfo]);\n\n  if (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isSignedIn) {\n    // Run below if user is signed in state.\n    setSignInFormData({ ...signInFormData,\n      isProcessing: false\n    });\n    navigate('/');\n  }\n\n  const trySignIn = () => {\n    // Disable all actions\n    let newSignInFormData = { ...signInFormData,\n      isProcessing: true\n    };\n\n    for (var key in newSignInFormData) // trim all strings in states\n    if (typeof newSignInFormData[key] === 'string') newSignInFormData[key] = newSignInFormData[key].trim();\n\n    setSignInFormData(newSignInFormData);\n    const checkRequiredFieldName = ['id', 'pw'];\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    checkRequiredFieldName.map(fieldName => {\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    newSignInFormData = { ...newSignInFormData,\n      ...resultFormCheckData\n    };\n    setSignInFormData(newSignInFormData);\n\n    if (!isFormCheckSuccess) {\n      newSignInFormData = { ...newSignInFormData,\n        isProcessing: false\n      };\n      setSignInFormData(newSignInFormData);\n      return false;\n    }\n\n    dispatch(signInActionCreatorAsync(newSignInFormData.idTextFieldValue, newSignInFormData.pwTextFieldValue)); // Run below if success\n    // navigate(-1);\n\n    setTimeout(() => setSignInFormData({ ...newSignInFormData,\n      isProcessing: false\n    }), 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"accountMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"accountAside\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formBasicEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC544\\uC774\\uB514 \\uB610\\uB294 \\uC774\\uBA54\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"ID / Email\",\n            disabled: signInFormData.isProcessing,\n            value: signInFormData.idTextFieldValue,\n            onChange: event => setSignInFormData({ ...signInFormData,\n              idTextFieldValue: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signInFormData.idNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formBasicPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n            disabled: signInFormData.isProcessing,\n            value: signInFormData.pwTextFieldValue,\n            onChange: event => setSignInFormData({ ...signInFormData,\n              pwTextFieldValue: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signInFormData.pwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n          className: \"accountAsideFormGroup\",\n          children: signInFormData.signInFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accountSubmitBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n            variant: \"primary\",\n            size: false,\n            style: {\n              margin: undefined\n            },\n            onClick: trySignIn,\n            showSpinner: signInFormData.isProcessing,\n            children: \"\\uB85C\\uADF8\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-light\",\n            disabled: signInFormData.isProcessing,\n            onClick: () => navigate('/account/signup'),\n            children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"signInGoToResetPassword\",\n          href: \"#\",\n          onClick: () => {\n            if (!signInFormData.isProcessing) navigate('/account/reset-password');\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC78A\\uC5B4\\uBC84\\uB9AC\\uC168\\uB098\\uC694?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountSignIn, \"fx98b5CLQAekzoAUGdMm8/bl5XM=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = AccountSignIn;\nexport { AccountSignIn };\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountSignIn\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/signin.jsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","FrostError","signInActionCreatorAsync","setForceAccountInfoActionCreator","setForceSignOutActionCreator","AccountInfo","Button","Form","PHSpinnerButton","CustomFormText","AccountSignIn","InputChecker","id","str","success","idNotUsableReason","pw","pwNotUsableReason","FrostErrorToSignInError","err","errShowMsg","message","errFieldName","fieldName","accountInfo","state","accountReducer","dispatch","navigate","signInFormData","setSignInFormData","idTextFieldValue","pwTextFieldValue","signInFailedReason","isProcessing","frostErrorObj","isSignedIn","trySignIn","newSignInFormData","key","trim","checkRequiredFieldName","isFormCheckSuccess","resultFormCheckData","map","fieldValue","fieldCheckResult","setTimeout","event","target","value","margin","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport {\r\n  signInActionCreatorAsync,\r\n  setForceAccountInfoActionCreator,\r\n  setForceSignOutActionCreator\r\n} from 'src/redux/modules/account/action_creator';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { CustomFormText } from './element/CustomFormText';\r\nimport './account.css';\r\n\r\nconst AccountSignIn = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str)\r\n        return { success: false, idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.', };\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str)\r\n        return { success: false, pwNotUsableReason: '비밀번호를 입력해주세요.', };\r\n\r\n      return { success: true, pwNotUsableReason: null, };\r\n    },\r\n  };\r\n\r\n  const FrostErrorToSignInError = (err: FrostError) => {\r\n    if (!err)\r\n      return {};\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = `${err.fieldName}NotUsableReason` || 'signInFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n  const [signInFormData, setSignInFormData] = useState({\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    signInFailedReason: null,\r\n    isProcessing: false,\r\n\r\n    ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n  });\r\n  useEffect(() => {\r\n    setSignInFormData({\r\n      ...signInFormData,\r\n      ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  if (accountInfo?.isSignedIn) {\r\n    // Run below if user is signed in state.\r\n    setSignInFormData({ ...signInFormData, isProcessing: false, });\r\n    navigate('/');\r\n  }\r\n\r\n  const trySignIn = () => {\r\n    // Disable all actions\r\n    let newSignInFormData = { ...signInFormData, isProcessing: true, };\r\n    for (var key in newSignInFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignInFormData[key]) === 'string')\r\n        newSignInFormData[key] = newSignInFormData[key].trim();\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'pw'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignInFormData = { ...newSignInFormData, ...resultFormCheckData, }\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignInFormData = { ...newSignInFormData, isProcessing: false, }\r\n      setSignInFormData(newSignInFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signInActionCreatorAsync(\r\n        newSignInFormData.idTextFieldValue,\r\n        newSignInFormData.pwTextFieldValue)\r\n    );\r\n\r\n    // Run below if success\r\n    // navigate(-1);\r\n    setTimeout(() => setSignInFormData({ ...newSignInFormData, isProcessing: false, }), 5000);\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>로그인</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>아이디 또는 이메일</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='ID / Email'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.idTextFieldValue}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                idTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <CustomFormText>{signInFormData.idNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='비밀번호'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.pwTextFieldValue}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                pwTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <CustomFormText>{signInFormData.pwNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <CustomFormText className='accountAsideFormGroup'>{signInFormData.signInFailedReason}</CustomFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignIn}\r\n            showSpinner={signInFormData.isProcessing}>\r\n            로그인\r\n          </PHSpinnerButton>\r\n\r\n          <Button\r\n            variant='outline-light'\r\n            disabled={signInFormData.isProcessing}\r\n            onClick={() => navigate('/account/signup')}>\r\n            계정 만들기\r\n          </Button>\r\n        </div><br />\r\n        <a\r\n          className='signInGoToResetPassword'\r\n          href='#'\r\n          onClick={() => {\r\n            if (!signInFormData.isProcessing) navigate('/account/reset-password')\r\n          }}>\r\n          비밀번호를 잊어버리셨나요?\r\n        </a>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n\r\nexport { AccountSignIn };\r\n"]},"metadata":{},"sourceType":"module"}