{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\playco\\\\element\\\\playlistCreateModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal, Button } from \"react-bootstrap\";\nimport Form from 'react-bootstrap/Form';\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton'; // import {\n//   ListRowLongTextType,\n//   L,\n//   ListRowInputType,\n//   ListRowButtonType,\n//   ListRow\n// } from 'src/ui/common/element/muListRow';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaylistCreateModal = props => {\n  _s();\n\n  const [playlistCreateModalState, setPlaylistCreateModalState] = useState({\n    isProcessing: false,\n    nameTextFieldValue: '',\n    nameNotUsableReason: '',\n    isPublicAccessable: false,\n    isPublicItemAppendable: false,\n    isPublicItemDeletable: false,\n    playlistCreationFailedReason: ''\n  });\n\n  const closeModalFunc = () => {\n    if (!playlistCreateModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const handleInputChange = valueName => e => {\n    let newPlaylistCreateModalState = { ...playlistCreateModalState,\n      [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    if (valueName === 'nameTextFieldValue') newPlaylistCreateModalState.nameNotUsableReason = '';\n    setPlaylistCreateModalState(newPlaylistCreateModalState);\n  };\n\n  const tryPlaylistCreate = () => {\n    let isRequestable = true;\n    let newPlaylistCreateModalState = { ...playlistCreateModalState,\n      isProcessing: true\n    }; // trim all strings in states\n\n    for (var key in newPlaylistCreateModalState) if (typeof newPlaylistCreateModalState[key] === 'string') newPlaylistCreateModalState[key] = newPlaylistCreateModalState[key].trim();\n\n    if (!newPlaylistCreateModalState.nameTextFieldValue) {\n      newPlaylistCreateModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\n      isRequestable = false;\n    }\n\n    setPlaylistCreateModalState(newPlaylistCreateModalState);\n\n    if (isRequestable) {//\n    }\n\n    console.log(playlistCreateModalState);\n    setTimeout(() => {\n      newPlaylistCreateModalState = { ...newPlaylistCreateModalState,\n        isProcessing: false\n      };\n      setPlaylistCreateModalState(newPlaylistCreateModalState);\n    }, 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    keyboard: false,\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC758 \\uC774\\uB984\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC0C8\\uB85C \\uB9CC\\uB4DC\\uC2E4 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC758 \\uC774\\uB984\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694\",\n            disabled: playlistCreateModalState.isProcessing,\n            value: playlistCreateModalState.nameTextFieldValue,\n            onChange: handleInputChange('nameTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: playlistCreateModalState.nameNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicAccessable'),\n            value: playlistCreateModalState.isPublicAccessable,\n            disabled: playlistCreateModalState.isProcessing,\n            id: \"isPublicAccessableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC744 \\uBCFC \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemAppendable'),\n            value: playlistCreateModalState.isPublicItemAppendable,\n            disabled: playlistCreateModalState.isProcessing,\n            id: \"isPublicItemAppendableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC5D0 \\uC601\\uC0C1\\uC744 \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemDeletable'),\n            value: playlistCreateModalState.isPublicItemDeletable,\n            disabled: playlistCreateModalState.isProcessing,\n            id: \"isPublicItemDeletableSwitch\",\n            label: \"\\uB2E4\\uB978 \\uC0AC\\uB78C\\uC774 \\uC7AC\\uC0DD\\uBAA9\\uB85D\\uC5D0\\uC11C \\uC601\\uC0C1\\uC744 \\uC0AD\\uC81C\\uD560 \\uC218 \\uC788\\uC5B4\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: playlistCreateModalState.playlistCreationFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: playlistCreateModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: tryPlaylistCreate,\n        showSpinner: playlistCreateModalState.isProcessing,\n        children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PlaylistCreateModal, \"FS3kgaHrK1QvgayigMfBXZIze6M=\");\n\n_c = PlaylistCreateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistCreateModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/element/playlistCreateModal.jsx"],"names":["React","useState","Modal","Button","Form","PHFormText","PHSpinnerButton","PlaylistCreateModal","props","playlistCreateModalState","setPlaylistCreateModalState","isProcessing","nameTextFieldValue","nameNotUsableReason","isPublicAccessable","isPublicItemAppendable","isPublicItemDeletable","playlistCreationFailedReason","closeModalFunc","setModalShowState","handleInputChange","valueName","e","newPlaylistCreateModalState","target","type","checked","value","tryPlaylistCreate","isRequestable","key","trim","console","log","setTimeout","modalShowState","margin","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\n// import {\r\n//   ListRowLongTextType,\r\n//   L,\r\n//   ListRowInputType,\r\n//   ListRowButtonType,\r\n//   ListRow\r\n// } from 'src/ui/common/element/muListRow';\r\n\r\ninterface PlaylistCreateModalPropTypes {\r\n  modalShowState: boolean;\r\n  setModalShowState: (boolean) => void;\r\n}\r\n\r\nexport const PlaylistCreateModal = (props: PlaylistCreateModalPropTypes) => {\r\n  const [playlistCreateModalState, setPlaylistCreateModalState] = useState({\r\n    isProcessing: false,\r\n\r\n    nameTextFieldValue: '',\r\n    nameNotUsableReason: '',\r\n    isPublicAccessable: false,\r\n    isPublicItemAppendable: false,\r\n    isPublicItemDeletable: false,\r\n    playlistCreationFailedReason: '',\r\n  });\r\n  const closeModalFunc = () => {\r\n    if (!playlistCreateModalState.isProcessing)\r\n      props.setModalShowState(false);\r\n  };\r\n  const handleInputChange = (valueName) => (e) => {\r\n    let newPlaylistCreateModalState = {\r\n      ...playlistCreateModalState,\r\n      [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n    };\r\n    if (valueName === 'nameTextFieldValue')\r\n      newPlaylistCreateModalState.nameNotUsableReason = '';\r\n    setPlaylistCreateModalState(newPlaylistCreateModalState);\r\n  }\r\n  const tryPlaylistCreate = () => {\r\n    let isRequestable = true;\r\n    let newPlaylistCreateModalState = {\r\n      ...playlistCreateModalState,\r\n      isProcessing: true,\r\n    };\r\n\r\n    // trim all strings in states\r\n    for (var key in newPlaylistCreateModalState)\r\n      if (typeof (newPlaylistCreateModalState[key]) === 'string')\r\n        newPlaylistCreateModalState[key] = newPlaylistCreateModalState[key].trim();\r\n\r\n    if (!newPlaylistCreateModalState.nameTextFieldValue) {\r\n      newPlaylistCreateModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\r\n      isRequestable = false;\r\n    }\r\n    setPlaylistCreateModalState(newPlaylistCreateModalState);\r\n\r\n    if (isRequestable) {\r\n      //\r\n    }\r\n    console.log(playlistCreateModalState);\r\n\r\n    setTimeout(() => {\r\n      newPlaylistCreateModalState = {\r\n        ...newPlaylistCreateModalState,\r\n        isProcessing: false,\r\n      };\r\n      setPlaylistCreateModalState(newPlaylistCreateModalState);\r\n    }, 5000);\r\n  }\r\n\r\n  return <Modal\r\n    show={props.modalShowState}\r\n    onHide={closeModalFunc}\r\n    backdrop='static'\r\n    keyboard={false}\r\n    aria-labelledby='contained-modal-title-vcenter'\r\n    centered >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title><h5 style={{ margin: 0, }}>재생목록 만들기</h5></Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>새 재생목록의 이름</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='새로 만드실 재생목록의 이름을 적어주세요'\r\n            disabled={playlistCreateModalState.isProcessing}\r\n            value={playlistCreateModalState.nameTextFieldValue}\r\n            onChange={handleInputChange('nameTextFieldValue')} />\r\n          <PHFormText>{playlistCreateModalState.nameNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 설정</Form.Label>\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicAccessable')}\r\n            value={playlistCreateModalState.isPublicAccessable}\r\n            disabled={playlistCreateModalState.isProcessing}\r\n            id='isPublicAccessableSwitch'\r\n            label='다른 사람이 재생목록을 볼 수 있어요.' />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemAppendable')}\r\n            value={playlistCreateModalState.isPublicItemAppendable}\r\n            disabled={playlistCreateModalState.isProcessing}\r\n            id='isPublicItemAppendableSwitch'\r\n            label='다른 사람이 재생목록에 영상을 추가할 수 있어요.' />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemDeletable')}\r\n            value={playlistCreateModalState.isPublicItemDeletable}\r\n            disabled={playlistCreateModalState.isProcessing}\r\n            id='isPublicItemDeletableSwitch'\r\n            label='다른 사람이 재생목록에서 영상을 삭제할 수 있어요.' />\r\n        </Form.Group>\r\n        <PHFormText>{playlistCreateModalState.playlistCreationFailedReason}</PHFormText>\r\n      </Form>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button\r\n        variant='secondary'\r\n        onClick={closeModalFunc}\r\n        disabled={playlistCreateModalState.isProcessing}>\r\n        취소\r\n      </Button>\r\n\r\n      <PHSpinnerButton\r\n        variant='primary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        onClick={tryPlaylistCreate}\r\n        showSpinner={playlistCreateModalState.isProcessing}>\r\n        재생목록 만들기\r\n      </PHSpinnerButton>\r\n    </Modal.Footer>\r\n  </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}