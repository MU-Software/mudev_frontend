{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\signin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FrostError } from 'src/common/error';\nimport { signInActionCreatorAsync, removeFrostErrorFromStateActionCreator } from 'src/redux/modules/account/action_creator';\nimport { AccountInfo } from 'src/redux/modules/account/model';\nimport { Form, Button } from 'react-bootstrap';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport './account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountSignIn = () => {\n  _s();\n\n  var _accountInfo$isFetchi;\n\n  const InputChecker = {\n    id: str => {\n      if (!str) return {\n        success: false,\n        idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.'\n      };\n      return {\n        success: true,\n        idNotUsableReason: null\n      };\n    },\n    pw: str => {\n      if (!str) return {\n        success: false,\n        pwNotUsableReason: '비밀번호를 입력해주세요.'\n      };\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    }\n  };\n\n  const FrostErrorToSignInError = err => {\n    if (!err) return {\n      signInFailedReason: null\n    };\n    if (err.route !== 'account/signin') return {\n      signUpFailedReason: null\n    }; // We need to set Frost's error message(showMsg)\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\n\n    const errShowMsg = err.message;\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'signInFailedReason';\n    return {\n      [errFieldName]: errShowMsg\n    };\n  };\n\n  const accountInfo = useSelector(state => state.accountReducer);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [signInFormData, setSignInFormData] = useState({\n    isProcessing: (_accountInfo$isFetchi = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isFetching) !== null && _accountInfo$isFetchi !== void 0 ? _accountInfo$isFetchi : false,\n    idTextFieldValue: '',\n    pwTextFieldValue: '',\n    idNotUsableReason: null,\n    pwNotUsableReason: null,\n    signInFailedReason: null,\n    ...FrostErrorToSignInError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj)\n  });\n  useEffect(() => {\n    var _accountInfo$isFetchi2;\n\n    setSignInFormData({ ...signInFormData,\n      ...FrostErrorToSignInError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj),\n      isProcessing: (_accountInfo$isFetchi2 = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isFetching) !== null && _accountInfo$isFetchi2 !== void 0 ? _accountInfo$isFetchi2 : false\n    });\n  }, [accountInfo]); // We need this to remove FrostErrorObj in state when this component mounts.\n\n  useEffect(() => dispatch(removeFrostErrorFromStateActionCreator()), []);\n  if (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isSignedIn) // Go to home if user is signed in state.\n    navigate('/');\n\n  const handleEnterInput = e => {\n    if (e.type === 'keypress' && e.charCode === 13) trySignIn();\n  };\n\n  const trySignIn = () => {\n    // Disable all actions\n    let newSignInFormData = { ...signInFormData,\n      isProcessing: true\n    };\n\n    for (var key in newSignInFormData) // trim all strings in states\n    if (typeof newSignInFormData[key] === 'string') newSignInFormData[key] = newSignInFormData[key].trim();\n\n    setSignInFormData(newSignInFormData);\n    const checkRequiredFieldName = ['id', 'pw'];\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    checkRequiredFieldName.map(fieldName => {\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    newSignInFormData = { ...newSignInFormData,\n      ...resultFormCheckData\n    };\n    setSignInFormData(newSignInFormData);\n\n    if (!isFormCheckSuccess) {\n      newSignInFormData = { ...newSignInFormData,\n        isProcessing: false\n      };\n      setSignInFormData(newSignInFormData);\n      return false;\n    }\n\n    dispatch(signInActionCreatorAsync(newSignInFormData.idTextFieldValue, newSignInFormData.pwTextFieldValue));\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"accountMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"accountAside\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formBasicEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC544\\uC774\\uB514 \\uB610\\uB294 \\uC774\\uBA54\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            autoComplete: \"username\",\n            placeholder: \"ID / Email\",\n            disabled: signInFormData.isProcessing,\n            value: signInFormData.idTextFieldValue,\n            onKeyPress: handleEnterInput,\n            onChange: event => setSignInFormData({ ...signInFormData,\n              idTextFieldValue: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signInFormData.idNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formBasicPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            autoComplete: \"current-password\",\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n            disabled: signInFormData.isProcessing,\n            value: signInFormData.pwTextFieldValue,\n            onKeyPress: handleEnterInput,\n            onChange: event => setSignInFormData({ ...signInFormData,\n              pwTextFieldValue: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signInFormData.pwNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          showOnlyNeeded: true,\n          className: \"accountAsideFormGroup\",\n          children: signInFormData.signInFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accountSubmitBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-light\",\n            disabled: signInFormData.isProcessing,\n            onClick: () => navigate('/account/signup'),\n            children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n            variant: \"info\",\n            size: false,\n            style: {\n              margin: undefined\n            },\n            onClick: trySignIn,\n            showSpinner: signInFormData.isProcessing,\n            children: \"\\uB85C\\uADF8\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"signInGoToResetPassword\",\n          href: \"#\",\n          onClick: !signInFormData.isProcessing ? () => navigate('/account/reset-password') : () => {\n            /**/\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC78A\\uC5B4\\uBC84\\uB9AC\\uC168\\uB098\\uC694?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountSignIn, \"r+TbCk9wTriDi9NJCU4dCbPP2tU=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = AccountSignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountSignIn\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/signin.jsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","FrostError","signInActionCreatorAsync","removeFrostErrorFromStateActionCreator","AccountInfo","Form","Button","PHSpinnerButton","PHFormText","AccountSignIn","InputChecker","id","str","success","idNotUsableReason","pw","pwNotUsableReason","FrostErrorToSignInError","err","signInFailedReason","route","signUpFailedReason","errShowMsg","message","errFieldName","fieldName","accountInfo","state","accountReducer","dispatch","navigate","signInFormData","setSignInFormData","isProcessing","isFetching","idTextFieldValue","pwTextFieldValue","frostErrorObj","isSignedIn","handleEnterInput","e","type","charCode","trySignIn","newSignInFormData","key","trim","checkRequiredFieldName","isFormCheckSuccess","resultFormCheckData","map","fieldValue","fieldCheckResult","event","target","value","margin","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport {\r\n  signInActionCreatorAsync,\r\n  removeFrostErrorFromStateActionCreator,\r\n} from 'src/redux/modules/account/action_creator';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nexport const AccountSignIn = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str)\r\n        return { success: false, idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.', };\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str)\r\n        return { success: false, pwNotUsableReason: '비밀번호를 입력해주세요.', };\r\n\r\n      return { success: true, pwNotUsableReason: null, };\r\n    },\r\n  };\r\n\r\n  const FrostErrorToSignInError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signInFailedReason: null };\r\n    if (err.route !== 'account/signin')\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'signInFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [signInFormData, setSignInFormData] = useState({\r\n    isProcessing: accountInfo?.isFetching ?? false,\r\n\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    signInFailedReason: null,\r\n\r\n    ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSignInFormData({\r\n      ...signInFormData,\r\n      ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n      isProcessing: accountInfo?.isFetching ?? false,\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  // We need this to remove FrostErrorObj in state when this component mounts.\r\n  useEffect(() => dispatch(removeFrostErrorFromStateActionCreator()), []);\r\n\r\n  if (accountInfo?.isSignedIn) // Go to home if user is signed in state.\r\n    navigate('/');\r\n\r\n  const handleEnterInput = (e) => {\r\n    if (e.type === 'keypress' && e.charCode === 13)\r\n      trySignIn();\r\n  }\r\n\r\n  const trySignIn = () => {\r\n    // Disable all actions\r\n    let newSignInFormData = { ...signInFormData, isProcessing: true, };\r\n    for (var key in newSignInFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignInFormData[key]) === 'string')\r\n        newSignInFormData[key] = newSignInFormData[key].trim();\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'pw'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignInFormData = { ...newSignInFormData, ...resultFormCheckData, }\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignInFormData = { ...newSignInFormData, isProcessing: false, }\r\n      setSignInFormData(newSignInFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signInActionCreatorAsync(\r\n        newSignInFormData.idTextFieldValue,\r\n        newSignInFormData.pwTextFieldValue)\r\n    );\r\n\r\n    return false;\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>로그인</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>아이디 또는 이메일</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            autoComplete='username'\r\n            placeholder='ID / Email'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.idTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                idTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.idNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            autoComplete='current-password'\r\n            placeholder='비밀번호'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.pwTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                pwTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.pwNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText showOnlyNeeded className='accountAsideFormGroup'>{signInFormData.signInFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-light'\r\n            disabled={signInFormData.isProcessing}\r\n            onClick={() => navigate('/account/signup')}>\r\n            계정 만들기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='info'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignIn}\r\n            showSpinner={signInFormData.isProcessing}>\r\n            로그인\r\n          </PHSpinnerButton>\r\n        </div><br />\r\n        <a\r\n          className='signInGoToResetPassword'\r\n          href='#'\r\n          onClick={(!signInFormData.isProcessing) ? () => navigate('/account/reset-password') : () => {/**/ }}>\r\n          비밀번호를 잊어버리셨나요?\r\n        </a>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}