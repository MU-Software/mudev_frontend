{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\signup.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { isEmail } from 'validator';\nimport { FrostError } from 'src/common/error';\nimport { AccountInfo } from 'src/redux/modules/account/model';\nimport { signUpActionCreatorAsync, removeFrostErrorFromStateActionCreator } from 'src/redux/modules/account/action_creator';\nimport { Form, Button } from 'react-bootstrap';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport './account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst calculateIncludedCharType = str => {\n  const strType = [];\n\n  for (var i = 0; i < str.length; i++) {\n    let currentChar = str.charAt(i);\n\n    if (currentChar >= '0' && currentChar <= '9') {\n      strType.push('n'); // number\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\n      strType.push('l'); // lower\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\n      strType.push('u'); // upper\n    } else if (currentChar >= ' ' && currentChar <= '~') {\n      strType.push('s'); // special char\n    } else {\n      strType.push('e'); // error or unknown\n    }\n  }\n\n  return new Set(strType);\n};\n\nexport const AccountSignUp = () => {\n  _s();\n\n  var _accountInfo$isFetchi;\n\n  const InputChecker = {\n    id: str => {\n      if (!str) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디를 입력해주세요.'\n        };\n      } else if (str.length < 4) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.'\n        };\n      } else if (48 < str.length) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.'\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        idNotUsableReason: null\n      };\n    },\n    email: str => {\n      if (!str) {\n        return {\n          success: false,\n          emailNotUsableReason: '이메일을 입력해주세요.'\n        };\n      }\n\n      if (!isEmail(str)) {\n        return {\n          success: false,\n          emailNotUsableReason: '올바르지 않은 이메일 형식이에요.'\n        };\n      }\n\n      return {\n        success: true,\n        emailNotUsableReason: null\n      };\n    },\n    nick: str => {\n      if (!str) {\n        return {\n          success: false,\n          nickNotUsableReason: '별칭을 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        nickNotUsableReason: null\n      };\n    },\n    pw: str => {\n      if (!str) {\n        return {\n          success: false,\n          pwNotUsableReason: '사용하실 비밀번호를 입력해주세요,'\n        };\n      } else if (str.length < 8) {\n        return {\n          success: false,\n          pwNotUsableReason: '길이가 너무 짧아요,'\n        };\n      } else if (1024 < str.length) {\n        return {\n          success: false,\n          pwNotUsableReason: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [`비밀번호로 ${str.length}자는 너어어어무 길어요!`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 49\n            }, this), \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 1024\\uC790 \\uC774\\uD558\\uB85C \\uD574 \\uC8FC\\uC2DC\\uACE0,\"]\n          }, void 0, true)\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          pwNotUsableReason: '비밀번호로 사용할 수 없는 글자가 포함되어 있어요,'\n        };\n      } else if (strType.size < 2) {\n        return {\n          success: false,\n          pwNotUsableReason: '비밀번호가 너무 단순해요,'\n        };\n      }\n\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    },\n    pwReType: (pwStr, pwReTypeStr) => {\n      if (!pwReTypeStr) {\n        return {\n          success: false,\n          pwReTypeNotUsableReason: '위에 입력하신 비밀번호를 한번 더 입력해주세요.'\n        };\n      } else if (pwStr === pwReTypeStr) {\n        return {\n          success: true,\n          pwReTypeNotUsableReason: null\n        };\n      }\n\n      return {\n        success: false,\n        pwReTypeNotUsableReason: '위에 입력하신 비밀번호와 일치하지 않아요.'\n      };\n    }\n  };\n\n  const FrostErrorToSignUpError = err => {\n    if (!err) return {\n      signUpFailedReason: null\n    }; // We need to set Frost's error message(showMsg)\n    // to proper (id|pw|email|nick)NotUsableReason field or signUpFailedReason.\n    // NOTE: I HATE THIS\n\n    const errShowMsg = err.message;\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'signUpFailedReason';\n    return {\n      [errFieldName]: errShowMsg\n    };\n  };\n\n  const accountInfo = useSelector(state => state.accountReducer);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [signUpFormData, setSignUpFormData] = useState({\n    wasUserSignedInWhenPageLoad: accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isSignedIn,\n    isSignedUpRequestFired: false,\n    isProcessing: (_accountInfo$isFetchi = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isFetching) !== null && _accountInfo$isFetchi !== void 0 ? _accountInfo$isFetchi : false,\n    idTextFieldValue: '',\n    pwTextFieldValue: '',\n    pwReTypeTextFieldValue: '',\n    emailTextFieldValue: '',\n    nickTextFieldValue: '',\n    idNotUsableReason: null,\n    nickNotUsableReason: null,\n    emailNotUsableReason: null,\n    pwNotUsableReason: null,\n    pwReTypeNotUsableReasonleReason: null,\n    signUpFailedReason: null,\n    ...FrostErrorToSignUpError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj)\n  });\n  useEffect(() => {\n    // We need this to remove FrostErrorObj in state when this component mounts.\n    dispatch(removeFrostErrorFromStateActionCreator());\n  }, []);\n  useEffect(() => {\n    var _accountInfo$isFetchi2;\n\n    setSignUpFormData({ ...signUpFormData,\n      ...(signUpFormData.isSignedUpRequestFired ? FrostErrorToSignUpError(accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.frostErrorObj) : {}),\n      isProcessing: (_accountInfo$isFetchi2 = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isFetching) !== null && _accountInfo$isFetchi2 !== void 0 ? _accountInfo$isFetchi2 : false,\n      wasUserSignedInWhenPageLoad: signUpFormData.wasUserSignedInWhenPageLoad === undefined ? accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isSignedIn : signUpFormData.wasUserSignedInWhenPageLoad\n    });\n  }, [accountInfo]);\n\n  if (signUpFormData.wasUserSignedInWhenPageLoad === undefined) {// This is loading state, wait for the new state.\n  } else if (signUpFormData.wasUserSignedInWhenPageLoad) {\n    // Go to home if user was signed in state when page loads.\n    navigate('/');\n  } else if (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.isSignedIn) {\n    // Go to welcome page when user successfully signed up.\n    navigate('/account/welcome-to-mudev', {\n      state: {\n        email: signUpFormData.emailTextFieldValue\n      }\n    });\n  }\n\n  const handleInput = (fieldName, fieldValue) => {\n    const fieldStateKey = `${fieldName}TextFieldValue`;\n    const checkerResult = fieldName === 'pwReType' ? InputChecker[fieldName](signUpFormData.pwTextFieldValue, fieldValue) : InputChecker[fieldName](fieldValue);\n    delete checkerResult.success;\n    setSignUpFormData({ ...signUpFormData,\n      ...checkerResult,\n      [fieldStateKey]: fieldValue\n    });\n  };\n\n  const trySignUp = () => {\n    // Disable all actions\n    let newSignUpFormData = { ...signUpFormData,\n      isSignedUpRequestFired: true,\n      isProcessing: true\n    };\n\n    for (var key in newSignUpFormData) // trim all strings in states\n    if (typeof newSignUpFormData[key] === 'string') newSignUpFormData[key] = newSignUpFormData[key].trim();\n\n    setSignUpFormData(newSignUpFormData);\n    const checkRequiredFieldName = ['id', 'nick', 'email', 'pw', 'pwReType'];\n    let isFormCheckSuccess = true;\n    let resultFormCheckData = {};\n    checkRequiredFieldName.map(fieldName => {\n      const fieldValue = newSignUpFormData[`${fieldName}TextFieldValue`];\n      const fieldCheckResult = fieldName === 'pwReType' ? InputChecker[fieldName](newSignUpFormData.pwTextFieldValue, fieldValue) : InputChecker[fieldName](fieldValue);\n      if (isFormCheckSuccess) // It's OK to set true to false, but false to true must not be happened.\n        isFormCheckSuccess = fieldCheckResult.success;\n      resultFormCheckData = { ...resultFormCheckData,\n        ...fieldCheckResult\n      };\n    });\n    delete resultFormCheckData.success;\n    newSignUpFormData = { ...newSignUpFormData,\n      ...resultFormCheckData\n    };\n    setSignUpFormData(newSignUpFormData);\n\n    if (!isFormCheckSuccess) {\n      newSignUpFormData = { ...newSignUpFormData,\n        isProcessing: false\n      };\n      setSignUpFormData(newSignUpFormData);\n      return false;\n    }\n\n    dispatch(signUpActionCreatorAsync(newSignUpFormData.idTextFieldValue, newSignUpFormData.emailTextFieldValue, newSignUpFormData.nickTextFieldValue, newSignUpFormData.pwTextFieldValue));\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"accountMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"accountAside\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpId\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC544\\uC774\\uB514\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            autoComplete: \"username\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.idTextFieldValue,\n            onChange: event => handleInput('id', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signUpFormData.idNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpNick\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBCC4\\uCE6D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uBCC4\\uCE6D\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            autoComplete: \"nickname\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.nickTextFieldValue,\n            onChange: event => handleInput('nick', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signUpFormData.nickNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC774\\uBA54\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"someone@example.com\",\n            autoComplete: \"email\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.emailTextFieldValue,\n            onChange: event => handleInput('email', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signUpFormData.emailNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n            autoComplete: \"new-password\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.pwTextFieldValue,\n            onChange: event => handleInput('pw', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            defaultChildren: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 8\\uC790 \\uC774\\uC0C1, \\uB300\\uC18C\\uBB38\\uC790/\\uC22B\\uC790/\\uD2B9\\uC218\\uBB38\\uC790 \\uC911 2\\uAC00\\uC9C0 \\uC774\\uC0C1\\uC758 \\uC870\\uD569\\uC73C\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n            children: signUpFormData.pwNotUsableReason ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [signUpFormData.pwNotUsableReason, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 51\n              }, this), \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 8\\uC790 \\uC774\\uC0C1, \\uB300\\uC18C\\uBB38\\uC790/\\uC22B\\uC790/\\uD2B9\\uC218\\uBB38\\uC790 \\uC911 2\\uAC00\\uC9C0 \\uC774\\uC0C1\\uC758 \\uC870\\uD569\\uC73C\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"]\n            }, void 0, true) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpPasswordReType\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            autoComplete: \"new-password\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.pwReTypeTextFieldValue,\n            onChange: event => handleInput('pwReType', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: signUpFormData.pwReTypeNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          className: \"accountAsideFormGroup\",\n          children: signUpFormData.signUpFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accountSubmitBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-light\",\n            disabled: signUpFormData.isProcessing,\n            onClick: () => navigate('/account/signin'),\n            children: \"\\uB85C\\uADF8\\uC778\\uD558\\uB7EC \\uAC00\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n            variant: \"info\" // type='submit'\n            ,\n            size: false,\n            style: {\n              margin: undefined\n            },\n            onClick: trySignUp,\n            showSpinner: signUpFormData.isProcessing,\n            children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountSignUp, \"nQqYVq61rjGPoR0FrBZra2r9Dwk=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n\n_c = AccountSignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountSignUp\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/signup.jsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","isEmail","FrostError","AccountInfo","signUpActionCreatorAsync","removeFrostErrorFromStateActionCreator","Form","Button","PHSpinnerButton","PHFormText","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountSignUp","InputChecker","id","success","idNotUsableReason","has","email","emailNotUsableReason","nick","nickNotUsableReason","pw","pwNotUsableReason","size","pwReType","pwStr","pwReTypeStr","pwReTypeNotUsableReason","FrostErrorToSignUpError","err","signUpFailedReason","errShowMsg","message","errFieldName","fieldName","accountInfo","state","accountReducer","dispatch","navigate","signUpFormData","setSignUpFormData","wasUserSignedInWhenPageLoad","isSignedIn","isSignedUpRequestFired","isProcessing","isFetching","idTextFieldValue","pwTextFieldValue","pwReTypeTextFieldValue","emailTextFieldValue","nickTextFieldValue","pwReTypeNotUsableReasonleReason","frostErrorObj","undefined","handleInput","fieldValue","fieldStateKey","checkerResult","trySignUp","newSignUpFormData","key","trim","checkRequiredFieldName","isFormCheckSuccess","resultFormCheckData","map","fieldCheckResult","event","target","value","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { isEmail } from 'validator';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\nimport {\r\n  signUpActionCreatorAsync,\r\n  removeFrostErrorFromStateActionCreator,\r\n} from 'src/redux/modules/account/action_creator';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n  const strType: string[] = [];\r\n\r\n  for (var i = 0; i < str.length; i++) {\r\n    let currentChar = str.charAt(i);\r\n    if (currentChar >= '0' && currentChar <= '9') {\r\n      strType.push('n'); // number\r\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n      strType.push('l'); // lower\r\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n      strType.push('u'); // upper\r\n    } else if (currentChar >= ' ' && currentChar <= '~') {\r\n      strType.push('s'); // special char\r\n    } else {\r\n      strType.push('e'); // error or unknown\r\n    }\r\n  }\r\n  return new Set(strType);\r\n}\r\n\r\nexport const AccountSignUp = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디를 입력해주세요.',\r\n        };\r\n      } else if (str.length < 4) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n        };\r\n      } else if (48 < str.length) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e')) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    email: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '이메일을 입력해주세요.',\r\n        };\r\n      }\r\n      if (!isEmail(str)) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '올바르지 않은 이메일 형식이에요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        emailNotUsableReason: null,\r\n      };\r\n    },\r\n    nick: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          nickNotUsableReason: '별칭을 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        nickNotUsableReason: null,\r\n      };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '사용하실 비밀번호를 입력해주세요,',\r\n        };\r\n      } else if (str.length < 8) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '길이가 너무 짧아요,',\r\n        };\r\n      } else if (1024 < str.length) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: <>\r\n            {`비밀번호로 ${str.length}자는 너어어어무 길어요!`}<br />\r\n            비밀번호는 1024자 이하로 해 주시고,\r\n          </>\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e')) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호로 사용할 수 없는 글자가 포함되어 있어요,',\r\n        };\r\n      } else if (strType.size < 2) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호가 너무 단순해요,'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        pwNotUsableReason: null,\r\n      };\r\n    },\r\n    pwReType: (pwStr: string, pwReTypeStr: string) => {\r\n      if (!pwReTypeStr) {\r\n        return {\r\n          success: false,\r\n          pwReTypeNotUsableReason: '위에 입력하신 비밀번호를 한번 더 입력해주세요.',\r\n        };\r\n      } else if (pwStr === pwReTypeStr) {\r\n        return {\r\n          success: true,\r\n          pwReTypeNotUsableReason: null,\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        pwReTypeNotUsableReason: '위에 입력하신 비밀번호와 일치하지 않아요.',\r\n      };\r\n    },\r\n  };\r\n  const FrostErrorToSignUpError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signUpFailedReason.\r\n    // NOTE: I HATE THIS\r\n    const errShowMsg = err.message;\r\n    const errFieldName = (err.fieldName) ? `${err.fieldName}NotUsableReason` : 'signUpFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [signUpFormData, setSignUpFormData] = useState({\r\n    wasUserSignedInWhenPageLoad: accountInfo?.isSignedIn,\r\n    isSignedUpRequestFired: false,\r\n    isProcessing: accountInfo?.isFetching ?? false,\r\n\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n    pwReTypeTextFieldValue: '',\r\n    emailTextFieldValue: '',\r\n    nickTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    nickNotUsableReason: null,\r\n    emailNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    pwReTypeNotUsableReasonleReason: null,\r\n    signUpFailedReason: null,\r\n\r\n    ...(FrostErrorToSignUpError(accountInfo?.frostErrorObj)),\r\n  });\r\n\r\n  useEffect(() => {\r\n    // We need this to remove FrostErrorObj in state when this component mounts.\r\n    dispatch(removeFrostErrorFromStateActionCreator());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      ...(signUpFormData.isSignedUpRequestFired ? FrostErrorToSignUpError(accountInfo?.frostErrorObj) : {}),\r\n      isProcessing: accountInfo?.isFetching ?? false,\r\n      wasUserSignedInWhenPageLoad: (signUpFormData.wasUserSignedInWhenPageLoad === undefined)\r\n        ? accountInfo?.isSignedIn : signUpFormData.wasUserSignedInWhenPageLoad,\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  if (signUpFormData.wasUserSignedInWhenPageLoad === undefined) {\r\n    // This is loading state, wait for the new state.\r\n  } else if (signUpFormData.wasUserSignedInWhenPageLoad) {\r\n    // Go to home if user was signed in state when page loads.\r\n    navigate('/');\r\n  } else if (accountInfo?.isSignedIn) {\r\n    // Go to welcome page when user successfully signed up.\r\n    navigate('/account/welcome-to-mudev', { state: { email: signUpFormData.emailTextFieldValue, } });\r\n  }\r\n\r\n  const handleInput = (fieldName: string, fieldValue: string) => {\r\n    const fieldStateKey = `${fieldName}TextFieldValue`;\r\n    const checkerResult = (fieldName === 'pwReType')\r\n      ? InputChecker[fieldName](signUpFormData.pwTextFieldValue, fieldValue)\r\n      : InputChecker[fieldName](fieldValue);\r\n    delete (checkerResult.success);\r\n\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      ...checkerResult,\r\n      [fieldStateKey]: fieldValue,\r\n    });\r\n  };\r\n  const trySignUp = () => {\r\n    // Disable all actions\r\n    let newSignUpFormData = {\r\n      ...signUpFormData,\r\n      isSignedUpRequestFired: true,\r\n      isProcessing: true,\r\n    }\r\n    for (var key in newSignUpFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignUpFormData[key]) === 'string')\r\n        newSignUpFormData[key] = newSignUpFormData[key].trim();\r\n    setSignUpFormData(newSignUpFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'nick', 'email', 'pw', 'pwReType'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = newSignUpFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = (fieldName === 'pwReType')\r\n        ? InputChecker[fieldName](newSignUpFormData.pwTextFieldValue, fieldValue)\r\n        : InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignUpFormData = { ...newSignUpFormData, ...resultFormCheckData, }\r\n    setSignUpFormData(newSignUpFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignUpFormData = { ...newSignUpFormData, isProcessing: false, }\r\n      setSignUpFormData(newSignUpFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signUpActionCreatorAsync(\r\n        newSignUpFormData.idTextFieldValue,\r\n        newSignUpFormData.emailTextFieldValue,\r\n        newSignUpFormData.nickTextFieldValue,\r\n        newSignUpFormData.pwTextFieldValue)\r\n    );\r\n\r\n    return false;\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 만들기</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpId'>\r\n          <Form.Label>아이디</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='아이디를 입력해주세요'\r\n            autoComplete='username'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.idTextFieldValue}\r\n            onChange={(event) => handleInput('id', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.idNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpNick'>\r\n          <Form.Label>별칭</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='별칭을 입력해주세요'\r\n            autoComplete='nickname'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.nickTextFieldValue}\r\n            onChange={(event) => handleInput('nick', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.nickNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpEmail'>\r\n          <Form.Label>이메일</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='someone@example.com'\r\n            autoComplete='email'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.emailTextFieldValue}\r\n            onChange={(event) => handleInput('email', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.emailNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='비밀번호'\r\n            autoComplete='new-password'\r\n\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwTextFieldValue}\r\n            onChange={(event) => handleInput('pw', event.target.value)}\r\n          />\r\n          <PHFormText defaultChildren='비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.'>\r\n            {signUpFormData.pwNotUsableReason\r\n              ? <>\r\n                {signUpFormData.pwNotUsableReason}<br />\r\n                비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.\r\n              </> : ''}\r\n          </PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPasswordReType'>\r\n          <Form.Label>비밀번호 확인</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='위에 입력하신 비밀번호를 다시 입력해주세요'\r\n            autoComplete='new-password'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwReTypeTextFieldValue}\r\n            onChange={(event) => handleInput('pwReType', event.target.value)}\r\n          />\r\n          <PHFormText>{signUpFormData.pwReTypeNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText className='accountAsideFormGroup'>{signUpFormData.signUpFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-light'\r\n            disabled={signUpFormData.isProcessing}\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='info'\r\n            // type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignUp}\r\n            showSpinner={signUpFormData.isProcessing}>\r\n            계정 만들기\r\n          </PHSpinnerButton>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}