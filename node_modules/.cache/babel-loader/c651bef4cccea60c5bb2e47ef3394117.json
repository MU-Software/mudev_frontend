{"ast":null,"code":"import { Dispatch } from 'redux';\nimport { FrostError } from 'src/common/error';\nimport FrostAPI from '../../../network/api';\nimport { ACCOUNT_FETCHING, SIGNED_IN, SIGNED_OUT } from './action';\nimport { AccountInfo } from './model';\nexport const setForceAccountInfoActionCreator = accountInfo => {\n  return {\n    type: SIGNED_IN,\n    accountInfo: accountInfo\n  };\n};\nexport const setForceSignOutActionCreator = () => {\n  return {\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false\n    })\n  };\n};\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().signIn(idOrEmail, password).then(result => dispatch(() => ({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  })), reason => dispatch(() => ({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  })));\n};\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().signUp(id, email, password, nick).then(result => dispatch(() => ({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  })), reason => dispatch(() => ({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  })));\n};\nexport const signOutActionCreatorAsync = () => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().signOut().finally(() => dispatch(() => ({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false\n    })\n  })));\n};\nexport const refreshAccessTokenActionCreatorAsync = () => async dispatch => {\n  dispatch({\n    type: ACCOUNT_FETCHING\n  });\n  new FrostAPI().refreshAuthentications().then(result => dispatch(() => ({\n    type: SIGNED_IN,\n    accountInfo: new AccountInfo({\n      isSignedIn: true,\n      uuid: result.userData.uuid,\n      id: result.userData.id,\n      nick: result.userData.nickname,\n      email: result.userData.email\n    })\n  })), reason => dispatch(() => ({\n    type: SIGNED_OUT,\n    accountInfo: new AccountInfo({\n      isSignedIn: false,\n      frostErrorObj: reason\n    })\n  })));\n};","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/redux/modules/account/action_creator.js"],"names":["Dispatch","FrostError","FrostAPI","ACCOUNT_FETCHING","SIGNED_IN","SIGNED_OUT","AccountInfo","setForceAccountInfoActionCreator","accountInfo","type","setForceSignOutActionCreator","isSignedIn","signInActionCreatorAsync","idOrEmail","password","dispatch","signIn","then","result","uuid","userData","id","nick","nickname","email","reason","frostErrorObj","signUpActionCreatorAsync","signUp","signOutActionCreatorAsync","signOut","finally","refreshAccessTokenActionCreatorAsync","refreshAuthentications"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\r\nimport { FrostError } from 'src/common/error';\r\nimport FrostAPI from '../../../network/api';\r\n\r\nimport {\r\n    ACCOUNT_FETCHING,\r\n    SIGNED_IN,\r\n    SIGNED_OUT,\r\n} from './action';\r\nimport { AccountInfo } from './model';\r\n\r\nexport const setForceAccountInfoActionCreator = (accountInfo: AccountInfo) => {\r\n    return {\r\n        type: SIGNED_IN,\r\n        accountInfo: accountInfo,\r\n    }\r\n}\r\n\r\nexport const setForceSignOutActionCreator = () => {\r\n    return {\r\n        type: SIGNED_OUT,\r\n        accountInfo: new AccountInfo({ isSignedIn: false }),\r\n    }\r\n}\r\n\r\nexport const signInActionCreatorAsync = (idOrEmail, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI()).signIn(idOrEmail, password).then(\r\n        (result: FrostAPI) => dispatch(() => ({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n            }),\r\n        })),\r\n        (reason: FrostError) => dispatch(() => ({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        })),\r\n    );\r\n}\r\n\r\nexport const signUpActionCreatorAsync = (id, email, nick, password) => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI()).signUp(id, email, password, nick).then(\r\n        (result: FrostAPI) => dispatch(() => ({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n            }),\r\n        })),\r\n        (reason: FrostError) => dispatch(() => ({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        })),\r\n    );\r\n}\r\n\r\nexport const signOutActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI()).signOut().finally(\r\n        () => dispatch(() => ({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({ isSignedIn: false }),\r\n        }))\r\n    );\r\n}\r\n\r\nexport const refreshAccessTokenActionCreatorAsync = () => async dispatch => {\r\n    dispatch({ type: ACCOUNT_FETCHING });\r\n    (new FrostAPI()).refreshAuthentications().then(\r\n        (result: FrostAPI) => dispatch(() => ({\r\n            type: SIGNED_IN,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: true,\r\n                uuid: result.userData.uuid,\r\n                id: result.userData.id,\r\n                nick: result.userData.nickname,\r\n                email: result.userData.email,\r\n            }),\r\n        })),\r\n        (reason: FrostError) => dispatch(() => ({\r\n            type: SIGNED_OUT,\r\n            accountInfo: new AccountInfo({\r\n                isSignedIn: false,\r\n                frostErrorObj: reason,\r\n            }),\r\n        })),\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}