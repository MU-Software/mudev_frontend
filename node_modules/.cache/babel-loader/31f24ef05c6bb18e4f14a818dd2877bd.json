{"ast":null,"code":"// (c) MUsoftware 2022\n'use strict';import _slicedToArray from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/createClass\";import _classPrivateFieldLooseBase from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";import _classPrivateFieldLooseKey from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";import _toConsumableArray from\"C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{FrostError}from'../common/error';import{APIResult}from'./api_response';var HTTP_METHOD={// We will support only these methods for now\nHEAD:'HEAD',GET:'GET',POST:'POST',PUT:'PUT',PATCH:'PATCH',DELETE:'DELETE'};var role2Object=function role2Object(roleStr){var result={};roleStr.split(\"&\").forEach(function(part){var item=part.split(\"=\");if(item.length==2){result[item[0]]=decodeURIComponent(item[1]);if(result[item[0]]==='true'||result[item[0]]==='false')result[item[0]]=result[item[0]]==='true'?true:false;}});return result;};// From https://stackoverflow.com/a/40031979\nvar buf2hex=function buf2hex(buffer){return _toConsumableArray(new Uint8Array(buffer)).map(function(x){return x.toString(16).padStart(2,'0');}).join('');};// Generate random safe string\nvar generateRandomSecureToken=function generateRandomSecureToken(bytes){var randArray=new Uint32Array(bytes);window.crypto.getRandomValues(randArray);return buf2hex(randArray);};var frostApiInstance;var _API_USED_METHOD=/*#__PURE__*/_classPrivateFieldLooseKey(\"API_USED_METHOD\");var _BASE_URL=/*#__PURE__*/_classPrivateFieldLooseKey(\"BASE_URL\");var _DEFAULT_FETCH_OPTION=/*#__PURE__*/_classPrivateFieldLooseKey(\"DEFAULT_FETCH_OPTION\");var _csrfToken=/*#__PURE__*/_classPrivateFieldLooseKey(\"csrfToken\");var _accessToken=/*#__PURE__*/_classPrivateFieldLooseKey(\"accessToken\");var _accessTokenExpiresAt=/*#__PURE__*/_classPrivateFieldLooseKey(\"accessTokenExpiresAt\");var _refreshResult=/*#__PURE__*/_classPrivateFieldLooseKey(\"refreshResult\");var _clearAuthenticationInfo=/*#__PURE__*/_classPrivateFieldLooseKey(\"clearAuthenticationInfo\");var _apiRequest=/*#__PURE__*/_classPrivateFieldLooseKey(\"apiRequest\");var FrostAPI=/*#__PURE__*/function(){// We only uses these http methods now.\n// Refresh Token will be saved on cookie storage,\n// And all of these attributes must be private.\n// We \"possibly\" returns response.json() on these HTTP Response status code.\n// Although these HTTP Response status code means error,\n// each routes have to handle these codes differently.\n// Default fetch options,\n// we'll copy and modify this default option object on every request.\n// Account related properties\nfunction FrostAPI(){_classCallCheck(this,FrostAPI);Object.defineProperty(this,_apiRequest,{value:_apiRequest2});Object.defineProperty(this,_clearAuthenticationInfo,{value:_clearAuthenticationInfo2});Object.defineProperty(this,_BASE_URL,{writable:true,value:'https://mudev.cc/api/dev/'});Object.defineProperty(this,_DEFAULT_FETCH_OPTION,{writable:true,value:{mode:'cors',cache:'no-cache',credentials:'same-origin',redirect:'follow',referrerPolicy:'strict-origin-when-cross-origin',headers:{'Content-Type':'application/json'}}});Object.defineProperty(this,_csrfToken,{writable:true,value:''});Object.defineProperty(this,_accessToken,{writable:true,value:''});Object.defineProperty(this,_accessTokenExpiresAt,{writable:true,value:new Date('Thu, 01 Jan 1970 00:00:00 GMT')});Object.defineProperty(this,_refreshResult,{writable:true,value:null});if(frostApiInstance)return frostApiInstance;_classPrivateFieldLooseBase(this,_csrfToken)[_csrfToken]=generateRandomSecureToken(32);frostApiInstance=this;}_createClass(FrostAPI,[{key:\"isSignedInWithoutAsync\",value:function isSignedInWithoutAsync(){return _classPrivateFieldLooseBase(this,_accessToken)[_accessToken]?true:false;}},{key:\"isSignedIn\",value:function isSignedIn(){var checkNetwork=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(checkNetwork)return this.refreshAuthentications().then(function(_){return true;},function(_){return false;});return Promise.resolve(_classPrivateFieldLooseBase(this,_accessToken)[_accessToken]?true:false);}},{key:\"signUp\",value:function signUp(id,email,password,nickname){var _this=this;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/signup',accessTokenRequired:false,additionalHeaders:{},data:{id:id,pw:password,nick:nickname,email:email}}).then(function(apiResult){if(apiResult.success){if(apiResult.subCode==='user.sign_up_but_need_email_verification'){// Server responsed with success,\n// but there won't be a user info as user can sign-in after email verification.\nreturn _this;}_classPrivateFieldLooseBase(_this,_accessToken)[_accessToken]=apiResult.data.user.access_token.token;_classPrivateFieldLooseBase(_this,_accessTokenExpiresAt)[_accessTokenExpiresAt]=new Date(apiResult.data.user.access_token.exp);_classPrivateFieldLooseBase(_this,_refreshResult)[_refreshResult]=apiResult.data;return _this;}// We need to generate error message from the subcode.\nvar errorMsg='';var errorFieldName='';switch(apiResult.subCode){case'user.already_used':{var duplicatedItems=apiResult.data.duplicate[0];var duplicatedItemsKor='';switch(duplicatedItems){case'email':errorFieldName='email';duplicatedItemsKor='이메일은';break;case'id':errorFieldName='id';duplicatedItemsKor='아이디는';break;case'nick':case'nickname':errorFieldName='nick';duplicatedItemsKor='별명은';break;case'pw':case'password':// WTF??? HOW??????\nerrorFieldName='pw';duplicatedItemsKor='비밀번호는';break;default:duplicatedItemsKor='정보는';break;}errorMsg=\"\\uC785\\uB825\\uD558\\uC2E0 \".concat(duplicatedItemsKor,\" \\uC774\\uBBF8 \\uB2E4\\uB978 \\uACC4\\uC815\\uC5D0\\uC11C \\uC0AC\\uC6A9 \\uC911\\uC774\\uC5D0\\uC694.\");break;}case'request.body.bad_semantics':{// errorMsg = '입력하신 정보로 회원가입을 하실 수 없어요.\\n';\nvar badSemanticsReason=apiResult.data.bad_semantics[0];if(Object.prototype.hasOwnProperty.call(badSemanticsReason,'email')){errorFieldName='email';errorMsg='올바른 이메일 형식이 아니에요.';}else if(Object.prototype.hasOwnProperty.call(badSemanticsReason,'pw')){var pwBadSemanticsReason=badSemanticsReason.pw;switch(pwBadSemanticsReason){case'TOO_SHORT':errorMsg='비밀번호가 너무 짧아요,\\n';break;case'TOO_LONG':errorMsg='1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n';break;case'NEED_MORE_CHAR_TYPE':errorMsg='비밀번호가 너무 단순해요,\\n';break;case'FORBIDDEN_CHAR':errorMsg='비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n';break;case'PW_REUSED_ON_ID_EMAIL_NICK':errorMsg='비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n';break;default:errorMsg='사용할 수 있는 비밀번호가 아니에요,\\n';break;}errorFieldName='pw';// errorMsg += '비밀번호는 영문 대소문자/숫자/특수문자 중 2가지를 혼용해서 최소 9자로 입력해주세요.';\n}else if(Object.prototype.hasOwnProperty.call(badSemanticsReason,'id')){var idBadSemanticsReason=badSemanticsReason.id;switch(idBadSemanticsReason){case'TOO_SHORT':errorMsg='아이디가 너무 짧아요,\\n';break;case'TOO_LONG':errorMsg='아이디가 너무 길어요,\\n';break;case'FORBIDDEN_CHAR':errorMsg='아이디에 사용할 수 없는 문자가 들어있어요,\\n';break;default:errorMsg='사용할 수 있는 아이디가 아니에요,\\n';break;}errorFieldName='id';errorMsg+='아이디는 4 ~ 47자 사이의 길이로 입력해주세요.';}else{errorMsg+='정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';}break;}default:errorMsg='알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';}throw new FrostError(errorMsg,\"account/signup=>response.success=false\\ncode = \".concat(apiResult.code,\"\\nsubCode=\").concat(apiResult.subCode),apiResult.code,true,apiResult,errorFieldName,'account/signup');}).catch(function(reason){// as reason might be a 'FrostError',\n// we can just reset auth data and throw it directly.\n_classPrivateFieldLooseBase(_this,_clearAuthenticationInfo)[_clearAuthenticationInfo]();throw reason;});}},{key:\"signIn\",value:function signIn(idOrEmail,password){var _this2=this;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/signin',accessTokenRequired:false,additionalHeaders:{},data:{id:idOrEmail,pw:password}}).then(function(apiResult){if(apiResult.success){_classPrivateFieldLooseBase(_this2,_accessToken)[_accessToken]=apiResult.data.user.access_token.token;_classPrivateFieldLooseBase(_this2,_accessTokenExpiresAt)[_accessTokenExpiresAt]=new Date(apiResult.data.user.access_token.exp);_classPrivateFieldLooseBase(_this2,_refreshResult)[_refreshResult]=apiResult.data;_this2.userData;return _this2;}var errorMsg='';var errorFieldName='';if(!apiResult)throw new FrostError('알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\"account/signin=>!apiResult\",-1,true,undefined,undefined,'account/signin');// If apiResponse is in FrostError obj, We can generate error message from the subcode.\nswitch(apiResult.subCode){case'user.not_found':errorMsg='계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';break;case'user.wrong_password':errorFieldName='pw';errorMsg='비밀번호가 맞지 않아요.\\n';errorMsg+=\"(\".concat(apiResult.data.left_chance,\"\\uBC88\\uC744 \\uB354 \\uD2C0\\uB9AC\\uC2DC\\uBA74 \\uACC4\\uC815\\uC774 \\uC7A0\\uACA8\\uC694.)\");break;case'user.locked':errorMsg='계정이 잠겼습니다, 관리자에게 연락해주세요.\\n';errorMsg+=\"(\\uC7A0\\uAE34 \\uC774\\uC720: \".concat(apiResult.data.reason,\")\");break;case'user.deactivated':errorMsg='계정이 비활성화되었습니다, 관리자에게 연락해주세요.\\n';errorMsg+=\"(\\uBE44\\uD65C\\uC131\\uD654\\uB41C \\uC774\\uC720: \".concat(apiResult.data.reason,\")\");break;case'user.email_not_verified':errorMsg='아직 가입 시 적으신 메일 주소를 인증하지 않으셨어요,\\n메일함을 확인 후 메일 인증을 진행해주세요.';break;default:errorMsg='알 수 없는 오류가 발생했어요,\\n10분 후 새로고침을 한 후에 다시 시도해주세요.';}throw new FrostError(errorMsg,\"account/signin=>response.success=false\\ncode = \".concat(apiResult.code,\"\\nsubCode=\").concat(apiResult.subCode),apiResult.code,true,apiResult,errorFieldName,'account/signin');}).catch(function(reason){// as reason might be a 'FrostError',\n// we can just reset auth data and throw it directly.\n_classPrivateFieldLooseBase(_this2,_clearAuthenticationInfo)[_clearAuthenticationInfo]();throw reason;});}},{key:\"signOut\",value:function signOut(){var _this3=this;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/signout',accessTokenRequired:false,additionalHeaders:{},data:{signout:'OK'}}).then(function(){// Actually, this action won't fail, except when the server is dead.\n// Just reset the csrf token and access token.\n_classPrivateFieldLooseBase(_this3,_clearAuthenticationInfo)[_clearAuthenticationInfo]();return _this3;});}},{key:\"refreshAuthentications\",value:function refreshAuthentications(){var _this4=this;var forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!forceRefresh&&_classPrivateFieldLooseBase(this,_accessToken)[_accessToken]&&_classPrivateFieldLooseBase(this,_accessTokenExpiresAt)[_accessTokenExpiresAt]>new Date()){return Promise.resolve(this);}return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/refresh',accessTokenRequired:false}).then(function(apiResult){if(apiResult.success){_classPrivateFieldLooseBase(_this4,_accessToken)[_accessToken]=apiResult.data.user.access_token.token;_classPrivateFieldLooseBase(_this4,_accessTokenExpiresAt)[_accessTokenExpiresAt]=new Date(apiResult.data.user.access_token.exp);_classPrivateFieldLooseBase(_this4,_refreshResult)[_refreshResult]=apiResult.data;return _this4;}throw new FrostError('인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.',\"account/refresh=>response.success = false\\uC785\\uB2C8\\uB2E4. code = \".concat(apiResult.code),400,true,apiResult,undefined,'account/refresh');}).catch(function(reason){// as reason might be a 'FrostError',\n// we can just reset auth data and throw it directly.\n_classPrivateFieldLooseBase(_this4,_clearAuthenticationInfo)[_clearAuthenticationInfo]();throw reason;});}},{key:\"changePassword\",value:function changePassword(currentPw,newPw,newPwReType){var _this5=this;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/change-password',accessTokenRequired:false,additionalHeaders:{},data:{original_password:currentPw,new_password:newPw,new_password_check:newPwReType}}).then(function(apiResult){if(apiResult.success){return _this5;}var errorMsg='';var errorFieldName='';if(!apiResult)throw new FrostError('알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\"account/change-password=>!apiResult\",-1,true,undefined,undefined,'account/change-password');// If apiResponse is in FrostError obj, We can generate error message from the subcode.\nswitch(apiResult.subCode){case'user.not_found':errorMsg='계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';break;case'user.wrong_password':errorFieldName='currentPw';errorMsg='현재 사용 중인 비밀번호가 맞지 않아요,\\n다시 시도해주세요.';break;case'password.change_failed':{// apiResult.data.reason can be...\n// RETYPE_MISMATCH, TOO_SHORT, TOO_LONG, NEED_MORE_CHAR_TYPE, FORBIDDEN_CHAR\nvar reasonType=apiResult.data.reason;switch(reasonType){case'RETYPE_MISMATCH':errorFieldName='newPwReType';errorMsg='위에 입력하신 새 비밀번호와 일치하지 않아요,\\n새 비밀번호를 다시 입력해주세요.\\n';break;case'TOO_SHORT':errorFieldName='newPw';errorMsg='비밀번호가 너무 짧아요,\\n';break;case'TOO_LONG':errorFieldName='newPw';errorMsg='1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n';break;case'NEED_MORE_CHAR_TYPE':errorFieldName='newPw';errorMsg='비밀번호가 너무 단순해요,\\n';break;case'FORBIDDEN_CHAR':errorFieldName='newPw';errorMsg='비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n';break;case'PW_REUSED_ON_ID_EMAIL_NICK':errorFieldName='newPw';errorMsg='비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n';break;default:errorFieldName='newPw';errorMsg='사용할 수 있는 비밀번호가 아니에요,\\n';break;}break;}default:errorMsg='알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';break;}throw new FrostError(errorMsg,'account/change-password=>\\n'+'response.success=false\\n'+\"code = \".concat(apiResult.code,\"\\n\")+\"subCode=\".concat(apiResult.subCode),apiResult.code,true,apiResult,errorFieldName,'account/change-password');}).catch(function(reason){if(typeof reason==='object'&&reason.constructor.name==='FrostError'){throw reason;}else{throw new FrostError('알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\"account/change-password=>\".concat(reason),-1,true,undefined,undefined,'account/change-password');}});}},{key:\"deactivate\",value:function deactivate(email,pw){var _this6=this;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account/deactivate',accessTokenRequired:false,additionalHeaders:{},data:{email:email,password:pw}}).then(function(apiResult){if(apiResult.success){// User will be signed out if account deactivation succeed.\n_classPrivateFieldLooseBase(_this6,_clearAuthenticationInfo)[_clearAuthenticationInfo]();return _this6;}var errorMsg='';var errorFieldName='';if(!apiResult)throw new FrostError('알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\"account/deactivate=>!apiResult\",-1,true,undefined,undefined,'account/deactivate');// If apiResponse is in FrostError obj, We can generate error message from the subcode.\nswitch(apiResult.subCode){case'user.not_found':errorMsg='계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';break;case'user.info_mismatch':errorMsg='계정 정보가 다른 곳에서 변경된 것 같아요,\\n새로고침 후 다시 시도해주세요.';break;case'user.wrong_password':errorFieldName='pw';errorMsg='비밀번호가 맞지 않아요,\\n다시 시도해주세요.';break;case'user.locked':errorMsg='계정이 잠겨있어서 비활성화를 할 수 없습니다,\\n계정을 잠근 상태에서 해제한 후 다시 시도해주세요.\\n';errorMsg+=\"(\\uACC4\\uC815\\uC774 \\uC7A0\\uAE34 \\uC774\\uC720: \".concat(apiResult.data.reason,\")\");break;case'user.deactivated':errorMsg='계정이 이미 비활성화가 되어있습니다,\\n이용해주셔서 감사합니다!\\n';errorMsg+=\"(\\uACC4\\uC815\\uC774 \\uBE44\\uD65C\\uC131\\uD654\\uB41C \\uC774\\uC720: \".concat(apiResult.data.reason,\")\");break;default:errorMsg='알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';break;}throw new FrostError(errorMsg,'account/deactivate=>\\n'+'response.success=false\\n'+\"code = \".concat(apiResult.code,\"\\n\")+\"subCode=\".concat(apiResult.subCode),apiResult.code,true,apiResult,errorFieldName,'account/deactivate');}).catch(function(reason){if(typeof reason==='object'&&reason.constructor.name==='FrostError'){throw reason;}else{throw new FrostError('알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\"account/deactivate=>\".concat(reason),-1,true,undefined,undefined,'account/deactivate');}});}},{key:\"modifyAccountInfo\",value:function modifyAccountInfo(newAccountData){var _this7=this;var refreshAfterSuccess=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:'account',accessTokenRequired:false,additionalHeaders:{},data:newAccountData}).then(function(apiResult){if(apiResult.success){if(refreshAfterSuccess){return _this7.refreshAuthentications(true);}else{return _this7;}}else{throw new FrostError('계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.','account/=>\\n'+'response.success=false\\n'+\"code = \".concat(apiResult.code,\"\\n\")+\"subCode=\".concat(apiResult.subCode),apiResult.code,false,apiResult,undefined,'account');}}).catch(function(reason){if(typeof reason==='object'&&reason.constructor.name==='FrostError'&&reason.apiResponse){var errorMsg='계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.';var errorFieldName='';var SERVER_CLIENT_FIELD_MAP={id:'id',nickname:'nick',// We won't support those two yet.\nprivate:'',description:''};switch(reason.apiResponse.subCode){case'user.not_found':errorMsg='사용자를 찾을 수 없습니다,\\n새로고침 후 다시 시도해주세요.';break;case'user.already_used':{var duplicatedItems=reason.apiResponse.data.duplicate[0];var duplicatedItemsKor='';switch(duplicatedItems){case'email':errorFieldName='email';duplicatedItemsKor='이메일은';break;case'id':errorFieldName='id';duplicatedItemsKor='아이디는';break;case'nick':case'nickname':errorFieldName='nick';duplicatedItemsKor='별명은';break;case'pw':case'password':// WTF??? HOW??????\nerrorFieldName='pw';duplicatedItemsKor='비밀번호는';break;default:duplicatedItemsKor='정보는';break;}errorMsg=\"\\uC785\\uB825\\uD558\\uC2E0 \".concat(duplicatedItemsKor,\" \\uC774\\uBBF8 \\uB2E4\\uB978 \\uACC4\\uC815\\uC5D0\\uC11C \\uC0AC\\uC6A9 \\uC911\\uC774\\uC5D0\\uC694.\");break;}case'request.body.empty':errorMsg='계정의 새 정보가 서버에 제대로 닿지 않았어요,\\n새로고침 후 다시 시도해주세요.';break;case'request.body.bad_semantics':{var badSemanticsData=reason.apiResponse.data;var parsedBadSemanticsData=badSemanticsData.forEach(function(value,index,array){var isThisTheLastItem=array.length-1===index;// Fuck, FrostError can pass only one error field.\n// Just return a first error field.\nvar currentErrorFieldName=SERVER_CLIENT_FIELD_MAP[value.field];if(isThisTheLastItem&&!currentErrorFieldName&&!errorFieldName){// If all error fields are not supported and if there's no field to show error message,\n// then just show a default message.\nerrorMsg='서버에 보낸 계정의 새 정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';return;}errorFieldName=currentErrorFieldName;errorMsg='허용되지 않는 문자가 포함되어 있어요,\\n다시 입력해주세요.';});break;}default:errorMsg='알 수 없는 문제가 발생했습니다,\\n새로고침 후 다시 시도해주세요.';break;}throw new FrostError(errorMsg,'account/=>\\n'+'response.success=false\\n'+\"code = \".concat(reason.apiResponse.code,\"\\n\")+\"subCode=\".concat(reason.apiResponse.subCode),reason.apiResponse.code,false,reason.apiResponse,errorFieldName,'account');}else{throw new FrostError('계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.',\"account=>\".concat(reason),-1,false,undefined,undefined,'account');}});}},{key:\"userID\",get:function get(){var _classPrivateFieldLoo;if(!((_classPrivateFieldLoo=_classPrivateFieldLooseBase(this,_refreshResult)[_refreshResult])===null||_classPrivateFieldLoo===void 0?void 0:_classPrivateFieldLoo.user))// This can cause FrostError, and this is intended.\nthis.refreshAuthentications();return _classPrivateFieldLooseBase(this,_refreshResult)[_refreshResult].user.id;}},{key:\"userData\",get:function get(){var _classPrivateFieldLoo2;if(!((_classPrivateFieldLoo2=_classPrivateFieldLooseBase(this,_refreshResult)[_refreshResult])===null||_classPrivateFieldLoo2===void 0?void 0:_classPrivateFieldLoo2.user))// This can cause FrostError, and this is intended.\nthis.refreshAuthentications();return _classPrivateFieldLooseBase(this,_refreshResult)[_refreshResult].user;}},{key:\"roles\",get:function get(){if(!_classPrivateFieldLooseBase(this,_accessToken)[_accessToken])// This can cause FrostError, and this is intended.\nthis.refreshAuthentications();var result=[];try{var token=JSON.parse(atob(_classPrivateFieldLooseBase(this,_accessToken)[_accessToken].split('.')[1]));JSON.parse(token.role).forEach(function(rolePart){if(rolePart==='admin')return;result.push(role2Object(rolePart));});}catch(e){/* tslint:disable:no-empty */}return result;}},{key:\"head\",value:function head(url){var accessTokenRequired=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var additionalHeaders=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.HEAD,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders});}},{key:\"get\",value:function get(url){var accessTokenRequired=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var additionalHeaders=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.GET,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders});}},{key:\"post\",value:function post(url){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var accessTokenRequired=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var additionalHeaders=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.POST,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders,data:data});}},{key:\"put\",value:function put(url){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var accessTokenRequired=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var additionalHeaders=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.PUT,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders,data:data});}},{key:\"patch\",value:function patch(url){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var accessTokenRequired=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var additionalHeaders=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.PATCH,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders,data:data});}},{key:\"delete\",value:function _delete(url){var accessTokenRequired=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var additionalHeaders=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return _classPrivateFieldLooseBase(this,_apiRequest)[_apiRequest]({method:HTTP_METHOD.DELETE,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders});}}]);return FrostAPI;}();function _clearAuthenticationInfo2(){_classPrivateFieldLooseBase(this,_accessToken)[_accessToken]='';_classPrivateFieldLooseBase(this,_accessTokenExpiresAt)[_accessTokenExpiresAt]=new Date('Thu, 01 Jan 1970 00:00:00 GMT');_classPrivateFieldLooseBase(this,_csrfToken)[_csrfToken]=generateRandomSecureToken(32);_classPrivateFieldLooseBase(this,_refreshResult)[_refreshResult]=null;}function _apiRequest2(){var _this8=this;var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{method:HTTP_METHOD.GET,url:'',accessTokenRequired:false,additionalHeaders:{},data:{},isRetry:false},method=_ref.method,url=_ref.url,accessTokenRequired=_ref.accessTokenRequired,additionalHeaders=_ref.additionalHeaders,data=_ref.data,isRetry=_ref.isRetry;// check if requested method is allowed\nif(_classPrivateFieldLooseBase(FrostAPI,_API_USED_METHOD)[_API_USED_METHOD].indexOf(method)==-1){throw'NOT_ALLOWED_METHOD';}// deep copy fetch option object\nvar reqFetchOption=JSON.parse(JSON.stringify(_classPrivateFieldLooseBase(this,_DEFAULT_FETCH_OPTION)[_DEFAULT_FETCH_OPTION]));reqFetchOption.method=method;// only add body on POST/PATCH/PUT methods\nif([HTTP_METHOD.POST,HTTP_METHOD.PATCH,HTTP_METHOD.PUT].indexOf(method)>-1)reqFetchOption.body=JSON.stringify(data);// always send X-Csrf-Token. This won't be a security hole.\nreqFetchOption.headers['X-Csrf-Token']=_classPrivateFieldLooseBase(this,_csrfToken)[_csrfToken];// add access token on header if accessTokenRequired is true\nif(accessTokenRequired){reqFetchOption.headers['Authorization']='Bearer '+_classPrivateFieldLooseBase(this,_accessToken)[_accessToken];}if(url.includes('account')||url.includes('admin')){reqFetchOption.credentials='include';}if(additionalHeaders)for(var _i=0,_Object$entries=Object.entries(additionalHeaders);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];reqFetchOption.headers[key]=value;}// // We need to handle HEAD method separately as this method doesn't return any body.\n// if (method === HTTP_METHOD.HEAD) {\n//   return fetch(this.#BASE_URL + url, reqFetchOption).then((response) => {\n//   });\n// }\nreturn fetch(_classPrivateFieldLooseBase(this,_BASE_URL)[_BASE_URL]+url,reqFetchOption).then(function(response){if(!response){// How is this possible???\nthrow new FrostError('서버가 응답이 없어요,\\n잠시 후에 다시 시도해주세요.','fetchResult 객체가 undefined 또는 null입니다.',-1,false,undefined,undefined,url);}else if(200<=response.status&&response.status<=399){// this returns response.json()\n// SUCCESS\nif(response.status===204){// resource.deleted\n// As 204 response means that resource is deleted and response does not include a response body,\n// we need to make and return a fake response object.\nreturn{header:response.headers,body:{success:true,code:204,subCode:'resource.deleted',message:'Resource successfully deleted'}};}return response.json().then(function(responseBody){return{header:response.headers,body:responseBody};});}else if(400<=response.status&&response.status<=499){if(response.status===401){// this \"possibly\" returns response.json()\n// This code can be returned on both resource and account related routes,\n// and we need to handle those separately.\n//\n// Possible subCodes:\n// > wrong password / account locked / account deactivated (== maybe one of account related routes?)\n//    - These will be raised when we signing in.\n//      We need to throw a proper FrostError.\n// > token not given / token expired / token invalid\n//    - We need to try refreshing access token and retry this.\n//      If access token refresh fails, then raise errors.\n//\n// If the error-occurred-request is related to resource routes,\n// then we'll refresh access token and and retry the request.\n// and if it fails, then we'll throw FrostError.\n//\n// If the error-occurred-request is related to account routes,\n// then we need to parse subCode, so we'll handle this error on second stage.\nif(!url.startsWith('account/')){if(!isRetry)return _this8.refreshAuthentications(true).then(function(api){return _classPrivateFieldLooseBase(api,_apiRequest)[_apiRequest]({method:method,url:url,accessTokenRequired:accessTokenRequired,additionalHeaders:additionalHeaders,data:data,isRetry:true});});throw new FrostError('인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.','인증 실패 & url !== account/refresh\\n'+\"\".concat(url,\" | \").concat(method,\" | response.status === \").concat(response.status),response.status,false,undefined,undefined,url);}return response.json().then(function(responseBody){return{header:response.headers,body:responseBody};});}else if(FrostAPI.RETURNABLE_ERROR.includes(response.status)){// this \"possibly\" returns response.json().\n// See RETURNABLE_ERROR for more details.\nreturn response.json().then(function(responseBody){return{header:response.headers,body:responseBody};});}else if(response.status===403){// Requested action was forbidden\nthrow new FrostError('해당 동작에 대한 권한이 없습니다.\\n만약 권한을 가지고 계셔야 한다면 관리자에게 연락 부탁드립니다.',\"\".concat(url,\" | \").concat(method,\" | response.status === \").concat(response.status),response.status,false,undefined,undefined,url);}else if(response.status===405){// Method not permitted\nthrow new FrostError('잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\"\".concat(url,\" | \").concat(method,\" | response.status === \").concat(response.status),response.status,false,undefined,undefined,url);}else if(response.status===415){// requested response content-type not supported\nthrow new FrostError('잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\"\".concat(url,\" | \").concat(method,\" | response.status === \").concat(response.status),response.status,false,undefined,undefined,url);}else if(response.status===429){throw new FrostError('요청이 너무 빈번해요,\\n조금 천천히 진행해주세요.',\"429 rate limit\",429,false,undefined,undefined,url);}else{// unknown client-fault error\nthrow new FrostError('알 수 없는 문제가 발생하였습니다,\\n10분 후 다시 시도해주세요.',\"\".concat(url,\" | \").concat(method,\" | response.status === \").concat(response.status),response.status,false,undefined,undefined,url);}}else{// HTTP status code is more than 500(server error)\nthrow new FrostError('서버가 잠시 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"statusCode\\uAC00 \".concat(response.status,\"\\uC785\\uB2C8\\uB2E4.\"),response.status,false,undefined,undefined,url);}// This is just for type-checking, response.status won't be less than 200, right?\n// ...right? please... no......\nreturn response.json().then(function(responseBody){return{header:response.headers,body:responseBody};});}).then(function(response){if(response instanceof APIResult)return response;var apiResult=new APIResult(response);if(apiResult.code===404&&apiResult.subCode==='http.not_found'){throw new FrostError('무엇을 할 지 모르는 요청이에요,\\n사이트 개발자에게 문의해주세요ㅠㅜ','http.not_found입니다.',apiResult.code,false,apiResult,undefined,url);}// else if (apiResult.code === 401) {\n//   // Possible subCodes:\n//   // > token not given / token expired / token invalid\n//   //   (== resource related routes, !!!ALREADY HANDLED!!!)\n//   //    - We need to try refreshing access token and retry this.\n//   //      If access token refresh fails, then raise errors.\n//   // > wrong password / account locked / account deactivated\n//   //   (== account related routes, we need to handle this here.)\n//   //    - These will be raised when we signing in.\n//   //      We need to throw a proper FrostError.\n//   throw new FrostError(\n//     '로그인을 할 수 없어요.',\n//     '인증 실패 & url !== account/refresh\\n' + `${url} | ${method} | response.status === ${response.status}`,\n//     apiResult.code, true, apiResult, undefined, url);\n// }\nreturn apiResult;}).catch(function(reason){// catch all exceptions and change it to FrostError\nif(typeof reason==='object'&&reason.constructor.name==='FrostError'){throw reason;}else{throw new FrostError('알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\"on FrostAPI.#apiRequest -> reason = \".concat(reason),-1,false,undefined,undefined,url);}});}Object.defineProperty(FrostAPI,_API_USED_METHOD,{writable:true,value:[// HTTP_METHOD.HEAD,  // NOT ALLOWED YET!!!\nHTTP_METHOD.GET,HTTP_METHOD.POST,HTTP_METHOD.PUT,HTTP_METHOD.PATCH,HTTP_METHOD.DELETE]});FrostAPI.RETURNABLE_ERROR=[// Actually, on 404, we need to filter http.not_found out only,\n// and any other responses must be returned, but we can get subcode after response.json().\n// And response.json() returns Promise<Any> and we cannot get subCode directly,\n// so we need to handle 404 on second stage.\n404,// http || resource not found\n409,// already used / information mismatch, conflict\n410,// resource gone\n412,// resource prediction failed\n422// request.body.bad_semantics - email address validation failure, etc.\n];export default FrostAPI;","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/network/api.ts"],"names":["FrostError","APIResult","HTTP_METHOD","HEAD","GET","POST","PUT","PATCH","DELETE","role2Object","roleStr","result","split","forEach","part","item","length","decodeURIComponent","buf2hex","buffer","Uint8Array","map","x","toString","padStart","join","generateRandomSecureToken","bytes","randArray","Uint32Array","window","crypto","getRandomValues","frostApiInstance","FrostAPI","mode","cache","credentials","redirect","referrerPolicy","headers","Date","checkNetwork","refreshAuthentications","then","_","Promise","resolve","id","email","password","nickname","method","url","accessTokenRequired","additionalHeaders","data","pw","nick","apiResult","success","subCode","user","access_token","token","exp","errorMsg","errorFieldName","duplicatedItems","duplicate","duplicatedItemsKor","badSemanticsReason","bad_semantics","Object","prototype","hasOwnProperty","call","pwBadSemanticsReason","idBadSemanticsReason","code","catch","reason","idOrEmail","userData","undefined","left_chance","signout","forceRefresh","currentPw","newPw","newPwReType","original_password","new_password","new_password_check","reasonType","constructor","name","newAccountData","refreshAfterSuccess","apiResponse","SERVER_CLIENT_FIELD_MAP","private","description","badSemanticsData","parsedBadSemanticsData","value","index","array","isThisTheLastItem","currentErrorFieldName","field","JSON","parse","atob","role","rolePart","push","e","isRetry","indexOf","reqFetchOption","stringify","body","includes","entries","key","fetch","response","status","header","message","json","responseBody","startsWith","api","RETURNABLE_ERROR"],"mappings":"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","sourcesContent":["// (c) MUsoftware 2022\r\n'use strict';\r\n\r\nimport { FrostError } from '../common/error';\r\nimport { APIResult } from './api_response';\r\n\r\nconst HTTP_METHOD: Record<string, string> = {\r\n  // We will support only these methods for now\r\n  HEAD: 'HEAD',\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  PATCH: 'PATCH',\r\n  DELETE: 'DELETE',\r\n};\r\n\r\nconst role2Object = (roleStr: string) => {\r\n  const result: { [roleName: string]: string | boolean } = {};\r\n\r\n  roleStr.split(\"&\").forEach(function (part) {\r\n    const item = part.split(\"=\");\r\n    if (item.length == 2) {\r\n      result[item[0]] = decodeURIComponent(item[1]);\r\n      if (result[item[0]] === 'true' || result[item[0]] === 'false')\r\n        result[item[0]] = (result[item[0]] === 'true') ? true : false;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n  return [...new Uint8Array(buffer)]\r\n    .map(x => x.toString(16).padStart(2, '0'))\r\n    .join('');\r\n}\r\n\r\n// Generate random safe string\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n  const randArray = new Uint32Array(bytes);\r\n  window.crypto.getRandomValues(randArray);\r\n  return buf2hex(randArray);\r\n}\r\n\r\ninterface FrostAPIRequestArgumentTypes {\r\n  method: 'HEAD' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\r\n  url: string;\r\n  accessTokenRequired: boolean;\r\n  additionalHeaders: Record<string, unknown>;\r\n  data: Record<string, unknown>;\r\n  isRetry: boolean;\r\n}\r\n\r\ninterface FrostAccountModifiableInfoTypes {\r\n  id: string;\r\n  nickname: string;\r\n  private: boolean;\r\n  description: string;\r\n}\r\n\r\nlet frostApiInstance: FrostAPI;\r\nclass FrostAPI {\r\n  // We only uses these http methods now.\r\n  static readonly #API_USED_METHOD = [\r\n    // HTTP_METHOD.HEAD,  // NOT ALLOWED YET!!!\r\n    HTTP_METHOD.GET,\r\n    HTTP_METHOD.POST,\r\n    HTTP_METHOD.PUT,\r\n    HTTP_METHOD.PATCH,\r\n    HTTP_METHOD.DELETE,\r\n  ]\r\n  // Refresh Token will be saved on cookie storage,\r\n  // And all of these attributes must be private.\r\n  readonly #BASE_URL = 'https://mudev.cc/api/dev/';\r\n  // We \"possibly\" returns response.json() on these HTTP Response status code.\r\n  // Although these HTTP Response status code means error,\r\n  // each routes have to handle these codes differently.\r\n  static readonly RETURNABLE_ERROR = [\r\n    // Actually, on 404, we need to filter http.not_found out only,\r\n    // and any other responses must be returned, but we can get subcode after response.json().\r\n    // And response.json() returns Promise<Any> and we cannot get subCode directly,\r\n    // so we need to handle 404 on second stage.\r\n    404, // http || resource not found\r\n    409, // already used / information mismatch, conflict\r\n    410, // resource gone\r\n    412, // resource prediction failed\r\n    422, // request.body.bad_semantics - email address validation failure, etc.\r\n  ];\r\n  // Default fetch options,\r\n  // we'll copy and modify this default option object on every request.\r\n  readonly #DEFAULT_FETCH_OPTION = {\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin',\r\n    redirect: 'follow',\r\n    referrerPolicy: 'strict-origin-when-cross-origin',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Account related properties\r\n  #csrfToken: string = '';\r\n  #accessToken: string = '';\r\n  #accessTokenExpiresAt: Date = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n  #refreshResult?: APIResult['data'] | null = null;\r\n\r\n  constructor() {\r\n    if (frostApiInstance) return frostApiInstance;\r\n\r\n    this.#csrfToken = generateRandomSecureToken(32);\r\n    frostApiInstance = this;\r\n  }\r\n\r\n  #clearAuthenticationInfo() {\r\n    this.#accessToken = '';\r\n    this.#accessTokenExpiresAt = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n    this.#csrfToken = generateRandomSecureToken(32);\r\n    this.#refreshResult = null;\r\n  }\r\n\r\n  #apiRequest({ method, url, accessTokenRequired, additionalHeaders, data, isRetry }: FrostAPIRequestArgumentTypes = {\r\n    method: HTTP_METHOD.GET,\r\n    url: '',\r\n    accessTokenRequired: false,\r\n    additionalHeaders: {},\r\n    data: {},\r\n    isRetry: false,\r\n  }): Promise<APIResult> {\r\n    // check if requested method is allowed\r\n    if (FrostAPI.#API_USED_METHOD.indexOf(method) == -1) { throw 'NOT_ALLOWED_METHOD'; }\r\n\r\n    // deep copy fetch option object\r\n    const reqFetchOption = JSON.parse(JSON.stringify(this.#DEFAULT_FETCH_OPTION));\r\n    reqFetchOption.method = method;\r\n\r\n    // only add body on POST/PATCH/PUT methods\r\n    if ([HTTP_METHOD.POST, HTTP_METHOD.PATCH, HTTP_METHOD.PUT].indexOf(method) > -1)\r\n      reqFetchOption.body = JSON.stringify(data);\r\n\r\n    // always send X-Csrf-Token. This won't be a security hole.\r\n    reqFetchOption.headers['X-Csrf-Token'] = this.#csrfToken;\r\n    // add access token on header if accessTokenRequired is true\r\n    if (accessTokenRequired) {\r\n      reqFetchOption.headers['Authorization'] = 'Bearer ' + this.#accessToken;\r\n    }\r\n\r\n    if (url.includes('account') || url.includes('admin')) {\r\n      reqFetchOption.credentials = 'include';\r\n    }\r\n\r\n    if (additionalHeaders)\r\n      for (const [key, value] of Object.entries(additionalHeaders))\r\n        reqFetchOption.headers[key] = value;\r\n\r\n    // // We need to handle HEAD method separately as this method doesn't return any body.\r\n    // if (method === HTTP_METHOD.HEAD) {\r\n    //   return fetch(this.#BASE_URL + url, reqFetchOption).then((response) => {\r\n\r\n    //   });\r\n    // }\r\n\r\n    return fetch(this.#BASE_URL + url, reqFetchOption).then((response) => {\r\n      if (!response) {\r\n        // How is this possible???\r\n        throw new FrostError(\r\n          '서버가 응답이 없어요,\\n잠시 후에 다시 시도해주세요.',\r\n          'fetchResult 객체가 undefined 또는 null입니다.', -1, false, undefined, undefined, url);\r\n      } else if (200 <= response.status && response.status <= 399) {  // this returns response.json()\r\n        // SUCCESS\r\n\r\n        if (response.status === 204) { // resource.deleted\r\n          // As 204 response means that resource is deleted and response does not include a response body,\r\n          // we need to make and return a fake response object.\r\n          return {\r\n            header: response.headers,\r\n            body: {\r\n              success: true,\r\n              code: 204,\r\n              subCode: 'resource.deleted',\r\n              message: 'Resource successfully deleted',\r\n            },\r\n          };\r\n        }\r\n\r\n        return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n      } else if (400 <= response.status && response.status <= 499) {\r\n        if (response.status === 401) {  // this \"possibly\" returns response.json()\r\n          // This code can be returned on both resource and account related routes,\r\n          // and we need to handle those separately.\r\n          //\r\n          // Possible subCodes:\r\n          // > wrong password / account locked / account deactivated (== maybe one of account related routes?)\r\n          //    - These will be raised when we signing in.\r\n          //      We need to throw a proper FrostError.\r\n          // > token not given / token expired / token invalid\r\n          //    - We need to try refreshing access token and retry this.\r\n          //      If access token refresh fails, then raise errors.\r\n          //\r\n          // If the error-occurred-request is related to resource routes,\r\n          // then we'll refresh access token and and retry the request.\r\n          // and if it fails, then we'll throw FrostError.\r\n          //\r\n          // If the error-occurred-request is related to account routes,\r\n          // then we need to parse subCode, so we'll handle this error on second stage.\r\n          if (!url.startsWith('account/')) {\r\n            if (!isRetry)\r\n              return this.refreshAuthentications(true).then((api) => api.#apiRequest({\r\n                method: method,\r\n                url: url,\r\n                accessTokenRequired: accessTokenRequired,\r\n                additionalHeaders: additionalHeaders, data: data,\r\n                isRetry: true,\r\n              }));\r\n            throw new FrostError(\r\n              '인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.',\r\n              '인증 실패 & url !== account/refresh\\n' + `${url} | ${method} | response.status === ${response.status}`,\r\n              response.status, false, undefined, undefined, url);\r\n          }\r\n\r\n          return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n        } else if (FrostAPI.RETURNABLE_ERROR.includes(response.status)) {\r\n          // this \"possibly\" returns response.json().\r\n          // See RETURNABLE_ERROR for more details.\r\n          return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n        } else if (response.status === 403) {\r\n          // Requested action was forbidden\r\n          throw new FrostError(\r\n            '해당 동작에 대한 권한이 없습니다.\\n만약 권한을 가지고 계셔야 한다면 관리자에게 연락 부탁드립니다.',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 405) {\r\n          // Method not permitted\r\n          throw new FrostError(\r\n            '잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 415) {\r\n          // requested response content-type not supported\r\n          throw new FrostError(\r\n            '잘못된 요청입니다.\\n사이트 관리자에게 어떻게 이 메시지를 보게 됐는지 알려주시면 감사하겠습니다ㅠㅜ',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        } else if (response.status === 429) {\r\n          throw new FrostError(\r\n            '요청이 너무 빈번해요,\\n조금 천천히 진행해주세요.',\r\n            `429 rate limit`, 429, false, undefined, undefined, url);\r\n        } else {\r\n          // unknown client-fault error\r\n          throw new FrostError(\r\n            '알 수 없는 문제가 발생하였습니다,\\n10분 후 다시 시도해주세요.',\r\n            `${url} | ${method} | response.status === ${response.status}`, response.status,\r\n            false, undefined, undefined, url);\r\n        }\r\n      } else {  // HTTP status code is more than 500(server error)\r\n        throw new FrostError(\r\n          '서버가 잠시 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n          `statusCode가 ${response.status}입니다.`, response.status,\r\n          false, undefined, undefined, url);\r\n      }\r\n\r\n      // This is just for type-checking, response.status won't be less than 200, right?\r\n      // ...right? please... no......\r\n      return response.json().then((responseBody) => ({ header: response.headers, body: responseBody }));\r\n    }).then((response: { header: Record<string, unknown>, body: Record<string, unknown> } | APIResult) => {\r\n      if (response instanceof APIResult)\r\n        return response;\r\n\r\n      const apiResult = new APIResult(response);\r\n      if (apiResult.code === 404 && apiResult.subCode === 'http.not_found') {\r\n        throw new FrostError(\r\n          '무엇을 할 지 모르는 요청이에요,\\n사이트 개발자에게 문의해주세요ㅠㅜ',\r\n          'http.not_found입니다.', apiResult.code, false, apiResult, undefined, url);\r\n      }\r\n      // else if (apiResult.code === 401) {\r\n      //   // Possible subCodes:\r\n      //   // > token not given / token expired / token invalid\r\n      //   //   (== resource related routes, !!!ALREADY HANDLED!!!)\r\n      //   //    - We need to try refreshing access token and retry this.\r\n      //   //      If access token refresh fails, then raise errors.\r\n      //   // > wrong password / account locked / account deactivated\r\n      //   //   (== account related routes, we need to handle this here.)\r\n      //   //    - These will be raised when we signing in.\r\n      //   //      We need to throw a proper FrostError.\r\n      //   throw new FrostError(\r\n      //     '로그인을 할 수 없어요.',\r\n      //     '인증 실패 & url !== account/refresh\\n' + `${url} | ${method} | response.status === ${response.status}`,\r\n      //     apiResult.code, true, apiResult, undefined, url);\r\n      // }\r\n\r\n      return apiResult;\r\n    }).catch((reason) => {\r\n      // catch all exceptions and change it to FrostError\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 문제가 생겼어요,\\n10분 후에 다시 시도해주세요.',\r\n          `on FrostAPI.#apiRequest -> reason = ${reason}`, -1, false, undefined, undefined, url);\r\n      }\r\n    });\r\n  }\r\n\r\n  isSignedInWithoutAsync() {\r\n    return (this.#accessToken) ? true : false;\r\n  }\r\n\r\n  isSignedIn(checkNetwork = false) {\r\n    if (checkNetwork)\r\n      return this.refreshAuthentications().then((_) => true, (_) => false);\r\n\r\n    return Promise.resolve((this.#accessToken) ? true : false);\r\n  }\r\n\r\n  signUp(id: string, email: string, password: string, nickname: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signup',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { id: id, pw: password, nick: nickname, email: email }\r\n    }).then((apiResult) => {\r\n      if (apiResult.success) {\r\n        if (apiResult.subCode === 'user.sign_up_but_need_email_verification') {\r\n          // Server responsed with success,\r\n          // but there won't be a user info as user can sign-in after email verification.\r\n          return this;\r\n        }\r\n\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        return this;\r\n      }\r\n\r\n      // We need to generate error message from the subcode.\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      switch (apiResult.subCode) {\r\n        case 'user.already_used': {\r\n          const duplicatedItems: string = apiResult.data.duplicate[0];\r\n          let duplicatedItemsKor = '';\r\n          switch (duplicatedItems) {\r\n            case 'email':\r\n              errorFieldName = 'email';\r\n              duplicatedItemsKor = '이메일은';\r\n              break;\r\n            case 'id':\r\n              errorFieldName = 'id';\r\n              duplicatedItemsKor = '아이디는';\r\n              break;\r\n            case 'nick':\r\n            case 'nickname':\r\n              errorFieldName = 'nick';\r\n              duplicatedItemsKor = '별명은';\r\n              break;\r\n            case 'pw':\r\n            case 'password':\r\n              // WTF??? HOW??????\r\n              errorFieldName = 'pw';\r\n              duplicatedItemsKor = '비밀번호는';\r\n              break;\r\n            default:\r\n              duplicatedItemsKor = '정보는';\r\n              break;\r\n          }\r\n          errorMsg = `입력하신 ${duplicatedItemsKor} 이미 다른 계정에서 사용 중이에요.`;\r\n          break;\r\n        }\r\n        case 'request.body.bad_semantics': {\r\n          // errorMsg = '입력하신 정보로 회원가입을 하실 수 없어요.\\n';\r\n          const badSemanticsReason: Record<string, unknown> = apiResult.data.bad_semantics[0];\r\n          if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'email')) {\r\n            errorFieldName = 'email';\r\n            errorMsg = '올바른 이메일 형식이 아니에요.';\r\n          } else if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'pw')) {\r\n            const pwBadSemanticsReason: string = badSemanticsReason.pw;\r\n            switch (pwBadSemanticsReason) {\r\n              case 'TOO_SHORT':\r\n                errorMsg = '비밀번호가 너무 짧아요,\\n'; break;\r\n              case 'TOO_LONG':\r\n                errorMsg = '1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n'; break;\r\n              case 'NEED_MORE_CHAR_TYPE':\r\n                errorMsg = '비밀번호가 너무 단순해요,\\n'; break;\r\n              case 'FORBIDDEN_CHAR':\r\n                errorMsg = '비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n'; break;\r\n              case 'PW_REUSED_ON_ID_EMAIL_NICK':\r\n                errorMsg = '비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n'; break;\r\n              default:\r\n                errorMsg = '사용할 수 있는 비밀번호가 아니에요,\\n'; break;\r\n            }\r\n            errorFieldName = 'pw';\r\n            // errorMsg += '비밀번호는 영문 대소문자/숫자/특수문자 중 2가지를 혼용해서 최소 9자로 입력해주세요.';\r\n          } else if (Object.prototype.hasOwnProperty.call(badSemanticsReason, 'id')) {\r\n            const idBadSemanticsReason: string = badSemanticsReason.id;\r\n            switch (idBadSemanticsReason) {\r\n              case 'TOO_SHORT':\r\n                errorMsg = '아이디가 너무 짧아요,\\n'; break;\r\n              case 'TOO_LONG':\r\n                errorMsg = '아이디가 너무 길어요,\\n'; break;\r\n              case 'FORBIDDEN_CHAR':\r\n                errorMsg = '아이디에 사용할 수 없는 문자가 들어있어요,\\n'; break;\r\n              default:\r\n                errorMsg = '사용할 수 있는 아이디가 아니에요,\\n'; break;\r\n            }\r\n            errorFieldName = 'id';\r\n            errorMsg += '아이디는 4 ~ 47자 사이의 길이로 입력해주세요.';\r\n          } else {\r\n            errorMsg += '정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';\r\n          }\r\n          break;\r\n        }\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        `account/signup=>response.success=false\\ncode = ${apiResult.code}\\nsubCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName, 'account/signup');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  signIn(idOrEmail: string, password: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signin',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { id: idOrEmail, pw: password },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        this.userData\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/signin=>!apiResult`, -1, true, undefined, undefined, 'account/signin');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'pw'\r\n          errorMsg = '비밀번호가 맞지 않아요.\\n';\r\n          errorMsg += `(${apiResult.data.left_chance}번을 더 틀리시면 계정이 잠겨요.)`;\r\n          break;\r\n        case 'user.locked':\r\n          errorMsg = '계정이 잠겼습니다, 관리자에게 연락해주세요.\\n';\r\n          errorMsg += `(잠긴 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.deactivated':\r\n          errorMsg = '계정이 비활성화되었습니다, 관리자에게 연락해주세요.\\n'\r\n          errorMsg += `(비활성화된 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.email_not_verified':\r\n          errorMsg = '아직 가입 시 적으신 메일 주소를 인증하지 않으셨어요,\\n메일함을 확인 후 메일 인증을 진행해주세요.';\r\n          break;\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후 새로고침을 한 후에 다시 시도해주세요.';\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        `account/signin=>response.success=false\\ncode = ${apiResult.code}\\nsubCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName, 'account/signin');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  signOut() {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/signout',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { signout: 'OK' },\r\n    }).then(\r\n      () => {\r\n        // Actually, this action won't fail, except when the server is dead.\r\n        // Just reset the csrf token and access token.\r\n        this.#clearAuthenticationInfo();\r\n        return this;\r\n      });\r\n  }\r\n\r\n  refreshAuthentications(forceRefresh = false) {\r\n    if (!forceRefresh && this.#accessToken && this.#accessTokenExpiresAt > new Date()) {\r\n      return Promise.resolve(this);\r\n    }\r\n\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/refresh',\r\n      accessTokenRequired: false\r\n    }\r\n    ).then((apiResult) => {\r\n      if (apiResult.success) {\r\n        this.#accessToken = apiResult.data.user.access_token.token;\r\n        this.#accessTokenExpiresAt = new Date(apiResult.data.user.access_token.exp);\r\n        this.#refreshResult = apiResult.data;\r\n        return this;\r\n      }\r\n      throw new FrostError(\r\n        '인증 정보 갱신에 실패했어요,\\n다시 로그인해주세요.',\r\n        `account/refresh=>response.success = false입니다. code = ${apiResult.code}`,\r\n        400, true, apiResult, undefined, 'account/refresh');\r\n    }).catch((reason) => {\r\n      // as reason might be a 'FrostError',\r\n      // we can just reset auth data and throw it directly.\r\n      this.#clearAuthenticationInfo();\r\n      throw reason;\r\n    });\r\n  }\r\n\r\n  changePassword(currentPw: string, newPw: string, newPwReType: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/change-password',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {},\r\n      data: {\r\n        original_password: currentPw,\r\n        new_password: newPw,\r\n        new_password_check: newPwReType,\r\n      },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/change-password=>!apiResult`, -1, true, undefined, undefined,\r\n          'account/change-password');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'currentPw';\r\n          errorMsg = '현재 사용 중인 비밀번호가 맞지 않아요,\\n다시 시도해주세요.';\r\n          break;\r\n        case 'password.change_failed': {\r\n          // apiResult.data.reason can be...\r\n          // RETYPE_MISMATCH, TOO_SHORT, TOO_LONG, NEED_MORE_CHAR_TYPE, FORBIDDEN_CHAR\r\n          const reasonType: string = apiResult.data.reason;\r\n          switch (reasonType) {\r\n            case 'RETYPE_MISMATCH':\r\n              errorFieldName = 'newPwReType';\r\n              errorMsg = '위에 입력하신 새 비밀번호와 일치하지 않아요,\\n새 비밀번호를 다시 입력해주세요.\\n';\r\n              break;\r\n            case 'TOO_SHORT':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 너무 짧아요,\\n';\r\n              break;\r\n            case 'TOO_LONG':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '1024자가 넘으면 비밀번호로 쓰기에 너무 길지 않을까요?\\n';\r\n              break;\r\n            case 'NEED_MORE_CHAR_TYPE':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 너무 단순해요,\\n';\r\n              break;\r\n            case 'FORBIDDEN_CHAR':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호에 쉽게 입력할 수 없는 문자가 들어있어요,\\n';\r\n              break;\r\n            case 'PW_REUSED_ON_ID_EMAIL_NICK':\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '비밀번호가 이메일, 별칭, 또는 아이디와 같아요,\\n';\r\n              break;\r\n            default:\r\n              errorFieldName = 'newPw';\r\n              errorMsg = '사용할 수 있는 비밀번호가 아니에요,\\n';\r\n              break;\r\n          }\r\n          break;\r\n        }\r\n\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n          break;\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        'account/change-password=>\\n'\r\n        + 'response.success=false\\n'\r\n        + `code = ${apiResult.code}\\n`\r\n        + `subCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName,\r\n        'account/change-password');\r\n    }).catch((reason) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/change-password=>${reason}`, -1, true, undefined, undefined,\r\n          'account/change-password');\r\n      }\r\n    });\r\n  }\r\n\r\n  deactivate(email: string, pw: string) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account/deactivate',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {}, data: { email: email, password: pw, },\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        // User will be signed out if account deactivation succeed.\r\n        this.#clearAuthenticationInfo();\r\n        return this;\r\n      }\r\n\r\n      let errorMsg = '';\r\n      let errorFieldName = '';\r\n      if (!apiResult)\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/deactivate=>!apiResult`, -1, true, undefined, undefined,\r\n          'account/deactivate');\r\n\r\n      // If apiResponse is in FrostError obj, We can generate error message from the subcode.\r\n      switch (apiResult.subCode) {\r\n        case 'user.not_found':\r\n          errorMsg = '계정을 찾지 못했어요,\\n아이디나 이메일을 다시 확인해주세요.';\r\n          break;\r\n        case 'user.info_mismatch':\r\n          errorMsg = '계정 정보가 다른 곳에서 변경된 것 같아요,\\n새로고침 후 다시 시도해주세요.';\r\n          break;\r\n        case 'user.wrong_password':\r\n          errorFieldName = 'pw';\r\n          errorMsg = '비밀번호가 맞지 않아요,\\n다시 시도해주세요.';\r\n          break;\r\n        case 'user.locked':\r\n          errorMsg = '계정이 잠겨있어서 비활성화를 할 수 없습니다,\\n계정을 잠근 상태에서 해제한 후 다시 시도해주세요.\\n';\r\n          errorMsg += `(계정이 잠긴 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        case 'user.deactivated':\r\n          errorMsg = '계정이 이미 비활성화가 되어있습니다,\\n이용해주셔서 감사합니다!\\n';\r\n          errorMsg += `(계정이 비활성화된 이유: ${apiResult.data.reason})`;\r\n          break;\r\n        default:\r\n          errorMsg = '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.';\r\n          break;\r\n      }\r\n\r\n      throw new FrostError(\r\n        errorMsg,\r\n        'account/deactivate=>\\n'\r\n        + 'response.success=false\\n'\r\n        + `code = ${apiResult.code}\\n`\r\n        + `subCode=${apiResult.subCode}`,\r\n        apiResult.code, true, apiResult, errorFieldName,\r\n        'account/deactivate');\r\n    }).catch((reason) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError') {\r\n        throw reason;\r\n      } else {\r\n        throw new FrostError(\r\n          '알 수 없는 오류가 발생했어요,\\n10분 후에 다시 시도해주세요.',\r\n          `account/deactivate=>${reason}`, -1, true, undefined, undefined,\r\n          'account/deactivate');\r\n      }\r\n    });\r\n  }\r\n\r\n  modifyAccountInfo(newAccountData: Partial<FrostAccountModifiableInfoTypes>, refreshAfterSuccess = false) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: 'account',\r\n      accessTokenRequired: false,\r\n      additionalHeaders: {},\r\n      data: newAccountData,\r\n    }).then((apiResult: APIResult) => {\r\n      if (apiResult.success) {\r\n        if (refreshAfterSuccess) {\r\n          return this.refreshAuthentications(true);\r\n        } else {\r\n          return this;\r\n        }\r\n      } else {\r\n        throw new FrostError(\r\n          '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.',\r\n          'account/=>\\n'\r\n          + 'response.success=false\\n'\r\n          + `code = ${apiResult.code}\\n`\r\n          + `subCode=${apiResult.subCode}`,\r\n          apiResult.code, false,\r\n          apiResult, undefined, 'account');\r\n      }\r\n    }).catch((reason: FrostError) => {\r\n      if (typeof (reason) === 'object' && reason.constructor.name === 'FrostError' && reason.apiResponse) {\r\n        let errorMsg = '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.';\r\n        let errorFieldName = '';\r\n        const SERVER_CLIENT_FIELD_MAP = {\r\n          id: 'id', nickname: 'nick',\r\n          // We won't support those two yet.\r\n          private: '', description: '',\r\n        }\r\n\r\n        switch (reason.apiResponse.subCode) {\r\n          case 'user.not_found':\r\n            errorMsg = '사용자를 찾을 수 없습니다,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n          case 'user.already_used': {\r\n            const duplicatedItems: string = reason.apiResponse.data.duplicate[0];\r\n            let duplicatedItemsKor = '';\r\n            switch (duplicatedItems) {\r\n              case 'email':\r\n                errorFieldName = 'email';\r\n                duplicatedItemsKor = '이메일은';\r\n                break;\r\n              case 'id':\r\n                errorFieldName = 'id';\r\n                duplicatedItemsKor = '아이디는';\r\n                break;\r\n              case 'nick':\r\n              case 'nickname':\r\n                errorFieldName = 'nick';\r\n                duplicatedItemsKor = '별명은';\r\n                break;\r\n              case 'pw':\r\n              case 'password':\r\n                // WTF??? HOW??????\r\n                errorFieldName = 'pw';\r\n                duplicatedItemsKor = '비밀번호는';\r\n                break;\r\n              default:\r\n                duplicatedItemsKor = '정보는';\r\n                break;\r\n            }\r\n            errorMsg = `입력하신 ${duplicatedItemsKor} 이미 다른 계정에서 사용 중이에요.`;\r\n            break;\r\n          }\r\n          case 'request.body.empty':\r\n            errorMsg = '계정의 새 정보가 서버에 제대로 닿지 않았어요,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n          case 'request.body.bad_semantics': {\r\n            const badSemanticsData: {\r\n              field: string;\r\n              reason: string;\r\n            }[] = reason.apiResponse.data;\r\n            const parsedBadSemanticsData = badSemanticsData.forEach((value, index, array) => {\r\n              const isThisTheLastItem = (array.length - 1) === index;\r\n              // Fuck, FrostError can pass only one error field.\r\n              // Just return a first error field.\r\n              const currentErrorFieldName = SERVER_CLIENT_FIELD_MAP[value.field];\r\n\r\n              if (isThisTheLastItem && !currentErrorFieldName && !errorFieldName) {\r\n                // If all error fields are not supported and if there's no field to show error message,\r\n                // then just show a default message.\r\n                errorMsg = '서버에 보낸 계정의 새 정보가 올바르지 않아요,\\n새로고침 후 다시 시도해주세요.';\r\n                return;\r\n              }\r\n              errorFieldName = currentErrorFieldName;\r\n              errorMsg = '허용되지 않는 문자가 포함되어 있어요,\\n다시 입력해주세요.';\r\n            });\r\n            break;\r\n          }\r\n          default:\r\n            errorMsg = '알 수 없는 문제가 발생했습니다,\\n새로고침 후 다시 시도해주세요.';\r\n            break;\r\n        }\r\n\r\n        throw new FrostError(\r\n          errorMsg,\r\n          'account/=>\\n'\r\n          + 'response.success=false\\n'\r\n          + `code = ${reason.apiResponse.code}\\n`\r\n          + `subCode=${reason.apiResponse.subCode}`,\r\n          reason.apiResponse.code, false, reason.apiResponse, errorFieldName, 'account');\r\n      } else {\r\n        throw new FrostError(\r\n          '계정의 정보를 수정하는 중 알 수 없는 문제가 발생했습니다.',\r\n          `account=>${reason}`, -1, false, undefined, undefined, 'account');\r\n      }\r\n    });\r\n  }\r\n\r\n  get userID() {\r\n    if (!this.#refreshResult?.user)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    return this.#refreshResult.user.id;\r\n  }\r\n\r\n  get userData() {\r\n    if (!this.#refreshResult?.user)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    return this.#refreshResult.user;\r\n  }\r\n\r\n  get roles() {\r\n    if (!this.#accessToken)\r\n      // This can cause FrostError, and this is intended.\r\n      this.refreshAuthentications();\r\n\r\n    const result: Array<{ [roleName: string]: string | boolean; }> = [];\r\n    try {\r\n      const token = JSON.parse(atob(this.#accessToken.split('.')[1]));\r\n      JSON.parse(token.role).forEach((rolePart: string) => {\r\n        if (rolePart === 'admin') return;\r\n        result.push(role2Object(rolePart));\r\n      });\r\n    } catch (e) {\r\n      /* tslint:disable:no-empty */\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  head(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.HEAD,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n  get(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.GET,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n  post(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.POST,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  put(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.PUT,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  patch(url: string, data: Record<string, unknown> = {}, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.PATCH,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders,\r\n      data: data\r\n    });\r\n  }\r\n  delete(url: string, accessTokenRequired = false, additionalHeaders = {}) {\r\n    return this.#apiRequest({\r\n      method: HTTP_METHOD.DELETE,\r\n      url: url,\r\n      accessTokenRequired: accessTokenRequired,\r\n      additionalHeaders: additionalHeaders\r\n    });\r\n  }\r\n}\r\n\r\nexport default FrostAPI;\r\n"]},"metadata":{},"sourceType":"module"}