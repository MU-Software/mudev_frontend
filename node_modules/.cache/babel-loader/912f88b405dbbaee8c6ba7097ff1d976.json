{"ast":null,"code":"import _objectSpread from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/.yarn/cache/@babel-runtime-npm-7.12.1-b069f70b16-fb4b4c8f70.zip/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import{useSelector,useDispatch}from'react-redux';import{FrostError}from'src/common/error';import{signInActionCreatorAsync,removeFrostErrorFromStateActionCreator}from'src/redux/modules/account/action_creator';import{AccountInfo}from'src/redux/modules/account/model';import{Form,Button}from'react-bootstrap';import{PHSpinnerButton}from'src/ui/common/element/muButton';import{PHFormText}from'src/ui/common/element/muFormText';import'./account.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var AccountSignIn=function AccountSignIn(){var _accountInfo$isFetchi;var InputChecker={id:function id(str){if(!str)return{success:false,idNotUsableReason:'아이디나 이메일 주소를 입력해주세요.'};return{success:true,idNotUsableReason:null};},pw:function pw(str){if(!str)return{success:false,pwNotUsableReason:'비밀번호를 입력해주세요.'};return{success:true,pwNotUsableReason:null};}};var FrostErrorToSignInError=function FrostErrorToSignInError(err){if(!err)return{signInFailedReason:null};if(err.route!=='account/signin')return{signUpFailedReason:null};// We need to set Frost's error message(showMsg)\n// to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\nvar errShowMsg=err.message;var errFieldName=err.fieldName?\"\".concat(err.fieldName,\"NotUsableReason\"):'signInFailedReason';return _defineProperty({},errFieldName,errShowMsg);};var accountInfo=useSelector(function(state){return state.accountReducer;});var dispatch=useDispatch();var navigate=useNavigate();var _useState=useState(_objectSpread({isProcessing:(_accountInfo$isFetchi=accountInfo===null||accountInfo===void 0?void 0:accountInfo.isFetching)!==null&&_accountInfo$isFetchi!==void 0?_accountInfo$isFetchi:false,idTextFieldValue:'',pwTextFieldValue:'',idNotUsableReason:null,pwNotUsableReason:null,signInFailedReason:null},FrostErrorToSignInError(accountInfo===null||accountInfo===void 0?void 0:accountInfo.frostErrorObj))),_useState2=_slicedToArray(_useState,2),signInFormData=_useState2[0],setSignInFormData=_useState2[1];useEffect(function(){var _accountInfo$isFetchi2;setSignInFormData(_objectSpread(_objectSpread(_objectSpread({},signInFormData),FrostErrorToSignInError(accountInfo===null||accountInfo===void 0?void 0:accountInfo.frostErrorObj)),{},{isProcessing:(_accountInfo$isFetchi2=accountInfo===null||accountInfo===void 0?void 0:accountInfo.isFetching)!==null&&_accountInfo$isFetchi2!==void 0?_accountInfo$isFetchi2:false}));},[accountInfo]);// We need this to remove FrostErrorObj in state when this component mounts.\nuseEffect(function(){return dispatch(removeFrostErrorFromStateActionCreator());},[]);if(accountInfo===null||accountInfo===void 0?void 0:accountInfo.isSignedIn)// Go to home if user is signed in state.\nnavigate('/');var handleEnterInput=function handleEnterInput(e){if(e.type==='keypress'&&e.charCode===13)trySignIn();};var trySignIn=function trySignIn(){// Disable all actions\nvar newSignInFormData=_objectSpread(_objectSpread({},signInFormData),{},{isProcessing:true});for(var key in newSignInFormData){// trim all strings in states\nif(typeof newSignInFormData[key]==='string')newSignInFormData[key]=newSignInFormData[key].trim();}setSignInFormData(newSignInFormData);var checkRequiredFieldName=['id','pw'];var isFormCheckSuccess=true;var resultFormCheckData={};checkRequiredFieldName.map(function(fieldName){var fieldValue=signInFormData[\"\".concat(fieldName,\"TextFieldValue\")];var fieldCheckResult=InputChecker[fieldName](fieldValue);if(isFormCheckSuccess)// It's OK to set true to false, but false to true must not be happened.\nisFormCheckSuccess=fieldCheckResult.success;resultFormCheckData=_objectSpread(_objectSpread({},resultFormCheckData),fieldCheckResult);});delete resultFormCheckData.success;newSignInFormData=_objectSpread(_objectSpread({},newSignInFormData),resultFormCheckData);setSignInFormData(newSignInFormData);if(!isFormCheckSuccess){newSignInFormData=_objectSpread(_objectSpread({},newSignInFormData),{},{isProcessing:false});setSignInFormData(newSignInFormData);return false;}dispatch(signInActionCreatorAsync(newSignInFormData.idTextFieldValue,newSignInFormData.pwTextFieldValue));return false;};return/*#__PURE__*/_jsxs(\"section\",{className:\"accountMain\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"h2\",{children:\"\\uB85C\\uADF8\\uC778\"})}),/*#__PURE__*/_jsx(\"aside\",{className:\"accountAside\",children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"accountAsideFormGroup\",controlId:\"formBasicEmail\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC544\\uC774\\uB514 \\uB610\\uB294 \\uC774\\uBA54\\uC77C\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",autoComplete:\"username\",placeholder:\"ID / Email\",disabled:signInFormData.isProcessing,value:signInFormData.idTextFieldValue,onKeyPress:handleEnterInput,onChange:function onChange(event){return setSignInFormData(_objectSpread(_objectSpread({},signInFormData),{},{idTextFieldValue:event.target.value}));}}),/*#__PURE__*/_jsx(PHFormText,{children:signInFormData.idNotUsableReason})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"accountAsideFormGroup\",controlId:\"formBasicPassword\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"current-password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\",disabled:signInFormData.isProcessing,value:signInFormData.pwTextFieldValue,onKeyPress:handleEnterInput,onChange:function onChange(event){return setSignInFormData(_objectSpread(_objectSpread({},signInFormData),{},{pwTextFieldValue:event.target.value}));}}),/*#__PURE__*/_jsx(PHFormText,{children:signInFormData.pwNotUsableReason})]}),/*#__PURE__*/_jsx(PHFormText,{showOnlyNeeded:true,className:\"accountAsideFormGroup\",children:signInFormData.signInFailedReason}),/*#__PURE__*/_jsxs(\"div\",{className:\"accountSubmitBtnContainer\",children:[/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",style:{color:'var(--color)',border:'1px solid var(--color)'},disabled:signInFormData.isProcessing,onClick:function onClick(){return navigate('/account/signup');},children:\"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"}),/*#__PURE__*/_jsx(PHSpinnerButton,{variant:\"primary\",size:false,style:{margin:undefined},onClick:trySignIn,showSpinner:signInFormData.isProcessing,children:\"\\uB85C\\uADF8\\uC778\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"a\",{className:\"signInGoToResetPassword\",href:\"#\",onClick:!signInFormData.isProcessing?function(){return navigate('/account/reset-password');}:function(){/**/},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC78A\\uC5B4\\uBC84\\uB9AC\\uC168\\uB098\\uC694?\"})]})})]});};","map":{"version":3,"sources":["C:/Users/MUsoftware/Documents/GitHub/mudev_frontend/src/ui/page/account/signin.jsx"],"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","FrostError","signInActionCreatorAsync","removeFrostErrorFromStateActionCreator","AccountInfo","Form","Button","PHSpinnerButton","PHFormText","AccountSignIn","InputChecker","id","str","success","idNotUsableReason","pw","pwNotUsableReason","FrostErrorToSignInError","err","signInFailedReason","route","signUpFailedReason","errShowMsg","message","errFieldName","fieldName","accountInfo","state","accountReducer","dispatch","navigate","isProcessing","isFetching","idTextFieldValue","pwTextFieldValue","frostErrorObj","signInFormData","setSignInFormData","isSignedIn","handleEnterInput","e","type","charCode","trySignIn","newSignInFormData","key","trim","checkRequiredFieldName","isFormCheckSuccess","resultFormCheckData","map","fieldValue","fieldCheckResult","event","target","value","color","border","margin","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FrostError } from 'src/common/error';\r\nimport {\r\n  signInActionCreatorAsync,\r\n  removeFrostErrorFromStateActionCreator,\r\n} from 'src/redux/modules/account/action_creator';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport './account.css';\r\n\r\nexport const AccountSignIn = () => {\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str)\r\n        return { success: false, idNotUsableReason: '아이디나 이메일 주소를 입력해주세요.', };\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str)\r\n        return { success: false, pwNotUsableReason: '비밀번호를 입력해주세요.', };\r\n\r\n      return { success: true, pwNotUsableReason: null, };\r\n    },\r\n  };\r\n\r\n  const FrostErrorToSignInError = (err: FrostError) => {\r\n    if (!err)\r\n      return { signInFailedReason: null };\r\n    if (err.route !== 'account/signin')\r\n      return { signUpFailedReason: null };\r\n    // We need to set Frost's error message(showMsg)\r\n    // to proper (id|pw|email|nick)NotUsableReason field or signInFailedReason.\r\n    const errShowMsg = err.message;\r\n    const errFieldName = err.fieldName ? `${err.fieldName}NotUsableReason` : 'signInFailedReason';\r\n\r\n    return { [errFieldName]: errShowMsg, };\r\n  };\r\n\r\n  const accountInfo: AccountInfo = useSelector(state => state.accountReducer);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [signInFormData, setSignInFormData] = useState({\r\n    isProcessing: accountInfo?.isFetching ?? false,\r\n\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    signInFailedReason: null,\r\n\r\n    ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSignInFormData({\r\n      ...signInFormData,\r\n      ...(FrostErrorToSignInError(accountInfo?.frostErrorObj)),\r\n      isProcessing: accountInfo?.isFetching ?? false,\r\n    })\r\n  }, [accountInfo]);\r\n\r\n  // We need this to remove FrostErrorObj in state when this component mounts.\r\n  useEffect(() => dispatch(removeFrostErrorFromStateActionCreator()), []);\r\n\r\n  if (accountInfo?.isSignedIn) // Go to home if user is signed in state.\r\n    navigate('/');\r\n  const handleEnterInput = (e) => {\r\n    if (e.type === 'keypress' && e.charCode === 13)\r\n      trySignIn();\r\n  };\r\n  const trySignIn = () => {\r\n    // Disable all actions\r\n    let newSignInFormData = { ...signInFormData, isProcessing: true, };\r\n    for (var key in newSignInFormData)\r\n      // trim all strings in states\r\n      if (typeof (newSignInFormData[key]) === 'string')\r\n        newSignInFormData[key] = newSignInFormData[key].trim();\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    const checkRequiredFieldName = ['id', 'pw'];\r\n    let isFormCheckSuccess = true;\r\n    let resultFormCheckData = {};\r\n    checkRequiredFieldName.map(fieldName => {\r\n      const fieldValue = signInFormData[`${fieldName}TextFieldValue`];\r\n      const fieldCheckResult = InputChecker[fieldName](fieldValue);\r\n      if (isFormCheckSuccess)\r\n        // It's OK to set true to false, but false to true must not be happened.\r\n        isFormCheckSuccess = fieldCheckResult.success;\r\n      resultFormCheckData = { ...resultFormCheckData, ...fieldCheckResult };\r\n    });\r\n    delete (resultFormCheckData.success);\r\n\r\n    newSignInFormData = { ...newSignInFormData, ...resultFormCheckData, }\r\n    setSignInFormData(newSignInFormData);\r\n\r\n    if (!isFormCheckSuccess) {\r\n      newSignInFormData = { ...newSignInFormData, isProcessing: false, }\r\n      setSignInFormData(newSignInFormData);\r\n      return false;\r\n    }\r\n\r\n    dispatch(\r\n      signInActionCreatorAsync(\r\n        newSignInFormData.idTextFieldValue,\r\n        newSignInFormData.pwTextFieldValue)\r\n    );\r\n\r\n    return false;\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>로그인</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicEmail'>\r\n          <Form.Label>아이디 또는 이메일</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            autoComplete='username'\r\n            placeholder='ID / Email'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.idTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                idTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.idNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formBasicPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            autoComplete='current-password'\r\n            placeholder='비밀번호'\r\n            disabled={signInFormData.isProcessing}\r\n            value={signInFormData.pwTextFieldValue}\r\n            onKeyPress={handleEnterInput}\r\n            onChange={\r\n              (event) => setSignInFormData({\r\n                ...signInFormData,\r\n                pwTextFieldValue: event.target.value,\r\n              })}\r\n          />\r\n          <PHFormText>{signInFormData.pwNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n\r\n        <PHFormText showOnlyNeeded className='accountAsideFormGroup'>{signInFormData.signInFailedReason}</PHFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <Button\r\n            variant='outline-secondary'\r\n            style={{\r\n              color: 'var(--color)',\r\n              border: '1px solid var(--color)',\r\n            }}\r\n            disabled={signInFormData.isProcessing}\r\n            onClick={() => navigate('/account/signup')}>\r\n            계정 만들기\r\n          </Button>\r\n\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={trySignIn}\r\n            showSpinner={signInFormData.isProcessing}>\r\n            로그인\r\n          </PHSpinnerButton>\r\n        </div><br />\r\n        <a\r\n          className='signInGoToResetPassword'\r\n          href='#'\r\n          onClick={(!signInFormData.isProcessing) ? () => navigate('/account/reset-password') : () => {/**/ }}>\r\n          비밀번호를 잊어버리셨나요?\r\n        </a>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}