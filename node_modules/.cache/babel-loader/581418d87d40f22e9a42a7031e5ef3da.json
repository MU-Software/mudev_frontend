{"ast":null,"code":"import { Manager } from 'socket.io-client';\n\n// Generate random safe string, borrowed from FrostAPI implementation\nconst generateRandomSecureToken = bytes => {\n  const randArray = new Uint32Array(bytes);\n  window.crypto.getRandomValues(randArray);\n  return buf2hex(randArray);\n}; // From https://stackoverflow.com/a/40031979\n// Buffer to hex, also borrowed from FrostAPI implementation\n\n\nconst buf2hex = buffer => {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n};\n\nlet playCoSocketIOHandlerInstance;\nexport class PlayCoSocketIOHandler {\n  constructor() {\n    this.socketIoMgr = void 0;\n    this.socketIo = void 0;\n    this.socketIoAuthToken = void 0;\n    this.csrfToken = void 0;\n    this.socketIoEventHandler = {\n      onConnect: qweasd => {\n        console.log(qweasd); //\n      },\n      onDisconnect: () => {//\n      },\n      onPlaylistUpdate: () => {//\n      }\n    };\n    if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance; // We need to get a new Websocket Token by request.\n\n    this.csrfToken = generateRandomSecureToken(32); // (new FrostAPI()).post(\n    // )\n\n    this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\n      reconnectionDelayMax: 5000,\n      path: '/api/dev/ws',\n      transports: ['websocket'],\n      forceNew: false,\n      autoConnect: false,\n      closeOnBeforeunload: false\n    });\n    this.socketIo = this.socketIoMgr.socket('/playco_ws', {\n      // See https://socket.io/docs/v4/client-options/#auth\n      auth: {\n        token: 'qweasd'\n      }\n    });\n    playCoSocketIOHandlerInstance = this;\n  }\n\n  refreshSocketIoToken(userId) {//\n  }\n\n  connect() {\n    // Connect SocketIO if it's not connected\n    if (!this.socketIo.connected) {\n      this.socketIo.open(this.socketIoEventHandler.onConnect);\n    } // Register event handlers\n\n  }\n\n  disconnect() {\n    if (!this.socketIo.connected) return;\n    this.socketIo.disconnect();\n  }\n\n  enterPlaylist(playlistId, hook) {\n    const reqData = {\n      eventName: 'onPlaylistEnter',\n      data: {\n        playlist_id: 0\n      }\n    };\n  }\n\n  leavePlaylist(playlistId) {//\n  }\n\n}","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/playco/sio.ts"],"names":["Manager","generateRandomSecureToken","bytes","randArray","Uint32Array","window","crypto","getRandomValues","buf2hex","buffer","Uint8Array","map","x","toString","padStart","join","playCoSocketIOHandlerInstance","PlayCoSocketIOHandler","constructor","socketIoMgr","socketIo","socketIoAuthToken","csrfToken","socketIoEventHandler","onConnect","qweasd","console","log","onDisconnect","onPlaylistUpdate","reconnectionDelayMax","path","transports","forceNew","autoConnect","closeOnBeforeunload","socket","auth","token","refreshSocketIoToken","userId","connect","connected","open","disconnect","enterPlaylist","playlistId","hook","reqData","eventName","data","playlist_id","leavePlaylist"],"mappings":"AAAA,SAAaA,OAAb,QAA4B,kBAA5B;;AAGA;AACA,MAAMC,yBAAyB,GAAIC,KAAD,IAAmB;AACnD,QAAMC,SAAS,GAAG,IAAIC,WAAJ,CAAgBF,KAAhB,CAAlB;AACAG,EAAAA,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8BJ,SAA9B;AACA,SAAOK,OAAO,CAACL,SAAD,CAAd;AACD,CAJD,C,CAMA;AACA;;;AACA,MAAMK,OAAO,GAAIC,MAAD,IAA6B;AACzC,SAAO,CAAC,GAAG,IAAIC,UAAJ,CAAeD,MAAf,CAAJ,EACJE,GADI,CACAC,CAAC,IAAIA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CADL,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGD,CAJH;;AAMA,IAAIC,6BAAJ;AACA,OAAO,MAAMC,qBAAN,CAA4B;AAmB/BC,EAAAA,WAAW,GAAG;AAAA,SAlBNC,WAkBM;AAAA,SAjBNC,QAiBM;AAAA,SAhBNC,iBAgBM;AAAA,SAfNC,SAeM;AAAA,SAbdC,oBAac,GAboC;AAC9CC,MAAAA,SAAS,EAAGC,MAAD,IAAY;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADmB,CAEnB;AACH,OAJ6C;AAK9CG,MAAAA,YAAY,EAAE,MAAM,CAChB;AACH,OAP6C;AAQ9CC,MAAAA,gBAAgB,EAAE,MAAM,CACpB;AACH;AAV6C,KAapC;AACV,QAAIb,6BAAJ,EAAmC,OAAOA,6BAAP,CADzB,CAGV;;AACA,SAAKM,SAAL,GAAiBrB,yBAAyB,CAAC,EAAD,CAA1C,CAJU,CAKV;AAEA;;AAEA,SAAKkB,WAAL,GAAmB,IAAInB,OAAJ,CAAY,2BAAZ,EAAyC;AACxD8B,MAAAA,oBAAoB,EAAE,IADkC;AAExDC,MAAAA,IAAI,EAAE,aAFkD;AAGxDC,MAAAA,UAAU,EAAE,CAAC,WAAD,CAH4C;AAKxDC,MAAAA,QAAQ,EAAE,KAL8C;AAMxDC,MAAAA,WAAW,EAAE,KAN2C;AAOxDC,MAAAA,mBAAmB,EAAE;AAPmC,KAAzC,CAAnB;AASA,SAAKf,QAAL,GAAgB,KAAKD,WAAL,CAAiBiB,MAAjB,CAAwB,YAAxB,EAAsC;AAClD;AACAC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE;AADL;AAF4C,KAAtC,CAAhB;AAMAtB,IAAAA,6BAA6B,GAAG,IAAhC;AACH;;AAEOuB,EAAAA,oBAAoB,CAACC,MAAD,EAAiB,CACzC;AACH;;AAEDC,EAAAA,OAAO,GAAG;AACN;AACA,QAAI,CAAC,KAAKrB,QAAL,CAAcsB,SAAnB,EAA8B;AAC1B,WAAKtB,QAAL,CAAcuB,IAAd,CAAmB,KAAKpB,oBAAL,CAA0BC,SAA7C;AACH,KAJK,CAMN;;AACH;;AAEDoB,EAAAA,UAAU,GAAG;AACT,QAAI,CAAC,KAAKxB,QAAL,CAAcsB,SAAnB,EACI;AAEJ,SAAKtB,QAAL,CAAcwB,UAAd;AACH;;AAEDC,EAAAA,aAAa,CAACC,UAAD,EAAqBC,IAArB,EAA8C;AACvD,UAAMC,OAAO,GAAG;AACZC,MAAAA,SAAS,EAAE,iBADC;AAEZC,MAAAA,IAAI,EAAE;AACFC,QAAAA,WAAW,EAAE;AADX;AAFM,KAAhB;AAMH;;AAEDC,EAAAA,aAAa,CAACN,UAAD,EAAqB,CAC9B;AACH;;AA7E8B","sourcesContent":["import { io, Manager } from 'socket.io-client';\r\nimport FrostAPI from 'src/network/api';\r\n\r\n// Generate random safe string, borrowed from FrostAPI implementation\r\nconst generateRandomSecureToken = (bytes: number) => {\r\n  const randArray = new Uint32Array(bytes);\r\n  window.crypto.getRandomValues(randArray);\r\n  return buf2hex(randArray);\r\n}\r\n\r\n// From https://stackoverflow.com/a/40031979\r\n// Buffer to hex, also borrowed from FrostAPI implementation\r\nconst buf2hex = (buffer: ArrayBufferLike) => {\r\n    return [...new Uint8Array(buffer)]\r\n      .map(x => x.toString(16).padStart(2, '0'))\r\n      .join('');\r\n  }\r\n\r\nlet playCoSocketIOHandlerInstance: PlayCoSocketIOHandler;\r\nexport class PlayCoSocketIOHandler {\r\n    private socketIoMgr: io.Manager;\r\n    private socketIo: io;\r\n    private socketIoAuthToken: { exp: Date, token: string };\r\n    private csrfToken: string;\r\n\r\n    socketIoEventHandler: Record<string, () => any> = {\r\n        onConnect: (qweasd) => {\r\n            console.log(qweasd);\r\n            //\r\n        },\r\n        onDisconnect: () => {\r\n            //\r\n        },\r\n        onPlaylistUpdate: () => {\r\n            //\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        if (playCoSocketIOHandlerInstance) return playCoSocketIOHandlerInstance;\r\n\r\n        // We need to get a new Websocket Token by request.\r\n        this.csrfToken = generateRandomSecureToken(32);\r\n        // (new FrostAPI()).post(\r\n\r\n        // )\r\n\r\n        this.socketIoMgr = new Manager('https://hyperion.mudev.cc', {\r\n            reconnectionDelayMax: 5000,\r\n            path: '/api/dev/ws',\r\n            transports: ['websocket', ],\r\n\r\n            forceNew: false,\r\n            autoConnect: false,\r\n            closeOnBeforeunload: false,\r\n        });\r\n        this.socketIo = this.socketIoMgr.socket('/playco_ws', {\r\n            // See https://socket.io/docs/v4/client-options/#auth\r\n            auth: {\r\n                token: 'qweasd',\r\n            },\r\n        });\r\n        playCoSocketIOHandlerInstance = this;\r\n    }\r\n\r\n    private refreshSocketIoToken(userId: number) {\r\n        //\r\n    }\r\n\r\n    connect() {\r\n        // Connect SocketIO if it's not connected\r\n        if (!this.socketIo.connected) {\r\n            this.socketIo.open(this.socketIoEventHandler.onConnect);\r\n        }\r\n\r\n        // Register event handlers\r\n    }\r\n\r\n    disconnect() {\r\n        if (!this.socketIo.connected)\r\n            return;\r\n\r\n        this.socketIo.disconnect();\r\n    }\r\n\r\n    enterPlaylist(playlistId: number, hook: (unknown) => void) {\r\n        const reqData = {\r\n            eventName: 'onPlaylistEnter',\r\n            data: {\r\n                playlist_id: 0,\r\n            },\r\n        };\r\n    }\r\n\r\n    leavePlaylist(playlistId: number) {\r\n        //\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}