{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\playco\\\\element\\\\playlistControlModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlaylistControlModal = props => {\n  _s();\n\n  var _props$initialModalSt, _props$initialModalSt2, _props$initialModalSt3, _props$initialModalSt4, _props$initialModalSt5, _props$initialModalSt6, _props$initialModalSt7, _props$initialModalSt8, _props$initialModalSt9;\n\n  const navigate = useNavigate();\n  const [playlistControlModalState, setPlaylistControlModalState] = useState({\n    isProcessing: false,\n    nameTextFieldValue: ((_props$initialModalSt = props.initialModalState) === null || _props$initialModalSt === void 0 ? void 0 : _props$initialModalSt.name) || '',\n    nameNotUsableReason: '',\n    isAllowingDuplicate: (_props$initialModalSt2 = (_props$initialModalSt3 = props.initialModalState) === null || _props$initialModalSt3 === void 0 ? void 0 : _props$initialModalSt3.allow_duplicate) !== null && _props$initialModalSt2 !== void 0 ? _props$initialModalSt2 : true,\n    isPublicAccessable: (_props$initialModalSt4 = (_props$initialModalSt5 = props.initialModalState) === null || _props$initialModalSt5 === void 0 ? void 0 : _props$initialModalSt5.public_accessable) !== null && _props$initialModalSt4 !== void 0 ? _props$initialModalSt4 : false,\n    isPublicItemAppendable: (_props$initialModalSt6 = (_props$initialModalSt7 = props.initialModalState) === null || _props$initialModalSt7 === void 0 ? void 0 : _props$initialModalSt7.public_item_appendable) !== null && _props$initialModalSt6 !== void 0 ? _props$initialModalSt6 : false,\n    isPublicItemDeletable: (_props$initialModalSt8 = (_props$initialModalSt9 = props.initialModalState) === null || _props$initialModalSt9 === void 0 ? void 0 : _props$initialModalSt9.public_item_deletable) !== null && _props$initialModalSt8 !== void 0 ? _props$initialModalSt8 : false,\n    playlistCreationFailedReason: ''\n  });\n  useEffect(() => {\n    var _props$initialModalSt10, _props$initialModalSt11, _props$initialModalSt12, _props$initialModalSt13, _props$initialModalSt14, _props$initialModalSt15, _props$initialModalSt16, _props$initialModalSt17, _props$initialModalSt18, _props$initialModalSt19;\n\n    return setPlaylistControlModalState({ ...playlistControlModalState,\n      nameTextFieldValue: (_props$initialModalSt10 = (_props$initialModalSt11 = props.initialModalState) === null || _props$initialModalSt11 === void 0 ? void 0 : _props$initialModalSt11.name) !== null && _props$initialModalSt10 !== void 0 ? _props$initialModalSt10 : '',\n      nameNotUsableReason: '',\n      isAllowingDuplicate: (_props$initialModalSt12 = (_props$initialModalSt13 = props.initialModalState) === null || _props$initialModalSt13 === void 0 ? void 0 : _props$initialModalSt13.allow_duplicate) !== null && _props$initialModalSt12 !== void 0 ? _props$initialModalSt12 : true,\n      isPublicAccessable: (_props$initialModalSt14 = (_props$initialModalSt15 = props.initialModalState) === null || _props$initialModalSt15 === void 0 ? void 0 : _props$initialModalSt15.public_accessable) !== null && _props$initialModalSt14 !== void 0 ? _props$initialModalSt14 : false,\n      isPublicItemAppendable: (_props$initialModalSt16 = (_props$initialModalSt17 = props.initialModalState) === null || _props$initialModalSt17 === void 0 ? void 0 : _props$initialModalSt17.public_item_appendable) !== null && _props$initialModalSt16 !== void 0 ? _props$initialModalSt16 : false,\n      isPublicItemDeletable: (_props$initialModalSt18 = (_props$initialModalSt19 = props.initialModalState) === null || _props$initialModalSt19 === void 0 ? void 0 : _props$initialModalSt19.public_item_deletable) !== null && _props$initialModalSt18 !== void 0 ? _props$initialModalSt18 : false,\n      playlistCreationFailedReason: ''\n    });\n  }, [props]);\n\n  const closeModalFunc = () => {\n    if (!playlistControlModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const handleInputChange = valueName => e => {\n    const newPlaylistControlModalState = { ...playlistControlModalState,\n      [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    if (valueName === 'nameTextFieldValue') newPlaylistControlModalState.nameNotUsableReason = '';\n    setPlaylistControlModalState(newPlaylistControlModalState);\n  };\n\n  const tryPlaylistCreate = () => {\n    let isRequestable = true;\n    let newPlaylistControlModalState = { ...playlistControlModalState,\n      isProcessing: true\n    }; // trim all strings in states\n\n    for (const key in newPlaylistControlModalState) if (typeof newPlaylistControlModalState[key] === 'string') newPlaylistControlModalState[key] = newPlaylistControlModalState[key].trim();\n\n    if (!newPlaylistControlModalState.nameTextFieldValue) {\n      newPlaylistControlModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\n      isRequestable = false;\n    }\n\n    setPlaylistControlModalState(newPlaylistControlModalState);\n\n    if (isRequestable) {//\n    }\n\n    setTimeout(() => {\n      newPlaylistControlModalState = { ...newPlaylistControlModalState,\n        isProcessing: false\n      };\n      setPlaylistControlModalState(newPlaylistControlModalState);\n    }, 5000);\n  };\n\n  const tryPlaylistModify = () => {//\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    keyboard: false,\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: props.createMode ? '재생목록 만들기' : '재생목록 수정'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uC774\\uB984\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: props.createMode ? '여기에 새로 만드실 재생목록의 이름을 적어주세요' : '여기에 이 재생목록의 새 이름을 적어주세요',\n            disabled: playlistControlModalState.isProcessing,\n            value: playlistControlModalState.nameTextFieldValue,\n            onChange: handleInputChange('nameTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: playlistControlModalState.nameNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC7AC\\uC0DD\\uBAA9\\uB85D \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isAllowingDuplicate'),\n            checked: playlistControlModalState.isAllowingDuplicate,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicItemDeletableSwitch\",\n            label: `중복되는 영상을 추가할 수 ${playlistControlModalState.isAllowingDuplicate ? '있어요' : '없어요'}.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicAccessable'),\n            checked: playlistControlModalState.isPublicAccessable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicAccessableSwitch\",\n            label: `다른 사람이 재생목록을 볼 수 ${playlistControlModalState.isPublicAccessable ? '있어요' : '없어요'}.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemAppendable'),\n            checked: playlistControlModalState.isPublicItemAppendable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicItemAppendableSwitch\",\n            label: `다른 사람이 재생목록에 영상을 추가할 수 ${playlistControlModalState.isPublicItemAppendable ? '있어요' : '없어요'}.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Switch, {\n            onChange: handleInputChange('isPublicItemDeletable'),\n            checked: playlistControlModalState.isPublicItemDeletable,\n            disabled: playlistControlModalState.isProcessing,\n            id: \"isPublicItemDeletableSwitch\",\n            label: `다른 사람이 재생목록에서 영상을 삭제할 수 ${playlistControlModalState.isPublicItemDeletable ? '있어요' : '없어요'}.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: playlistControlModalState.playlistCreationFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: playlistControlModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: props.createMode ? tryPlaylistCreate : tryPlaylistModify,\n        showSpinner: playlistControlModalState.isProcessing,\n        children: props.createMode ? '재생목록 만들기' : '재생목록 수정'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PlaylistControlModal, \"7BR45PZPVlVjzAG9PlP1/XvUgZA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = PlaylistControlModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistControlModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/playco/element/playlistControlModal.tsx"],"names":["React","useState","useEffect","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","PlaylistControlModal","props","navigate","playlistControlModalState","setPlaylistControlModalState","isProcessing","nameTextFieldValue","initialModalState","name","nameNotUsableReason","isAllowingDuplicate","allow_duplicate","isPublicAccessable","public_accessable","isPublicItemAppendable","public_item_appendable","isPublicItemDeletable","public_item_deletable","playlistCreationFailedReason","closeModalFunc","setModalShowState","handleInputChange","valueName","e","newPlaylistControlModalState","target","type","checked","value","tryPlaylistCreate","isRequestable","key","trim","setTimeout","tryPlaylistModify","modalShowState","margin","createMode","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { PlaylistConfig } from '../playco/model';\r\n\r\nexport const PlaylistControlModal: React.FC = (props: {\r\n  modalShowState: boolean;\r\n  setModalShowState: (boolean) => void;\r\n  createMode?: boolean;\r\n  initialModalState?: Playlist;\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [playlistControlModalState, setPlaylistControlModalState] = useState({\r\n    isProcessing: false,\r\n\r\n    nameTextFieldValue: props.initialModalState?.name || '',\r\n    nameNotUsableReason: '',\r\n    isAllowingDuplicate: props.initialModalState?.allow_duplicate ?? true,\r\n    isPublicAccessable: props.initialModalState?.public_accessable ?? false,\r\n    isPublicItemAppendable: props.initialModalState?.public_item_appendable ?? false,\r\n    isPublicItemDeletable: props.initialModalState?.public_item_deletable ?? false,\r\n    playlistCreationFailedReason: '',\r\n  });\r\n  useEffect(() => setPlaylistControlModalState({\r\n    ...playlistControlModalState,\r\n    nameTextFieldValue: props.initialModalState?.name ?? '',\r\n    nameNotUsableReason: '',\r\n    isAllowingDuplicate: props.initialModalState?.allow_duplicate ?? true,\r\n    isPublicAccessable: props.initialModalState?.public_accessable ?? false,\r\n    isPublicItemAppendable: props.initialModalState?.public_item_appendable ?? false,\r\n    isPublicItemDeletable: props.initialModalState?.public_item_deletable ?? false,\r\n    playlistCreationFailedReason: '',\r\n  }), [props]);\r\n  const closeModalFunc = () => {\r\n    if (!playlistControlModalState.isProcessing)\r\n      props.setModalShowState(false);\r\n  };\r\n  const handleInputChange = (valueName) => (e) => {\r\n    const newPlaylistControlModalState = {\r\n      ...playlistControlModalState,\r\n      [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n    };\r\n    if (valueName === 'nameTextFieldValue')\r\n      newPlaylistControlModalState.nameNotUsableReason = '';\r\n    setPlaylistControlModalState(newPlaylistControlModalState);\r\n  }\r\n  const tryPlaylistCreate = () => {\r\n    let isRequestable = true;\r\n    let newPlaylistControlModalState = {\r\n      ...playlistControlModalState,\r\n      isProcessing: true,\r\n    };\r\n\r\n    // trim all strings in states\r\n    for (const key in newPlaylistControlModalState)\r\n      if (typeof (newPlaylistControlModalState[key]) === 'string')\r\n        newPlaylistControlModalState[key] = newPlaylistControlModalState[key].trim();\r\n\r\n    if (!newPlaylistControlModalState.nameTextFieldValue) {\r\n      newPlaylistControlModalState.nameNotUsableReason = '재생목록 이름을 적어주세요!';\r\n      isRequestable = false;\r\n    }\r\n    setPlaylistControlModalState(newPlaylistControlModalState);\r\n\r\n    if (isRequestable) {\r\n      //\r\n    }\r\n\r\n    setTimeout(() => {\r\n      newPlaylistControlModalState = {\r\n        ...newPlaylistControlModalState,\r\n        isProcessing: false,\r\n      };\r\n      setPlaylistControlModalState(newPlaylistControlModalState);\r\n    }, 5000);\r\n  }\r\n  const tryPlaylistModify = () => {\r\n    //\r\n  }\r\n\r\n  return <Modal\r\n    show={props.modalShowState}\r\n    onHide={closeModalFunc}\r\n    backdrop='static'\r\n    keyboard={false}\r\n    centered >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>\r\n        <h5 style={{ margin: 0, }}>\r\n          {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n        </h5>\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 이름</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder={\r\n              (props.createMode)\r\n                ? '여기에 새로 만드실 재생목록의 이름을 적어주세요'\r\n                : '여기에 이 재생목록의 새 이름을 적어주세요'\r\n            }\r\n            disabled={playlistControlModalState.isProcessing}\r\n            value={playlistControlModalState.nameTextFieldValue}\r\n            onChange={handleInputChange('nameTextFieldValue')} />\r\n          <PHFormText>{playlistControlModalState.nameNotUsableReason}</PHFormText>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>재생목록 설정</Form.Label>\r\n          <Form.Switch\r\n            onChange={handleInputChange('isAllowingDuplicate')}\r\n            checked={playlistControlModalState.isAllowingDuplicate}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemDeletableSwitch'\r\n            label={`중복되는 영상을 추가할 수 ${(playlistControlModalState.isAllowingDuplicate) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicAccessable')}\r\n            checked={playlistControlModalState.isPublicAccessable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicAccessableSwitch'\r\n            label={`다른 사람이 재생목록을 볼 수 ${(playlistControlModalState.isPublicAccessable) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemAppendable')}\r\n            checked={playlistControlModalState.isPublicItemAppendable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemAppendableSwitch'\r\n            label={`다른 사람이 재생목록에 영상을 추가할 수 ${(playlistControlModalState.isPublicItemAppendable) ? '있어요' : '없어요'}.`} />\r\n          <Form.Switch\r\n            onChange={handleInputChange('isPublicItemDeletable')}\r\n            checked={playlistControlModalState.isPublicItemDeletable}\r\n            disabled={playlistControlModalState.isProcessing}\r\n            id='isPublicItemDeletableSwitch'\r\n            label={`다른 사람이 재생목록에서 영상을 삭제할 수 ${(playlistControlModalState.isPublicItemDeletable) ? '있어요' : '없어요'}.`} />\r\n        </Form.Group>\r\n        <PHFormText>{playlistControlModalState.playlistCreationFailedReason}</PHFormText>\r\n      </Form>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button\r\n        variant='secondary'\r\n        onClick={closeModalFunc}\r\n        disabled={playlistControlModalState.isProcessing}>\r\n        취소\r\n      </Button>\r\n\r\n      <PHSpinnerButton\r\n        variant='primary'\r\n        size={false}\r\n        style={{ margin: undefined }}\r\n        onClick={(props.createMode) ? tryPlaylistCreate : tryPlaylistModify}\r\n        showSpinner={playlistControlModalState.isProcessing}>\r\n        {(props.createMode) ? '재생목록 만들기' : '재생목록 수정'}\r\n      </PHSpinnerButton>\r\n    </Modal.Footer>\r\n  </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}