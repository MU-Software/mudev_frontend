{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muListRow.jsx\";\nimport React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { PHButton } from \"./muButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nconst LISTROW_DEFAULT_LABEL_WIDTH = 10;\nconst LISTROW_MIN_ITEM_WIDTH = 15;\n/** @type { React.CSSProperties } */\n\nconst TextCutStyle = {\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n};\n/** @type { React.CSSProperties } */\n\nconst ListRowStyle = {\n  marginLeft: 2 + 'vw',\n  marginRight: 2 + 'vw',\n  padding: 8 + 'px',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  // borderTop: '1px solid #ddd',\n  borderBottom: '1px solid #ddd'\n};\n/** @type { React.CSSProperties } */\n\nconst ListRowAsHeaderStyle = { ...ListRowStyle,\n  fontWeight: 'bold',\n  borderTop: null,\n  borderBottom: '2px solid #ddd'\n};\n/** @type { React.CSSProperties } */\n\nconst ListRowItemStyle = { ...TextCutStyle,\n  flexGrow: 1,\n  width: 100 + '%'\n};\n\nclass ListRowLongTextType {\n  /** @type { String } */\n  constructor(text) {\n    this.text = void 0;\n    this.text = text;\n  }\n\n}\n\nconst L = ListRowLongTextType;\n\nclass ListRowInputType {\n  /** @type { String } */\n\n  /** @type { String } */\n\n  /** @type { String } */\n\n  /** @type { Function } */\n\n  /** @type { Boolean } */\n\n  /** @type { Boolean } */\n\n  /** @type { Boolean } */\n\n  /** @type { Object } */\n\n  /** @type { String } */\n\n  /** @type { String } */\n\n  /** @type { Number } */\n\n  /** @type { Number } */\n\n  /** @type { Number } */\n\n  /** @type { Number } */\n\n  /** @type { Number } */\n\n  /**\n   * Set visual variants of button.\n   * \"variant\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"variant\"'s possible cases are\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n\n  /**\n   * Set button size.\n   * \"size\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"size\"'s possible cases are\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  constructor({\n    name,\n    placeholder = '',\n    type = 'text',\n    onChange = null,\n    disabled = false,\n    readonly = false,\n    required = false,\n    state = null,\n    innerValue = null,\n    pattern = null,\n    // min/max length of string input\n    minLength = null,\n    maxLength = null,\n    // For input[type=\"number\"]\n    min = null,\n    max = null,\n    step = null,\n    // For input[type=(\"button\"|\"reset\"|\"submit\")]\n    variant = null,\n    size = null\n  }) {\n    this.name = void 0;\n    this.placeholder = void 0;\n    this.type = void 0;\n    this.onChange = void 0;\n    this.disabled = void 0;\n    this.readonly = void 0;\n    this.required = void 0;\n    this.state = void 0;\n    this.innerValue = void 0;\n    this.pattern = void 0;\n    this.minLength = void 0;\n    this.maxLength = void 0;\n    this.min = void 0;\n    this.max = void 0;\n    this.step = void 0;\n    this.variant = void 0;\n    this.size = void 0;\n    this.name = name;\n    this.placeholder = placeholder;\n    this.type = type;\n    this.onChange = onChange;\n    this.disabled = disabled;\n    this.readonly = readonly;\n    this.required = required;\n    this.state = state;\n    this.innerValue = innerValue;\n    this.pattern = pattern;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    this.min = min;\n    this.max = max;\n    this.step = step;\n    this.variant = variant;\n    this.size = size;\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowInputType(param);\n  }\n\n}\n\nclass ListRowButtonType {\n  /** @type { String } */\n\n  /** @type { String || JSX } */\n\n  /** @type { String } */\n\n  /** @type { Function } */\n\n  /** @type { Boolean } */\n\n  /**\n   * Set visual variants of button.\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n\n  /**\n   * Set button size.\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  constructor({\n    name,\n    innerValue = 'Submit',\n    type = 'button',\n    onClick = null,\n    disabled = false,\n    variant = null,\n    size = null\n  }) {\n    this.name = void 0;\n    this.innerValue = void 0;\n    this.type = void 0;\n    this.onClick = void 0;\n    this.disabled = void 0;\n    this.variant = void 0;\n    this.size = void 0;\n    this.name = name;\n    this.innerValue = innerValue;\n    this.type = type;\n    this.onClick = onClick;\n    this.disabled = disabled;\n    this.variant = variant;\n    this.size = size;\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowButtonType(param);\n  }\n\n}\n\nconst ListRow = props => {\n  let randomId = Math.random().toString(36).substr(2, 11);\n  let rowStyle = props.header ? ListRowAsHeaderStyle : ListRowStyle;\n  let enableLabel = !props.noLabel && props.label;\n  /** @type Array */\n\n  let childrenElement = props.children || [];\n  if (!Array.isArray(childrenElement)) childrenElement = [childrenElement];\n  /** @type number[] */\n\n  let itemWidthCollection = props.itemWidth || []; // Check if all values in array are number\n\n  if (!Array.isArray(itemWidthCollection) || !itemWidthCollection.every(e => typeof e === 'number')) itemWidthCollection = [enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0];\n  if (itemWidthCollection.length === 0) itemWidthCollection.push(enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0);\n  let targetLen = childrenElement.length + 1;\n  let currLen = itemWidthCollection.length;\n\n  if (currLen < targetLen) {\n    let definedWidth = itemWidthCollection.reduce((a, b) => a + b, 0) + LISTROW_MIN_ITEM_WIDTH * (targetLen - currLen);\n    if (definedWidth > 100) itemWidthCollection = itemWidthCollection.map(e => e / definedWidth * 100);\n    let oobWidth = (100 - itemWidthCollection.reduce((a, b) => a + b, 0)) / (targetLen - currLen);\n\n    while (itemWidthCollection.length < targetLen) {\n      itemWidthCollection.push(oobWidth);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: rowStyle,\n    onClick: props.onClick || null,\n    children: [enableLabel && /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: randomId,\n      style: { ...ListRowItemStyle,\n        width: itemWidthCollection[0] + '%'\n      },\n      children: props.label || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 22\n    }, this), childrenElement.map((obj, idx, arr) => {\n      let attrCollection = {\n        id: idx === 0 ? randomId : randomId + idx,\n        htmlFor: idx !== childrenElement.length - 1 ? randomId + (idx + 1) : null,\n        width: itemWidthCollection[idx + 1] + '%',\n        style: { ...ListRowItemStyle,\n          ...(typeof obj === 'string' ? {\n            textAlign: 'center'\n          } : {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }),\n          width: itemWidthCollection[idx + 1] + '%'\n        }\n      };\n\n      if (obj instanceof ListRowInputType) {\n        if (obj.state === undefined || obj.state === null) obj.state = {}; // input 타입이 checkbox거나 radio, select면 그에 대응하도록\n\n        if (obj.type === 'checkbox') {\n          return /*#__PURE__*/_jsxDEV(\"input\", { ...attrCollection,\n            type: obj.type,\n            name: obj.name,\n            disabled: obj.disabled,\n            checked: obj.state[obj.name],\n            onChange: obj.onChange(obj.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 20\n          }, this);\n        } else if (obj.type === 'radio') {\n          return /*#__PURE__*/_jsxDEV(\"input\", { ...attrCollection,\n            type: obj.type,\n            name: obj.name,\n            disabled: obj.disabled,\n            value: obj.innerValue,\n            onChange: obj.onChange(obj.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 20\n          }, this);\n        } else if (obj.type === 'textarea') {\n          let autoGrow = e => {\n            e.target.style.height = 'inherit';\n            e.target.style.height = e.target.scrollHeight + 20 + 'px';\n            console.log(e.target.style.height);\n          };\n\n          delete attrCollection.style.textOverflow;\n          delete attrCollection.style.overflow;\n          delete attrCollection.style.whiteSpace;\n          return /*#__PURE__*/_jsxDEV(\"textarea\", { ...attrCollection,\n            type: obj.type,\n            name: obj.name,\n            placeholder: obj.placeholder,\n            disabled: obj.disabled,\n            readOnly: obj.readonly,\n            value: obj.state[obj.name],\n            onInput: e => autoGrow(e),\n            onChange: obj.onChange(obj.name),\n            minLength: obj.minLength,\n            maxLength: obj.maxLength,\n            pattern: obj.pattern\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 20\n          }, this);\n        } else if (obj.type === 'select') {\n          let optionValue = obj.value;\n          let optionValueText = obj.innerValue;\n          if (!Array.isArray(optionValue)) optionValue = [optionValue];\n          if (!Array.isArray(optionValueText)) optionValueText = [optionValueText];\n          return /*#__PURE__*/_jsxDEV(\"select\", { ...attrCollection,\n            disabled: obj.disabled,\n            name: obj.name,\n            children: optionValue.map((o, i, a) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: optionValue,\n              children: optionValueText[i] || ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 20\n          }, this);\n        } else if (obj.type === 'button' || obj.type === 'submit' || obj.type === 'reset') {\n          return /*#__PURE__*/_jsxDEV(PHButton, { ...attrCollection,\n            disabled: obj.disabled,\n            onClick: obj.onChange(obj.name),\n            size: obj.size,\n            type: obj.type,\n            variant: obj.variant,\n            children: obj.innerValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 20\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"input\", { ...attrCollection,\n            type: obj.type,\n            name: obj.name,\n            placeholder: obj.placeholder,\n            disabled: obj.disabled,\n            readOnly: obj.readonly,\n            value: obj.state[obj.name],\n            onChange: obj.onChange(obj.name),\n            min: obj.min,\n            max: obj.max,\n            step: obj.step,\n            minLength: obj.minLength,\n            maxLength: obj.maxLength,\n            pattern: obj.pattern\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 20\n          }, this);\n        }\n      } else if (obj instanceof ListRowButtonType) {\n        return /*#__PURE__*/_jsxDEV(PHButton, { ...attrCollection,\n          disabled: obj.disabled,\n          onClick: obj.onClick(obj.name),\n          size: obj.size,\n          type: obj.type,\n          variant: obj.variant,\n          children: obj.innerValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 18\n        }, this);\n      } else if (obj instanceof ListRowLongTextType) {\n        delete attrCollection.style.textOverflow;\n        delete attrCollection.style.overflow;\n        delete attrCollection.style.whiteSpace;\n        attrCollection.style.wordBreak = 'keep-all';\n        attrCollection.style.textAlign = 'start';\n        return /*#__PURE__*/_jsxDEV(\"div\", { ...attrCollection,\n          children: obj.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 18\n        }, this);\n      } else if (obj === null || obj === undefined) {\n        return /*#__PURE__*/_jsxDEV(\"div\", { ...attrCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 18\n        }, this);\n      } else if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'bigint') {\n        return /*#__PURE__*/_jsxDEV(\"div\", { ...attrCollection,\n          children: obj\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 18\n        }, this);\n      } else if (typeof obj === 'boolean') {\n        return /*#__PURE__*/_jsxDEV(\"div\", { ...attrCollection,\n          children: obj ? 'true' : 'false'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 18\n        }, this);\n      } else if (typeof obj === 'object' && obj.$$typeof === REACT_ELEMENT_TYPE) {\n        return /*#__PURE__*/React.cloneElement(obj, attrCollection);\n      } else {\n        return obj;\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ListRow;\nexport { ListRowLongTextType, L, ListRowInputType, ListRowButtonType, ListRow };\n\nvar _c;\n\n$RefreshReg$(_c, \"ListRow\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muListRow.jsx"],"names":["React","Button","PHButton","REACT_ELEMENT_TYPE","Symbol","for","LISTROW_DEFAULT_LABEL_WIDTH","LISTROW_MIN_ITEM_WIDTH","TextCutStyle","textOverflow","overflow","whiteSpace","ListRowStyle","marginLeft","marginRight","padding","display","flexDirection","justifyContent","borderBottom","ListRowAsHeaderStyle","fontWeight","borderTop","ListRowItemStyle","flexGrow","width","ListRowLongTextType","constructor","text","L","ListRowInputType","name","placeholder","type","onChange","disabled","readonly","required","state","innerValue","pattern","minLength","maxLength","min","max","step","variant","size","Object","preventExtensions","n","param","ListRowButtonType","onClick","ListRow","props","randomId","Math","random","toString","substr","rowStyle","header","enableLabel","noLabel","label","childrenElement","children","Array","isArray","itemWidthCollection","itemWidth","every","e","length","push","targetLen","currLen","definedWidth","reduce","a","b","map","oobWidth","obj","idx","arr","attrCollection","id","htmlFor","style","textAlign","alignItems","undefined","autoGrow","target","height","scrollHeight","console","log","optionValue","value","optionValueText","o","i","wordBreak","$$typeof","cloneElement"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { PHButton } from \"./muButton\";\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\nconst LISTROW_DEFAULT_LABEL_WIDTH = 10;\nconst LISTROW_MIN_ITEM_WIDTH = 15;\n\n/** @type { React.CSSProperties } */\nconst TextCutStyle = {\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowStyle = {\n  marginLeft: 2 + 'vw',\n  marginRight: 2 + 'vw',\n  padding: 8 + 'px',\n\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-evenly',\n  // borderTop: '1px solid #ddd',\n  borderBottom: '1px solid #ddd',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowAsHeaderStyle = {\n  ...ListRowStyle,\n  fontWeight: 'bold',\n  borderTop: null,\n  borderBottom: '2px solid #ddd',\n}\n\n/** @type { React.CSSProperties } */\nconst ListRowItemStyle = {\n  ...TextCutStyle,\n  flexGrow: 1,\n  width: 100 + '%',\n}\n\n\nclass ListRowLongTextType {\n  /** @type { String } */\n  text;\n\n  constructor(text) {\n    this.text = text;\n  }\n}\nconst L = ListRowLongTextType;\n\nclass ListRowInputType {\n  /** @type { String } */\n  name;\n  /** @type { String } */\n  placeholder;\n  /** @type { String } */\n  type;\n  /** @type { Function } */\n  onChange;\n  /** @type { Boolean } */\n  disabled;\n  /** @type { Boolean } */\n  readonly;\n  /** @type { Boolean } */\n  required;\n  /** @type { Object } */\n  state;\n\n  /** @type { String } */\n  innerValue;\n\n  /** @type { String } */\n  pattern;\n  /** @type { Number } */\n  minLength;\n  /** @type { Number } */\n  maxLength;\n\n  /** @type { Number } */\n  min;\n  /** @type { Number } */\n  max;\n  /** @type { Number } */\n  step;\n\n  /**\n   * Set visual variants of button.\n   * \"variant\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"variant\"'s possible cases are\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n  variant;\n  /**\n   * Set button size.\n   * \"size\" is for input[type=(\"button\"|\"reset\"|\"submit\")]\n   * \"size\"'s possible cases are\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  size;\n\n  constructor({\n    name,\n    placeholder = '',\n    type = 'text',\n    onChange = null,\n    disabled = false,\n    readonly = false,\n    required = false,\n    state = null,\n\n    innerValue = null,\n    pattern = null,\n    // min/max length of string input\n    minLength = null, maxLength = null,\n    // For input[type=\"number\"]\n    min = null, max = null, step = null,\n\n    // For input[type=(\"button\"|\"reset\"|\"submit\")]\n    variant = null, size = null,\n  }) {\n    this.name = name;\n    this.placeholder = placeholder;\n    this.type = type;\n    this.onChange = onChange;\n    this.disabled = disabled;\n    this.readonly = readonly;\n    this.required = required;\n    this.state = state;\n\n    this.innerValue = innerValue;\n\n    this.pattern = pattern;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n\n    this.min = min;\n    this.max = max;\n    this.step = step;\n\n    this.variant = variant;\n    this.size = size;\n\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowInputType(param);\n  }\n}\n\nclass ListRowButtonType {\n  /** @type { String } */\n  name;\n  /** @type { String || JSX } */\n  innerValue;\n  /** @type { String } */\n  type;\n  /** @type { Function } */\n  onClick;\n  /** @type { Boolean } */\n  disabled;\n\n  /**\n   * Set visual variants of button.\n   * @type ('primary'|'secondary'|'success'|'warning'|'danger'|'light'|'dark'|'link')\n   */\n  variant;\n  /**\n   * Set button size.\n   * @type ('lg'|'sm'|'extra-sm')\n   */\n  size;\n\n  constructor({\n    name,\n    innerValue = 'Submit',\n    type = 'button',\n    onClick = null,\n    disabled = false,\n    variant = null,\n    size = null,\n  }) {\n    this.name = name;\n    this.innerValue = innerValue;\n    this.type = type;\n    this.onClick = onClick;\n    this.disabled = disabled;\n    this.variant = variant;\n    this.size = size;\n\n    Object.preventExtensions(this);\n  }\n\n  static n(param) {\n    return new ListRowButtonType(param);\n  }\n}\n\nconst ListRow = (props) => {\n  let randomId = Math.random().toString(36).substr(2, 11);\n  let rowStyle = props.header ? ListRowAsHeaderStyle : ListRowStyle;\n  let enableLabel = !props.noLabel && props.label;\n\n  /** @type Array */\n  let childrenElement = props.children || [];\n  if (!Array.isArray(childrenElement))\n    childrenElement = [childrenElement,];\n\n  /** @type number[] */\n  let itemWidthCollection = props.itemWidth || [];\n  // Check if all values in array are number\n  if (!Array.isArray(itemWidthCollection) || !itemWidthCollection.every((e) => typeof e === 'number'))\n    itemWidthCollection = [enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0,];\n  if (itemWidthCollection.length === 0)\n    itemWidthCollection.push(enableLabel ? LISTROW_DEFAULT_LABEL_WIDTH : 0);\n\n  let targetLen = childrenElement.length + 1;\n  let currLen = itemWidthCollection.length;\n  if (currLen < targetLen) {\n    let definedWidth = itemWidthCollection.reduce((a, b) => a + b, 0) + (LISTROW_MIN_ITEM_WIDTH * (targetLen - currLen));\n    if (definedWidth > 100)\n      itemWidthCollection = itemWidthCollection.map((e) => e / definedWidth * 100);\n\n    let oobWidth = (100 - itemWidthCollection.reduce((a, b) => a + b, 0)) / (targetLen - currLen);\n    while (itemWidthCollection.length < targetLen) {\n      itemWidthCollection.push(oobWidth);\n    }\n  }\n\n  return <div style={rowStyle} onClick={props.onClick || null}>\n    {\n      enableLabel && <label htmlFor={randomId} style={{ ...ListRowItemStyle, width: itemWidthCollection[0] + '%' }}>\n        {props.label || ''}\n      </label>\n    }\n    {\n      childrenElement.map((obj, idx, arr) => {\n        let attrCollection = {\n          id: idx === 0 ? randomId : randomId + idx,\n          htmlFor: idx !== childrenElement.length - 1 ? randomId + (idx + 1) : null,\n          width: itemWidthCollection[idx + 1] + '%',\n          style: {\n            ...ListRowItemStyle,\n            ...((typeof obj === 'string')\n              ? {\n                textAlign: 'center',\n              } : {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }),\n            width: itemWidthCollection[idx + 1] + '%',\n          },\n        }\n\n        if (obj instanceof ListRowInputType) {\n          if (obj.state === undefined || obj.state === null)\n            obj.state = {}\n\n          // input 타입이 checkbox거나 radio, select면 그에 대응하도록\n          if (obj.type === 'checkbox') {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              disabled={obj.disabled}\n              checked={obj.state[obj.name]}\n              onChange={obj.onChange(obj.name)} />;\n          } else if (obj.type === 'radio') {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              disabled={obj.disabled}\n              value={obj.innerValue}\n              onChange={obj.onChange(obj.name)} />;\n          } else if (obj.type === 'textarea') {\n            let autoGrow = (e) => { e.target.style.height = 'inherit'; e.target.style.height = (e.target.scrollHeight + 20) + 'px'; console.log(e.target.style.height); }\n            delete(attrCollection.style.textOverflow);\n            delete(attrCollection.style.overflow);\n            delete(attrCollection.style.whiteSpace);\n\n            return <textarea\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              placeholder={obj.placeholder}\n              disabled={obj.disabled}\n              readOnly={obj.readonly}\n              value={obj.state[obj.name]}\n              onInput={(e) => autoGrow(e)}\n              onChange={obj.onChange(obj.name)}\n\n              minLength={obj.minLength} maxLength={obj.maxLength}\n              pattern={obj.pattern}\n            />;\n          } else if (obj.type === 'select') {\n            let optionValue = obj.value;\n            let optionValueText = obj.innerValue;\n            if (!Array.isArray(optionValue))\n              optionValue = [optionValue,];\n            if (!Array.isArray(optionValueText))\n              optionValueText = [optionValueText];\n\n            return <select\n              {...attrCollection}\n              disabled={obj.disabled}\n              name={obj.name}>\n              {optionValue.map((o, i, a) => <option value={optionValue}>{optionValueText[i] || ''}</option>)}\n            </select>\n          } else if (obj.type === 'button' || obj.type === 'submit' || obj.type === 'reset') {\n            return <PHButton\n              {...attrCollection}\n              disabled={obj.disabled}\n              onClick={obj.onChange(obj.name)}\n              size={obj.size}\n              type={obj.type}\n              variant={obj.variant} >\n              {obj.innerValue}\n            </PHButton>;\n          } else {\n            return <input\n              {...attrCollection}\n              type={obj.type}\n              name={obj.name}\n              placeholder={obj.placeholder}\n              disabled={obj.disabled}\n              readOnly={obj.readonly}\n              value={obj.state[obj.name]}\n              onChange={obj.onChange(obj.name)}\n\n              min={obj.min} max={obj.max} step={obj.step}\n              minLength={obj.minLength} maxLength={obj.maxLength}\n              pattern={obj.pattern}\n            />;\n          }\n        } else if (obj instanceof ListRowButtonType) {\n          return <PHButton\n            {...attrCollection}\n            disabled={obj.disabled}\n            onClick={obj.onClick(obj.name)}\n            size={obj.size}\n            type={obj.type}\n            variant={obj.variant} >\n            {obj.innerValue}\n          </PHButton>;\n        } else if (obj instanceof ListRowLongTextType) {\n          delete(attrCollection.style.textOverflow);\n          delete(attrCollection.style.overflow);\n          delete(attrCollection.style.whiteSpace);\n          attrCollection.style.wordBreak = 'keep-all';\n          attrCollection.style.textAlign = 'start'\n\n          return <div {...attrCollection}>{obj.text}</div>;\n        } else if (obj === null || obj === undefined) {\n          return <div {...attrCollection}></div>;\n        } else if (typeof (obj) === 'string' || typeof (obj) === 'number' || typeof (obj) === 'bigint') {\n          return <div {...attrCollection}>{obj}</div>;\n        } else if (typeof (obj) === 'boolean') {\n          return <div {...attrCollection}>{obj ? 'true' : 'false'}</div>;\n        } else if (typeof (obj) === 'object' && (obj.$$typeof === REACT_ELEMENT_TYPE)) {\n          return React.cloneElement(obj, attrCollection);\n        } else {\n          return obj;\n        }\n      })\n    }\n  </div>;\n}\n\nexport { ListRowLongTextType, L, ListRowInputType, ListRowButtonType, ListRow };\n"]},"metadata":{},"sourceType":"module"}