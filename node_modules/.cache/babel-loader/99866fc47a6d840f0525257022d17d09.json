{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\modal\\\\passwordChangeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { PHFormText } from 'src/ui/common/element/muFormText';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountPasswordChangeModal = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const [passwordChangeModalState, setPasswordChangeModalState] = useState({\n    isProcessing: false,\n    currentPasswordTextFieldValue: '',\n    currentPasswordNotUsableReason: '',\n    newPasswordTextFieldValue: '',\n    newPasswordNotUsableReason: '',\n    newPasswordReTypeTextFieldValue: '',\n    newPasswordReTypeNotUsableReason: '',\n    passwordChangeFailedReason: ''\n  });\n\n  const closeModalFunc = () => {\n    if (!passwordChangeModalState.isProcessing) props.setModalShowState(false);\n  };\n\n  const handleInputChange = valueName => e => {\n    const newModalState = { ...passwordChangeModalState,\n      [valueName]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    };\n    if (valueName === 'currentPasswordTextFieldValue') newModalState.currentPasswordNotUsableReason = '';else if (valueName === 'newPasswordTextFieldValue') newModalState.newPasswordNotUsableReason = '';else if (valueName === 'newPasswordReTypeTextFieldValue') newModalState.newPasswordReTypeNotUsableReason = '';\n    setPasswordChangeModalState(newModalState);\n  };\n\n  const doSubmittableCheck = () => {\n    if (passwordChangeModalState.currentPasswordTextFieldValue && passwordChangeModalState.newPasswordTextFieldValue && passwordChangeModalState.newPasswordReTypeTextFieldValue && passwordChangeModalState.currentPasswordTextFieldValue !== passwordChangeModalState.newPasswordTextFieldValue && passwordChangeModalState.newPasswordTextFieldValue === passwordChangeModalState.newPasswordReTypeTextFieldValue) return true;\n    return false;\n  };\n\n  const tryAccountPasswordChange = () => {\n    let isRequestable = true;\n    setPasswordChangeModalState(prevState => ({ ...prevState,\n      isProcessing: true\n    }));\n    const newModalState = { ...passwordChangeModalState,\n      isProcessing: true\n    }; // trim all strings in states\n\n    for (const key in newModalState) if (typeof newModalState[key] === 'string') newModalState[key] = newModalState[key].trim();\n\n    if (!newModalState.currentPasswordTextFieldValue) {\n      newModalState.currentPasswordNotUsableReason = '현재 사용 중인 비밀번호를 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    if (!newModalState.newPasswordTextFieldValue) {\n      newModalState.newPasswordNotUsableReason = '새 비밀번호를 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    if (!newModalState.newPasswordReTypeTextFieldValue) {\n      newModalState.newPasswordReTypeNotUsableReason = '위에 적으신 새 비밀번호를 다시 한번 적어주세요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    } else if (newModalState.newPasswordTextFieldValue !== newModalState.newPasswordReTypeTextFieldValue) {\n      newModalState.newPasswordReTypeNotUsableReason = '다시 적으신 비밀번호가 새 비밀번호와 일치하지 않아요.';\n      newModalState.isProcessing = false;\n      isRequestable = false;\n    }\n\n    setPasswordChangeModalState(newModalState);\n\n    if (isRequestable) {// DO SERVER THING ON HERE\n    }\n  };\n\n  const resetToOriginal = () => {\n    setPasswordChangeModalState({ ...passwordChangeModalState,\n      currentPasswordTextFieldValue: '',\n      newPasswordTextFieldValue: '',\n      newPasswordReTypeTextFieldValue: '',\n      passwordChangeFailedReason: ''\n    });\n  };\n\n  const isSubmittable = doSubmittableCheck();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.modalShowState,\n    onHide: closeModalFunc,\n    backdrop: \"static\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            margin: 0\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: evt => evt.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uD604\\uC7AC \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uD604\\uC7AC \\uC0AC\\uC6A9 \\uC911\\uC778 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.currentPasswordTextFieldValue,\n            onChange: handleInputChange('currentPasswordTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.currentPasswordNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC0C8\\uB85C \\uC0AC\\uC6A9\\uD558\\uC2E4 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPasswordTextFieldValue,\n            onChange: handleInputChange('newPasswordTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.newPasswordNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n            disabled: passwordChangeModalState.isProcessing,\n            value: passwordChangeModalState.newPasswordReTypeTextFieldValue,\n            onChange: handleInputChange('newPasswordReTypeTextFieldValue')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n            children: passwordChangeModalState.newPasswordReTypeNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PHFormText, {\n          children: passwordChangeModalState.passwordChangeFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: resetToOriginal,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uB418\\uB3CC\\uB9AC\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: closeModalFunc,\n        disabled: passwordChangeModalState.isProcessing,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n        variant: \"primary\",\n        size: false,\n        style: {\n          margin: undefined\n        },\n        onClick: tryAccountPasswordChange,\n        disabled: !isSubmittable,\n        showSpinner: passwordChangeModalState.isProcessing,\n        children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AccountPasswordChangeModal, \"odlKuJCGum2KoMJv3ikWZDqMFzI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AccountPasswordChangeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPasswordChangeModal\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/modal/passwordChangeModal.tsx"],"names":["React","useState","useNavigate","Form","Modal","Button","PHFormText","PHSpinnerButton","AccountPasswordChangeModal","props","navigate","passwordChangeModalState","setPasswordChangeModalState","isProcessing","currentPasswordTextFieldValue","currentPasswordNotUsableReason","newPasswordTextFieldValue","newPasswordNotUsableReason","newPasswordReTypeTextFieldValue","newPasswordReTypeNotUsableReason","passwordChangeFailedReason","closeModalFunc","setModalShowState","handleInputChange","valueName","e","newModalState","target","type","checked","value","doSubmittableCheck","tryAccountPasswordChange","isRequestable","prevState","key","trim","resetToOriginal","isSubmittable","modalShowState","margin","evt","preventDefault","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Modal, Button } from \"react-bootstrap\";\r\nimport { FrostError } from 'src/common/error';\r\n\r\nimport { PHFormText } from 'src/ui/common/element/muFormText';\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { AccountInfo } from 'src/redux/modules/account/model';\r\n\r\nexport const AccountPasswordChangeModal: React.FC = (props: {\r\n    modalShowState: boolean;\r\n    setModalShowState: (boolean) => void;\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [passwordChangeModalState, setPasswordChangeModalState] = useState({\r\n        isProcessing: false,\r\n\r\n        currentPasswordTextFieldValue: '',\r\n        currentPasswordNotUsableReason: '',\r\n        newPasswordTextFieldValue: '',\r\n        newPasswordNotUsableReason: '',\r\n        newPasswordReTypeTextFieldValue: '',\r\n        newPasswordReTypeNotUsableReason: '',\r\n        passwordChangeFailedReason: '',\r\n    });\r\n\r\n    const closeModalFunc = () => {\r\n        if (!passwordChangeModalState.isProcessing)\r\n            props.setModalShowState(false);\r\n    };\r\n    const handleInputChange = (valueName) => (e) => {\r\n        const newModalState = {\r\n            ...passwordChangeModalState,\r\n            [valueName]: (e.target.type === 'checkbox') ? e.target.checked : e.target.value,\r\n        };\r\n        if (valueName === 'currentPasswordTextFieldValue')\r\n            newModalState.currentPasswordNotUsableReason = '';\r\n        else if (valueName === 'newPasswordTextFieldValue')\r\n            newModalState.newPasswordNotUsableReason = '';\r\n        else if (valueName === 'newPasswordReTypeTextFieldValue')\r\n            newModalState.newPasswordReTypeNotUsableReason = '';\r\n        setPasswordChangeModalState(newModalState);\r\n    };\r\n    const doSubmittableCheck = () => {\r\n        if (passwordChangeModalState.currentPasswordTextFieldValue\r\n            && passwordChangeModalState.newPasswordTextFieldValue\r\n            && passwordChangeModalState.newPasswordReTypeTextFieldValue\r\n            && passwordChangeModalState.currentPasswordTextFieldValue !== passwordChangeModalState.newPasswordTextFieldValue\r\n            && passwordChangeModalState.newPasswordTextFieldValue === passwordChangeModalState.newPasswordReTypeTextFieldValue)\r\n            return true;\r\n        return false;\r\n    }\r\n    const tryAccountPasswordChange = () => {\r\n        let isRequestable = true;\r\n\r\n        setPasswordChangeModalState((prevState) => ({\r\n            ...prevState,\r\n            isProcessing: true,\r\n        }));\r\n\r\n        const newModalState = {\r\n            ...passwordChangeModalState,\r\n            isProcessing: true,\r\n        };\r\n        // trim all strings in states\r\n        for (const key in newModalState)\r\n            if (typeof (newModalState[key]) === 'string')\r\n                newModalState[key] = newModalState[key].trim();\r\n\r\n        if (!newModalState.currentPasswordTextFieldValue) {\r\n            newModalState.currentPasswordNotUsableReason = '현재 사용 중인 비밀번호를 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        if (!newModalState.newPasswordTextFieldValue) {\r\n            newModalState.newPasswordNotUsableReason = '새 비밀번호를 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        if (!newModalState.newPasswordReTypeTextFieldValue) {\r\n            newModalState.newPasswordReTypeNotUsableReason = '위에 적으신 새 비밀번호를 다시 한번 적어주세요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        } else if (newModalState.newPasswordTextFieldValue !== newModalState.newPasswordReTypeTextFieldValue) {\r\n            newModalState.newPasswordReTypeNotUsableReason = '다시 적으신 비밀번호가 새 비밀번호와 일치하지 않아요.';\r\n            newModalState.isProcessing = false;\r\n            isRequestable = false;\r\n        }\r\n        setPasswordChangeModalState(newModalState);\r\n\r\n        if (isRequestable) {\r\n            // DO SERVER THING ON HERE\r\n        }\r\n    };\r\n    const resetToOriginal = () => {\r\n        setPasswordChangeModalState({\r\n            ...passwordChangeModalState,\r\n\r\n            currentPasswordTextFieldValue: '',\r\n            newPasswordTextFieldValue: '',\r\n            newPasswordReTypeTextFieldValue: '',\r\n            passwordChangeFailedReason: '',\r\n        });\r\n    };\r\n\r\n    const isSubmittable = doSubmittableCheck();\r\n\r\n    return <Modal\r\n        show={props.modalShowState}\r\n        onHide={closeModalFunc}\r\n        backdrop='static'\r\n        centered >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                <h5 style={{ margin: 0, }}>\r\n                    비밀번호 변경\r\n                </h5>\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form onSubmit={evt => evt.preventDefault()}>\r\n                <Form.Group>\r\n                    <Form.Label>현재 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='여기에 현재 사용 중인 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.currentPasswordTextFieldValue}\r\n                        onChange={handleInputChange('currentPasswordTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.currentPasswordNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='여기에 새로 사용하실 비밀번호를 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPasswordTextFieldValue}\r\n                        onChange={handleInputChange('newPasswordTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.newPasswordNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>새 비밀번호 확인</Form.Label>\r\n                    <Form.Control\r\n                        type='password'\r\n                        placeholder='여기에 위에 입력하신 새 비밀번호를 다시 적어주세요.'\r\n                        disabled={passwordChangeModalState.isProcessing}\r\n                        value={passwordChangeModalState.newPasswordReTypeTextFieldValue}\r\n                        onChange={handleInputChange('newPasswordReTypeTextFieldValue')} />\r\n                    <PHFormText>{passwordChangeModalState.newPasswordReTypeNotUsableReason}</PHFormText>\r\n                </Form.Group>\r\n                <PHFormText>{passwordChangeModalState.passwordChangeFailedReason}</PHFormText>\r\n            </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button\r\n                variant='secondary'\r\n                onClick={resetToOriginal}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                되돌리기\r\n            </Button>\r\n\r\n            <Button\r\n                variant='secondary'\r\n                onClick={closeModalFunc}\r\n                disabled={passwordChangeModalState.isProcessing}>\r\n                취소\r\n            </Button>\r\n\r\n            <PHSpinnerButton\r\n                variant='primary'\r\n                size={false}\r\n                style={{ margin: undefined }}\r\n                onClick={tryAccountPasswordChange}\r\n                disabled={!isSubmittable}\r\n                showSpinner={passwordChangeModalState.isProcessing}>\r\n                비밀번호 변경\r\n            </PHSpinnerButton>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}