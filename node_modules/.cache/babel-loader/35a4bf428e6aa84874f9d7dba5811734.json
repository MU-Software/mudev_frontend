{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\page\\\\account\\\\signup.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { isEmail } from 'validator';\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\nimport { CustomFormText } from './element/CustomFormText';\nimport './account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst calculateIncludedCharType = str => {\n  const strType = [];\n\n  for (var i = 0; i < str.length; i++) {\n    let currentChar = str.charAt(i);\n\n    if (currentChar >= '0' && currentChar <= '9') {\n      strType.push('n'); // number\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\n      strType.push('l'); // lower\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\n      strType.push('u'); // upper\n    } else if (currentChar >= ' ' && currentChar <= '~') {\n      strType.push('s'); // special char\n    } else {\n      strType.push('e'); // error or unknown\n    }\n  }\n\n  return new Set(strType);\n};\n\nconst AccountSignUp = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [signUpFormData, setSignUpFormData] = useState({\n    idTextFieldValue: '',\n    pwTextFieldValue: '',\n    pwReTypeTextFieldValue: '',\n    emailTextFieldValue: '',\n    nickTextFieldValue: '',\n    idNotUsableReason: null,\n    nickNotUsableReason: null,\n    emailNotUsableReason: null,\n    pwNotUsableReason: null,\n    pwReTypeNotUsableReasonleReason: null,\n    signUpFailedReason: null,\n    isProcessing: false\n  });\n  const InputChecker = {\n    id: str => {\n      if (!str) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디를 입력해주세요.'\n        };\n      } else if (str.length < 4) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.'\n        };\n      } else if (48 < str.length) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.'\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        idNotUsableReason: null\n      };\n    },\n    email: str => {\n      if (!str) {\n        return {\n          success: false,\n          emailNotUsableReason: '이메일을 입력해주세요.'\n        };\n      }\n\n      if (!isEmail(str)) {\n        return {\n          success: false,\n          emailNotUsableReason: '올바르지 않은 이메일 형식이에요.'\n        };\n      }\n\n      return {\n        success: true,\n        emailNotUsableReason: null\n      };\n    },\n    nick: str => {\n      if (!str) {\n        return {\n          success: false,\n          nickNotUsableReason: '별칭을 입력해주세요.'\n        };\n      }\n\n      return {\n        success: true,\n        nickNotUsableReason: null\n      };\n    },\n    pw: str => {\n      if (!str) {\n        return {\n          success: false,\n          pwNotUsableReason: '사용하실 비밀번호를 입력해주세요,\\n'\n        };\n      } else if (str.length < 8) {\n        return {\n          success: false,\n          pwNotUsableReason: '길이가 너무 짧아요,\\n'\n        };\n      } else if (1024 < str.length) {\n        return {\n          success: false,\n          pwNotUsableReason: '길이가 너어어어무 길어요,\\n'\n        };\n      }\n\n      const strType = calculateIncludedCharType(str);\n\n      if (strType.has('e')) {\n        return {\n          success: false,\n          pwNotUsableReason: '비밀번호로 사용할 수 없는 글자가 포함되어 있어요,\\n'\n        };\n      } else if (strType.size < 2) {\n        return {\n          success: false,\n          pwNotUsableReason: '비밀번호가 너무 단순해요,\\n'\n        };\n      }\n\n      return {\n        success: true,\n        pwNotUsableReason: null\n      };\n    },\n    pwReType: (pwStr, pwReTypeStr) => {\n      if (!pwStr) {\n        return {\n          success: false,\n          pwReTypeNotUsableReason: '위에 입력하신 비밀번호를 한번 더 입력해주세요.'\n        };\n      } else if (pwStr === pwReTypeStr) {\n        return {\n          success: true,\n          pwReTypeNotUsableReason: null\n        };\n      }\n\n      return {\n        success: false,\n        pwReTypeNotUsableReason: '위에 입력하신 비밀번호와 일치하지 않아요.'\n      };\n    }\n  };\n\n  const handleInput = (fieldName, fieldValue) => {\n    const fieldStateKey = `${fieldName}TextFieldValue`;\n    const checkerResult = fieldName === 'pwReType' ? InputChecker[fieldName](signUpFormData.pwTextFieldValue, fieldValue) : InputChecker[fieldName](fieldValue);\n    delete checkerResult.success;\n    setSignUpFormData({ ...signUpFormData,\n      ...checkerResult,\n      [fieldStateKey]: fieldValue\n    });\n  };\n\n  const trySignUp = () => {\n    setSignUpFormData({ ...signUpFormData,\n      isProcessing: true\n    });\n    console.log(signUpFormData.idTextFieldValue);\n    console.log(signUpFormData.emailTextFieldValue);\n    console.log(signUpFormData.nickTextFieldValue);\n    console.log(signUpFormData.pwTextFieldValue);\n    console.log(signUpFormData.pwReTypeTextFieldValue); // dispatch(signInActionCreatorAsync());\n    // Run below if success\n    // navigate(-1);\n\n    setTimeout(() => setSignUpFormData({ ...signUpFormData,\n      isProcessing: false\n    }), 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"accountMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"accountAside\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpId\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC544\\uC774\\uB514\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.idTextFieldValue,\n            onChange: event => handleInput('id', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signUpFormData.idNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpNick\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBCC4\\uCE6D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.nickTextFieldValue,\n            onChange: event => handleInput('nick', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signUpFormData.nickNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uC774\\uBA54\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"someone@example.com\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.emailTextFieldValue,\n            onChange: event => handleInput('email', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signUpFormData.emailNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.pwTextFieldValue,\n            onChange: event => handleInput('pw', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            defaultChildren: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 8\\uC790 \\uC774\\uC0C1, \\uB300\\uC18C\\uBB38\\uC790/\\uC22B\\uC790/\\uD2B9\\uC218\\uBB38\\uC790 \\uC911 2\\uAC00\\uC9C0 \\uC774\\uC0C1\\uC758 \\uC870\\uD569\\uC73C\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n            children: signUpFormData.pwNotUsableReason ? signUpFormData.pwNotUsableReason + '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"accountAsideFormGroup\",\n          controlId: \"formSignUpPasswordReType\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"\\uC704\\uC5D0 \\uC785\\uB825\\uD558\\uC2E0 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uB2E4\\uC2DC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n            disabled: signUpFormData.isProcessing,\n            value: signUpFormData.pwReTypeTextFieldValue,\n            onChange: event => handleInput('pwReType', event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n            children: signUpFormData.pwReTypeNotUsableReason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CustomFormText, {\n          className: \"accountAsideFormGroup\",\n          children: signUpFormData.signUpFailedReason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accountSubmitBtnContainer\",\n          children: [/*#__PURE__*/_jsxDEV(PHSpinnerButton, {\n            variant: \"primary\",\n            type: \"submit\",\n            size: false,\n            style: {\n              margin: undefined\n            },\n            onClick: () => trySignUp(),\n            showSpinner: signUpFormData.isProcessing,\n            children: \"\\uACC4\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-light\",\n            disabled: signUpFormData.isProcessing,\n            onClick: () => navigate('/account/signin'),\n            children: \"\\uB85C\\uADF8\\uC778\\uD558\\uB7EC \\uAC00\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AccountSignUp, \"2Og8EtkzKM1hnE6n0vRc1z8dhvs=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AccountSignUp;\nexport { AccountSignUp };\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountSignUp\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/page/account/signup.jsx"],"names":["React","Component","useState","useNavigate","Button","Form","isEmail","PHSpinnerButton","CustomFormText","calculateIncludedCharType","str","strType","i","length","currentChar","charAt","push","Set","AccountSignUp","navigate","signUpFormData","setSignUpFormData","idTextFieldValue","pwTextFieldValue","pwReTypeTextFieldValue","emailTextFieldValue","nickTextFieldValue","idNotUsableReason","nickNotUsableReason","emailNotUsableReason","pwNotUsableReason","pwReTypeNotUsableReasonleReason","signUpFailedReason","isProcessing","InputChecker","id","success","has","email","nick","pw","size","pwReType","pwStr","pwReTypeStr","pwReTypeNotUsableReason","handleInput","fieldName","fieldValue","fieldStateKey","checkerResult","trySignUp","console","log","setTimeout","event","target","value","margin","undefined"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { isEmail } from 'validator';\r\n\r\nimport { PHSpinnerButton } from 'src/ui/common/element/muButton';\r\nimport { CustomFormText } from './element/CustomFormText';\r\nimport './account.css';\r\n\r\nconst calculateIncludedCharType = (str: string) => {\r\n  const strType: string[] = [];\r\n\r\n  for (var i = 0; i < str.length; i++) {\r\n    let currentChar = str.charAt(i);\r\n    if (currentChar >= '0' && currentChar <= '9') {\r\n      strType.push('n'); // number\r\n    } else if (currentChar >= 'a' && currentChar <= 'z') {\r\n      strType.push('l'); // lower\r\n    } else if (currentChar >= 'A' && currentChar <= 'Z') {\r\n      strType.push('u'); // upper\r\n    } else if (currentChar >= ' ' && currentChar <= '~') {\r\n      strType.push('s'); // special char\r\n    } else {\r\n      strType.push('e'); // error or unknown\r\n    }\r\n  }\r\n  return new Set(strType);\r\n}\r\n\r\nconst AccountSignUp = () => {\r\n  const navigate = useNavigate();\r\n  const [signUpFormData, setSignUpFormData] = useState({\r\n    idTextFieldValue: '',\r\n    pwTextFieldValue: '',\r\n    pwReTypeTextFieldValue: '',\r\n    emailTextFieldValue: '',\r\n    nickTextFieldValue: '',\r\n\r\n    idNotUsableReason: null,\r\n    nickNotUsableReason: null,\r\n    emailNotUsableReason: null,\r\n    pwNotUsableReason: null,\r\n    pwReTypeNotUsableReasonleReason: null,\r\n    signUpFailedReason: null,\r\n    isProcessing: false,\r\n  });\r\n\r\n  const InputChecker = {\r\n    id: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디를 입력해주세요.',\r\n        };\r\n      } else if (str.length < 4) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 짧아요, 4자 이상으로 적어주세요.',\r\n        };\r\n      } else if (48 < str.length) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디의 길이가 너무 길어요, 48자 이하로 적어주세요.',\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e')) {\r\n        return {\r\n          success: false,\r\n          idNotUsableReason: '아이디로 사용할 수 없는 글자가 포함되어 있어요, 다시 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return { success: true, idNotUsableReason: null };\r\n    },\r\n    email: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '이메일을 입력해주세요.',\r\n        };\r\n      }\r\n      if (!isEmail(str)) {\r\n        return {\r\n          success: false,\r\n          emailNotUsableReason: '올바르지 않은 이메일 형식이에요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        emailNotUsableReason: null,\r\n      };\r\n    },\r\n    nick: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          nickNotUsableReason: '별칭을 입력해주세요.',\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        nickNotUsableReason: null,\r\n      };\r\n    },\r\n    pw: (str: string) => {\r\n      if (!str) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '사용하실 비밀번호를 입력해주세요,\\n',\r\n        };\r\n      } else if (str.length < 8) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '길이가 너무 짧아요,\\n',\r\n        };\r\n      } else if (1024 < str.length) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '길이가 너어어어무 길어요,\\n',\r\n        };\r\n      }\r\n\r\n      const strType = calculateIncludedCharType(str);\r\n      if (strType.has('e')) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호로 사용할 수 없는 글자가 포함되어 있어요,\\n',\r\n        };\r\n      } else if (strType.size < 2) {\r\n        return {\r\n          success: false,\r\n          pwNotUsableReason: '비밀번호가 너무 단순해요,\\n'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        pwNotUsableReason: null,\r\n      };\r\n    },\r\n    pwReType: (pwStr: string, pwReTypeStr: string) => {\r\n      if (!pwStr) {\r\n        return {\r\n          success: false,\r\n          pwReTypeNotUsableReason: '위에 입력하신 비밀번호를 한번 더 입력해주세요.',\r\n        };\r\n      } else if (pwStr === pwReTypeStr) {\r\n        return {\r\n          success: true,\r\n          pwReTypeNotUsableReason: null,\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        pwReTypeNotUsableReason: '위에 입력하신 비밀번호와 일치하지 않아요.',\r\n      };\r\n    },\r\n  }\r\n\r\n  const handleInput = (fieldName: string, fieldValue: string) => {\r\n    const fieldStateKey = `${fieldName}TextFieldValue`;\r\n    const checkerResult = (fieldName === 'pwReType')\r\n      ? InputChecker[fieldName](signUpFormData.pwTextFieldValue, fieldValue)\r\n      : InputChecker[fieldName](fieldValue);\r\n    delete (checkerResult.success);\r\n\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      ...checkerResult,\r\n      [fieldStateKey]: fieldValue,\r\n    });\r\n  };\r\n  const trySignUp = () => {\r\n    setSignUpFormData({\r\n      ...signUpFormData,\r\n      isProcessing: true,\r\n    });\r\n\r\n    console.log(signUpFormData.idTextFieldValue);\r\n    console.log(signUpFormData.emailTextFieldValue);\r\n    console.log(signUpFormData.nickTextFieldValue);\r\n    console.log(signUpFormData.pwTextFieldValue);\r\n    console.log(signUpFormData.pwReTypeTextFieldValue);\r\n    // dispatch(signInActionCreatorAsync());\r\n\r\n    // Run below if success\r\n    // navigate(-1);\r\n    setTimeout(\r\n      () => setSignUpFormData({\r\n        ...signUpFormData,\r\n        isProcessing: false,\r\n      }), 5000\r\n    );\r\n  };\r\n\r\n  return <section className='accountMain'>\r\n    <header>\r\n      <h2>계정 만들기</h2>\r\n    </header>\r\n    <aside className='accountAside'>\r\n      <Form>\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpId'>\r\n          <Form.Label>아이디</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='아이디를 입력해주세요'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.idTextFieldValue}\r\n            onChange={(event) => handleInput('id', event.target.value)}\r\n          />\r\n          <CustomFormText>{signUpFormData.idNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpNick'>\r\n          <Form.Label>별칭</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='닉네임을 입력해주세요'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.nickTextFieldValue}\r\n            onChange={(event) => handleInput('nick', event.target.value)}\r\n          />\r\n          <CustomFormText>{signUpFormData.nickNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpEmail'>\r\n          <Form.Label>이메일</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='someone@example.com'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.emailTextFieldValue}\r\n            onChange={(event) => handleInput('email', event.target.value)}\r\n          />\r\n          <CustomFormText>{signUpFormData.emailNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPassword'>\r\n          <Form.Label>비밀번호</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='비밀번호'\r\n\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwTextFieldValue}\r\n            onChange={(event) => handleInput('pw', event.target.value)}\r\n          />\r\n          <CustomFormText defaultChildren='비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.'>\r\n            {signUpFormData.pwNotUsableReason ? signUpFormData.pwNotUsableReason + '비밀번호는 8자 이상, 대소문자/숫자/특수문자 중 2가지 이상의 조합으로 입력해주세요.' : ''}\r\n          </CustomFormText>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='accountAsideFormGroup' controlId='formSignUpPasswordReType'>\r\n          <Form.Label>비밀번호 확인</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='위에 입력하신 비밀번호를 다시 입력해주세요'\r\n            disabled={signUpFormData.isProcessing}\r\n            value={signUpFormData.pwReTypeTextFieldValue}\r\n            onChange={(event) => handleInput('pwReType', event.target.value)}\r\n          />\r\n          <CustomFormText>{signUpFormData.pwReTypeNotUsableReason}</CustomFormText>\r\n        </Form.Group>\r\n\r\n        <CustomFormText className='accountAsideFormGroup'>{signUpFormData.signUpFailedReason}</CustomFormText>\r\n\r\n        <div className='accountSubmitBtnContainer'>\r\n          <PHSpinnerButton\r\n            variant='primary'\r\n            type='submit'\r\n            size={false}\r\n            style={{ margin: undefined }}\r\n            onClick={() => trySignUp()}\r\n            showSpinner={signUpFormData.isProcessing}>\r\n            계정 만들기\r\n          </PHSpinnerButton>\r\n\r\n          <Button\r\n            variant='outline-light'\r\n            disabled={signUpFormData.isProcessing}\r\n            onClick={() => navigate('/account/signin')}>\r\n            로그인하러 가기\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </aside>\r\n  </section>;\r\n}\r\n\r\nexport { AccountSignUp };\r\n"]},"metadata":{},"sourceType":"module"}