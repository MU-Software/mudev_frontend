{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MUsoftware\\\\Desktop\\\\project\\\\MUsoftware\\\\mudev.cc\\\\src\\\\ui\\\\common\\\\element\\\\muButton.jsx\";\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\nimport './muButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\nexport const PHButton = props => {\n  var _ref;\n\n  let variant = props.variant || 'outline-primary';\n  let buttonDisabled = props.disabled || false;\n  let buttonType = props.type || 'button';\n  let buttonSize = (_ref = props.size === 'extra-sm' ? 'sm' : props.size) !== null && _ref !== void 0 ? _ref : 'sm';\n  let buttonStyle = props.smaller || props.size === 'extra-sm' ? {\n    margin: 0.25 + 'rem',\n    width: props.width,\n    height: props.height,\n    padding: '0rem 0.25rem',\n    fontSize: 0.75 + 'rem',\n    ...(props.style || {})\n  } : {\n    margin: 0.25 + 'rem',\n    width: props.width,\n    height: props.height,\n    ...(props.style || {})\n  };\n  let attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: variant\n  };\n  return /*#__PURE__*/_jsxDEV(Button, { ...attrCollection,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n_c = PHButton;\nexport const PHSpinnerButton = inProps => {\n  let props = Object.assign({}, inProps, {}); // When props.showSpinner is true, we disable button and show spinner\n\n  let shouldSpinnerShow = props.showSpinner || false;\n  delete props.showSpinner;\n\n  let spinnerElement = props.spinner || /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 41\n  }, this);\n\n  delete props.spinner;\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1) throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete props.children; // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n\n  if (!(typeof btnChildElement == 'object' && btnChildElement.$$typeof === REACT_ELEMENT_TYPE)) btnChildElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: btnChildElement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 23\n  }, this);\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-')) props.variant = 'outline-secondary';else props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = /*#__PURE__*/React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%'\n    }\n  });\n  spinnerElement = /*#__PURE__*/React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden'\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(PHButton, { ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PHSpinnerButtonChildrenContainer\",\n      children: [btnChildElement, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PHSpinnerButtonSpinnerContainer\",\n        children: spinnerElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_c2 = PHSpinnerButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PHButton\");\n$RefreshReg$(_c2, \"PHSpinnerButton\");","map":{"version":3,"sources":["C:/Users/MUsoftware/Desktop/project/MUsoftware/mudev.cc/src/ui/common/element/muButton.jsx"],"names":["React","Spinner","Button","REACT_ELEMENT_TYPE","Symbol","for","PHButton","props","variant","buttonDisabled","disabled","buttonType","type","buttonSize","size","buttonStyle","smaller","margin","width","height","padding","fontSize","style","attrCollection","onClick","children","PHSpinnerButton","inProps","Object","assign","shouldSpinnerShow","showSpinner","spinnerElement","spinner","btnChildElement","Children","count","Error","$$typeof","setGrayWhenDisabled","startsWith","cloneElement","opacity","visibility"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Button } from \"react-bootstrap\";\n\nimport './muButton.css'\n\nconst REACT_ELEMENT_TYPE = (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) || 0xeac7;\n\nexport const PHButton = (props) => {\n  let variant = props.variant || 'outline-primary';\n  let buttonDisabled = props.disabled || false;\n  let buttonType = props.type || 'button'\n  let buttonSize = (props.size === 'extra-sm' ? 'sm' : props.size) ?? 'sm'\n  let buttonStyle = (props.smaller || props.size === 'extra-sm')\n    ? {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      padding: '0rem 0.25rem',\n      fontSize: 0.75 + 'rem',\n      ...(props.style || {}),\n    }\n    : {\n      margin: 0.25 + 'rem',\n      width: props.width,\n      height: props.height,\n      ...(props.style || {}),\n    };\n\n  let attrCollection = {\n    disabled: buttonDisabled,\n    onClick: props.onClick,\n    size: buttonSize,\n    style: buttonStyle,\n    type: buttonType,\n    variant: variant,\n  }\n\n  return <Button {...attrCollection}>\n    {props.children}\n  </Button>\n};\n\nexport const PHSpinnerButton = (inProps) => {\n  let props = Object.assign({}, inProps, {});\n\n  // When props.showSpinner is true, we disable button and show spinner\n  let shouldSpinnerShow = props.showSpinner || false;\n  delete (props.showSpinner);\n\n  let spinnerElement = props.spinner || <Spinner animation=\"border\" role=\"status\">\n    {/* visually-hidden is Bootstrap's. */}\n    <span className=\"visually-hidden\">Loading...</span>\n  </Spinner>;\n  delete (props.spinner);\n\n  let btnChildElement = props.children || '\\u00A0';\n  if (React.Children.count(btnChildElement) > 1)\n    throw Error('PHSpinnerButton accepts only one element for the children.');\n  delete (props.children);\n\n\n  // If btnChild is not an DOMElement or reactElement, then wrap it with plain div.\n  if (!(typeof (btnChildElement) == 'object' && (btnChildElement.$$typeof === REACT_ELEMENT_TYPE)))\n    btnChildElement = <div>{btnChildElement}</div>;\n\n  if (shouldSpinnerShow) {\n    props.disabled = true;\n    if (props.setGrayWhenDisabled) {\n      if ((props.variant || '').startsWith('outline-'))\n        props.variant = 'outline-secondary';\n      else\n        props.variant = 'secondary';\n    }\n  }\n\n  btnChildElement = React.cloneElement(btnChildElement, {\n    style: {\n      width: 'fit-content',\n      height: 'fit-content',\n      // visibility: shouldSpinnerShow ? 'hidden' : 'visible',\n      opacity: shouldSpinnerShow ? '50%' : '100%',\n    }\n  });\n  spinnerElement = React.cloneElement(spinnerElement, {\n    style: {\n      visibility: shouldSpinnerShow ? 'visible' : 'hidden',\n    }\n  });\n\n  return <PHButton {...props}>\n    <div className='PHSpinnerButtonChildrenContainer'>\n      {btnChildElement}\n      <div className='PHSpinnerButtonSpinnerContainer'>\n        {spinnerElement}\n      </div>\n    </div>\n  </PHButton>\n}\n"]},"metadata":{},"sourceType":"module"}